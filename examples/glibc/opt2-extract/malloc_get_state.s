  .text
  .globl malloc_get_state
  .type malloc_get_state, @function

#! file-offset 0x787a0
#! rip-offset  0x787a0
#! capacity    544 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
.malloc_get_state:                  #        0x787a0  0      OPC=<label>           
  pushq %rbx                        #  1     0x787a0  1      OPC=pushq_r64_1       
  movl $0x8a8, %edi                 #  2     0x787a1  5      OPC=movl_r32_imm32    
  callq .__libc_malloc              #  3     0x787a6  5      OPC=callq_label       
  testq %rax, %rax                  #  4     0x787ab  3      OPC=testq_r64_r64     
  movq %rax, %rbx                   #  5     0x787ae  3      OPC=movq_r64_r64      
  je .L_789b9                       #  6     0x787b1  6      OPC=je_label_1        
  movl $0x1, %esi                   #  7     0x787b7  5      OPC=movl_r32_imm32    
  xorl %eax, %eax                   #  8     0x787bc  2      OPC=xorl_r32_r32      
  cmpl $0x0, 0x32843b(%rip)         #  9     0x787be  7      OPC=cmpl_m32_imm8     
  je .L_787d3                       #  10    0x787c5  2      OPC=je_label          
  lock                              #  11    0x787c7  1      OPC=lock              
  cmpxchgl %esi, 0x323471(%rip)     #  12    0x787c8  7      OPC=cmpxchgl_m32_r32  
  nop                               #  13    0x787cf  1      OPC=nop               
  jne .L_787dc                      #  14    0x787d0  2      OPC=jne_label         
  jmpq .L_787f6                     #  15    0x787d2  2      OPC=jmpq_label        
.L_787d3:                           #        0x787d4  0      OPC=<label>           
  cmpxchgl %esi, 0x323466(%rip)     #  16    0x787d4  7      OPC=cmpxchgl_m32_r32  
  je .L_787f6                       #  17    0x787db  2      OPC=je_label          
.L_787dc:                           #        0x787dd  0      OPC=<label>           
  leaq 0x32345d(%rip), %rdi         #  18    0x787dd  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  19    0x787e4  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  20    0x787eb  5      OPC=callq_label       
  addq $0x80, %rsp                  #  21    0x787f0  7      OPC=addq_r64_imm32    
.L_787f6:                           #        0x787f7  0      OPC=<label>           
  leaq 0x323443(%rip), %rdi         #  22    0x787f7  7      OPC=leaq_r64_m16      
  callq .malloc_consolidate         #  23    0x787fe  5      OPC=callq_label       
  movq 0x32348f(%rip), %rax         #  24    0x78803  7      OPC=movq_r64_m64      
  movq $0x444c4541, (%rbx)          #  25    0x7880a  7      OPC=movq_m64_imm32    
  leaq 0x323481(%rip), %rdx         #  26    0x78811  7      OPC=leaq_r64_m16      
  movq $0x4, 0x8(%rbx)              #  27    0x78818  8      OPC=movq_m64_imm32    
  movq $0x0, 0x10(%rbx)             #  28    0x78820  8      OPC=movq_m64_imm32    
  leaq 0x38(%rbx), %rcx             #  29    0x78828  4      OPC=leaq_r64_m16      
  movq $0x0, 0x18(%rbx)             #  30    0x7882c  8      OPC=movq_m64_imm32    
  movq $0x0, 0x28(%rbx)             #  31    0x78834  8      OPC=movq_m64_imm32    
  leaq 0x323c46(%rip), %rdi         #  32    0x7883c  7      OPC=leaq_r64_m16      
  movq %rax, 0x20(%rbx)             #  33    0x78843  4      OPC=movq_m64_r64      
  jmpq .L_78869                     #  34    0x78847  2      OPC=jmpq_label        
  nop                               #  35    0x78849  1      OPC=nop               
  nop                               #  36    0x7884a  1      OPC=nop               
  nop                               #  37    0x7884b  1      OPC=nop               
  nop                               #  38    0x7884c  1      OPC=nop               
  nop                               #  39    0x7884d  1      OPC=nop               
  nop                               #  40    0x7884e  1      OPC=nop               
  nop                               #  41    0x7884f  1      OPC=nop               
  nop                               #  42    0x78850  1      OPC=nop               
.L_78850:                           #        0x78851  0      OPC=<label>           
  movq %rsi, -0x8(%rcx)             #  43    0x78851  4      OPC=movq_m64_r64      
  movq 0x18(%rdx), %rsi             #  44    0x78855  4      OPC=movq_r64_m64      
  addq $0x10, %rdx                  #  45    0x78859  4      OPC=addq_r64_imm8     
  addq $0x10, %rcx                  #  46    0x7885d  4      OPC=addq_r64_imm8     
  movq %rsi, -0x10(%rcx)            #  47    0x78861  4      OPC=movq_m64_r64      
  cmpq %rdi, %rdx                   #  48    0x78865  3      OPC=cmpq_r64_r64      
  je .L_78890                       #  49    0x78868  2      OPC=je_label          
.L_78869:                           #        0x7886a  0      OPC=<label>           
  movq 0x10(%rdx), %rsi             #  50    0x7886a  4      OPC=movq_r64_m64      
  cmpq %rdx, %rsi                   #  51    0x7886e  3      OPC=cmpq_r64_r64      
  jne .L_78850                      #  52    0x78871  2      OPC=jne_label         
  addq $0x10, %rdx                  #  53    0x78873  4      OPC=addq_r64_imm8     
  movq $0x0, (%rcx)                 #  54    0x78877  7      OPC=movq_m64_imm32    
  movq $0x0, -0x8(%rcx)             #  55    0x7887e  8      OPC=movq_m64_imm32    
  addq $0x10, %rcx                  #  56    0x78886  4      OPC=addq_r64_imm8     
  cmpq %rdi, %rdx                   #  57    0x7888a  3      OPC=cmpq_r64_r64      
  jne .L_78869                      #  58    0x7888d  2      OPC=jne_label         
  xchgw %ax, %ax                    #  59    0x7888f  2      OPC=xchgw_ax_r16      
.L_78890:                           #        0x78891  0      OPC=<label>           
  movq 0x3229b9(%rip), %rax         #  60    0x78891  7      OPC=movq_r64_m64      
  movq %rax, 0x820(%rbx)            #  61    0x78898  7      OPC=movq_m64_r64      
  movq 0x323c1b(%rip), %rax         #  62    0x7889f  7      OPC=movq_r64_m64      
  movl %eax, 0x828(%rbx)            #  63    0x788a6  6      OPC=movl_m32_r32      
  movq 0x32294e(%rip), %rax         #  64    0x788ac  7      OPC=movq_r64_m64      
  movq %rax, 0x830(%rbx)            #  65    0x788b3  7      OPC=movq_m64_r64      
  movq 0x322948(%rip), %rax         #  66    0x788ba  7      OPC=movq_r64_m64      
  movq %rax, 0x838(%rbx)            #  67    0x788c1  7      OPC=movq_m64_r64      
  movl 0x32295f(%rip), %eax         #  68    0x788c8  6      OPC=movl_r32_m32      
  movl %eax, 0x840(%rbx)            #  69    0x788ce  6      OPC=movl_m32_r32      
  movq 0x322936(%rip), %rax         #  70    0x788d4  7      OPC=movq_r64_m64      
  movq %rax, 0x848(%rbx)            #  71    0x788db  7      OPC=movq_m64_r64      
  movl 0x3228e9(%rip), %eax         #  72    0x788e2  6      OPC=movl_r32_m32      
  movl %eax, 0x850(%rbx)            #  73    0x788e8  6      OPC=movl_m32_r32      
  movq 0x323bd4(%rip), %rax         #  74    0x788ee  7      OPC=movq_r64_m64      
  movq $0x0, 0x860(%rbx)            #  75    0x788f5  11     OPC=movq_m64_imm32    
  movq %rax, 0x858(%rbx)            #  76    0x78900  7      OPC=movq_m64_r64      
  movl 0x32291c(%rip), %eax         #  77    0x78907  6      OPC=movl_r32_m32      
  movl %eax, 0x868(%rbx)            #  78    0x7890d  6      OPC=movl_m32_r32      
  movl 0x322918(%rip), %eax         #  79    0x78913  6      OPC=movl_r32_m32      
  movl %eax, 0x86c(%rbx)            #  80    0x78919  6      OPC=movl_m32_r32      
  movq 0x322913(%rip), %rax         #  81    0x7891f  7      OPC=movq_r64_m64      
  movq %rax, 0x870(%rbx)            #  82    0x78926  7      OPC=movq_m64_r64      
  movq 0x32290d(%rip), %rax         #  83    0x7892d  7      OPC=movq_r64_m64      
  movq %rax, 0x878(%rbx)            #  84    0x78934  7      OPC=movq_m64_r64      
  movl 0x3250cc(%rip), %eax         #  85    0x7893b  6      OPC=movl_r32_m32      
  movl %eax, 0x880(%rbx)            #  86    0x78941  6      OPC=movl_m32_r32      
  movq 0x32513b(%rip), %rax         #  87    0x78947  7      OPC=movq_r64_m64      
  movq %rax, 0x888(%rbx)            #  88    0x7894e  7      OPC=movq_m64_r64      
  movq 0x3228bd(%rip), %rax         #  89    0x78955  7      OPC=movq_r64_m64      
  movq %rax, 0x890(%rbx)            #  90    0x7895c  7      OPC=movq_m64_r64      
  movq 0x3228b7(%rip), %rax         #  91    0x78963  7      OPC=movq_r64_m64      
  movq %rax, 0x898(%rbx)            #  92    0x7896a  7      OPC=movq_m64_r64      
  movq 0x322851(%rip), %rax         #  93    0x78971  7      OPC=movq_r64_m64      
  movq %rax, 0x8a0(%rbx)            #  94    0x78978  7      OPC=movq_m64_r64      
  cmpl $0x0, 0x32827b(%rip)         #  95    0x7897f  7      OPC=cmpl_m32_imm8     
  je .L_78992                       #  96    0x78986  2      OPC=je_label          
  lock                              #  97    0x78988  1      OPC=lock              
  decl 0x3232b2(%rip)               #  98    0x78989  6      OPC=decl_m32          
  nop                               #  99    0x7898f  1      OPC=nop               
  jne .L_7899a                      #  100   0x78990  2      OPC=jne_label         
  jmpq .L_789b4                     #  101   0x78992  2      OPC=jmpq_label        
.L_78992:                           #        0x78994  0      OPC=<label>           
  decl 0x3232a8(%rip)               #  102   0x78994  6      OPC=decl_m32          
  je .L_789b4                       #  103   0x7899a  2      OPC=je_label          
.L_7899a:                           #        0x7899c  0      OPC=<label>           
  leaq 0x32329f(%rip), %rdi         #  104   0x7899c  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  105   0x789a3  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  106   0x789aa  5      OPC=callq_label       
  addq $0x80, %rsp                  #  107   0x789af  7      OPC=addq_r64_imm32    
.L_789b4:                           #        0x789b6  0      OPC=<label>           
  movq %rbx, %rax                   #  108   0x789b6  3      OPC=movq_r64_r64      
  popq %rbx                         #  109   0x789b9  1      OPC=popq_r64_1        
  retq                              #  110   0x789ba  1      OPC=retq              
.L_789b9:                           #        0x789bb  0      OPC=<label>           
  xorl %eax, %eax                   #  111   0x789bb  2      OPC=xorl_r32_r32      
  popq %rbx                         #  112   0x789bd  1      OPC=popq_r64_1        
  retq                              #  113   0x789be  1      OPC=retq              
  nop                               #  114   0x789bf  1      OPC=nop               
  nop                               #  115   0x789c0  1      OPC=nop               
  nop                               #  116   0x789c1  1      OPC=nop               
                                                                                   
.size malloc_get_state, .-malloc_get_state

