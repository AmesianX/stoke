  .text
  .globl malloc_stats
  .type malloc_stats, @function

#! file-offset 0x7a530
#! rip-offset  0x7a530
#! capacity    480 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
.malloc_stats:                      #        0x7a530  0      OPC=<label>           
  pushq %r15                        #  1     0x7a530  2      OPC=pushq_r64_1       
  pushq %r14                        #  2     0x7a532  2      OPC=pushq_r64_1       
  pushq %r13                        #  3     0x7a534  2      OPC=pushq_r64_1       
  pushq %r12                        #  4     0x7a536  2      OPC=pushq_r64_1       
  pushq %rbp                        #  5     0x7a538  1      OPC=pushq_r64_1       
  pushq %rbx                        #  6     0x7a539  1      OPC=pushq_r64_1       
  subq $0x48, %rsp                  #  7     0x7a53a  4      OPC=subq_r64_imm8     
  movl 0x320c80(%rip), %eax         #  8     0x7a53e  6      OPC=movl_r32_m32      
  movq 0x320ced(%rip), %r12         #  9     0x7a544  7      OPC=movq_r64_m64      
  testl %eax, %eax                  #  10    0x7a54b  2      OPC=testl_r32_r32     
  movl %r12d, %r13d                 #  11    0x7a54d  3      OPC=movl_r32_r32      
  js .L_7a700                       #  12    0x7a550  6      OPC=js_label_1        
.L_7a556:                           #        0x7a556  0      OPC=<label>           
  movq 0x320863(%rip), %rbx         #  13    0x7a556  7      OPC=movq_r64_m64      
  leaq 0x3216dc(%rip), %r14         #  14    0x7a55d  7      OPC=leaq_r64_m16      
  xorl %ebp, %ebp                   #  15    0x7a564  2      OPC=xorl_r32_r32      
  leaq 0x10(%rsp), %r15             #  16    0x7a566  5      OPC=leaq_r64_m16      
  movq (%rbx), %rax                 #  17    0x7a56b  3      OPC=movq_r64_m64      
  movl 0x74(%rax), %ecx             #  18    0x7a56e  3      OPC=movl_r32_m32      
  movl %ecx, %edx                   #  19    0x7a571  2      OPC=movl_r32_r32      
  movl %ecx, 0xc(%rsp)              #  20    0x7a573  4      OPC=movl_m32_r32      
  orl $0x2, %edx                    #  21    0x7a577  3      OPC=orl_r32_imm8      
  movl %edx, 0x74(%rax)             #  22    0x7a57a  3      OPC=movl_m32_r32      
  jmpq .L_7a583                     #  23    0x7a57d  2      OPC=jmpq_label        
  nop                               #  24    0x7a57f  1      OPC=nop               
.L_7a580:                           #        0x7a580  0      OPC=<label>           
  addl $0x1, %ebp                   #  25    0x7a580  3      OPC=addl_r32_imm8     
.L_7a583:                           #        0x7a583  0      OPC=<label>           
  movq $0x0, (%r15)                 #  26    0x7a583  7      OPC=movq_m64_imm32    
  movq $0x0, 0x8(%r15)              #  27    0x7a58a  8      OPC=movq_m64_imm32    
  movl $0x1, %esi                   #  28    0x7a592  5      OPC=movl_r32_imm32    
  movq $0x0, 0x10(%r15)             #  29    0x7a597  8      OPC=movq_m64_imm32    
  movq $0x0, 0x18(%r15)             #  30    0x7a59f  8      OPC=movq_m64_imm32    
  xorl %eax, %eax                   #  31    0x7a5a7  2      OPC=xorl_r32_r32      
  movq $0x0, 0x20(%r15)             #  32    0x7a5a9  8      OPC=movq_m64_imm32    
  cmpl $0x0, 0x326648(%rip)         #  33    0x7a5b1  7      OPC=cmpl_m32_imm8     
  je .L_7a5c3                       #  34    0x7a5b8  2      OPC=je_label          
  lock                              #  35    0x7a5ba  1      OPC=lock              
  cmpxchgl %esi, (%r14)             #  36    0x7a5bb  4      OPC=cmpxchgl_m32_r32  
  nop                               #  37    0x7a5bf  1      OPC=nop               
  jne .L_7a5c9                      #  38    0x7a5c0  2      OPC=jne_label         
  jmpq .L_7a5df                     #  39    0x7a5c2  2      OPC=jmpq_label        
.L_7a5c3:                           #        0x7a5c4  0      OPC=<label>           
  cmpxchgl %esi, (%r14)             #  40    0x7a5c4  4      OPC=cmpxchgl_m32_r32  
  je .L_7a5df                       #  41    0x7a5c8  2      OPC=je_label          
.L_7a5c9:                           #        0x7a5ca  0      OPC=<label>           
  leaq (%r14), %rdi                 #  42    0x7a5ca  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  43    0x7a5cd  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  44    0x7a5d4  5      OPC=callq_label       
  addq $0x80, %rsp                  #  45    0x7a5d9  7      OPC=addq_r64_imm32    
.L_7a5df:                           #        0x7a5e0  0      OPC=<label>           
  movq %r15, %rsi                   #  46    0x7a5e0  3      OPC=movq_r64_r64      
  movq %r14, %rdi                   #  47    0x7a5e3  3      OPC=movq_r64_r64      
  callq .int_mallinfo               #  48    0x7a5e6  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  49    0x7a5eb  3      OPC=movq_r64_m64      
  leaq 0xea446(%rip), %rsi          #  50    0x7a5ee  7      OPC=leaq_r64_m16      
  movl %ebp, %edx                   #  51    0x7a5f5  2      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  52    0x7a5f7  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  53    0x7a5f9  5      OPC=callq_label       
  movl 0x10(%rsp), %edx             #  54    0x7a5fe  4      OPC=movl_r32_m32      
  movq (%rbx), %rdi                 #  55    0x7a602  3      OPC=movq_r64_m64      
  leaq 0xea43a(%rip), %rsi          #  56    0x7a605  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  57    0x7a60c  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  58    0x7a60e  5      OPC=callq_label       
  movl 0x2c(%rsp), %edx             #  59    0x7a613  4      OPC=movl_r32_m32      
  movq (%rbx), %rdi                 #  60    0x7a617  3      OPC=movq_r64_m64      
  leaq 0xea43e(%rip), %rsi          #  61    0x7a61a  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  62    0x7a621  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  63    0x7a623  5      OPC=callq_label       
  addl 0x10(%rsp), %r12d            #  64    0x7a628  5      OPC=addl_r32_m32      
  addl 0x2c(%rsp), %r13d            #  65    0x7a62d  5      OPC=addl_r32_m32      
  cmpl $0x0, 0x3265c8(%rip)         #  66    0x7a632  7      OPC=cmpl_m32_imm8     
  je .L_7a642                       #  67    0x7a639  2      OPC=je_label          
  lock                              #  68    0x7a63b  1      OPC=lock              
  decl (%r14)                       #  69    0x7a63c  3      OPC=decl_m32          
  nop                               #  70    0x7a63f  1      OPC=nop               
  jne .L_7a647                      #  71    0x7a640  2      OPC=jne_label         
  jmpq .L_7a65d                     #  72    0x7a642  2      OPC=jmpq_label        
.L_7a642:                           #        0x7a644  0      OPC=<label>           
  decl (%r14)                       #  73    0x7a644  3      OPC=decl_m32          
  je .L_7a65d                       #  74    0x7a647  2      OPC=je_label          
.L_7a647:                           #        0x7a649  0      OPC=<label>           
  leaq (%r14), %rdi                 #  75    0x7a649  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  76    0x7a64c  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  77    0x7a653  5      OPC=callq_label       
  addq $0x80, %rsp                  #  78    0x7a658  7      OPC=addq_r64_imm32    
.L_7a65d:                           #        0x7a65f  0      OPC=<label>           
  movq 0x868(%r14), %r14            #  79    0x7a65f  7      OPC=movq_r64_m64      
  leaq 0x3215d5(%rip), %rax         #  80    0x7a666  7      OPC=leaq_r64_m16      
  cmpq %rax, %r14                   #  81    0x7a66d  3      OPC=cmpq_r64_r64      
  jne .L_7a580                      #  82    0x7a670  6      OPC=jne_label_1       
  movq (%rbx), %rcx                 #  83    0x7a676  3      OPC=movq_r64_m64      
  leaq 0xea3f9(%rip), %rdi          #  84    0x7a679  7      OPC=leaq_r64_m16      
  movl $0x14, %edx                  #  85    0x7a680  5      OPC=movl_r32_imm32    
  movl $0x1, %esi                   #  86    0x7a685  5      OPC=movl_r32_imm32    
  callq ._IO_fwrite                 #  87    0x7a68a  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  88    0x7a68f  3      OPC=movq_r64_m64      
  leaq 0xea3ae(%rip), %rsi          #  89    0x7a692  7      OPC=leaq_r64_m16      
  movl %r12d, %edx                  #  90    0x7a699  3      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  91    0x7a69c  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  92    0x7a69e  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  93    0x7a6a3  3      OPC=movq_r64_m64      
  leaq 0xea3b3(%rip), %rsi          #  94    0x7a6a6  7      OPC=leaq_r64_m16      
  movl %r13d, %edx                  #  95    0x7a6ad  3      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  96    0x7a6b0  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  97    0x7a6b2  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  98    0x7a6b7  3      OPC=movq_r64_m64      
  movl 0x320b72(%rip), %edx         #  99    0x7a6ba  6      OPC=movl_r32_m32      
  leaq 0xea3c7(%rip), %rsi          #  100   0x7a6c0  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  101   0x7a6c7  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  102   0x7a6c9  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  103   0x7a6ce  3      OPC=movq_r64_m64      
  movq 0x320b6a(%rip), %rdx         #  104   0x7a6d1  7      OPC=movq_r64_m64      
  leaq 0xea3c8(%rip), %rsi          #  105   0x7a6d8  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  106   0x7a6df  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  107   0x7a6e1  5      OPC=callq_label       
  movq (%rbx), %rax                 #  108   0x7a6e6  3      OPC=movq_r64_m64      
  movl 0xc(%rsp), %ecx              #  109   0x7a6e9  4      OPC=movl_r32_m32      
  orl %ecx, 0x74(%rax)              #  110   0x7a6ed  3      OPC=orl_m32_r32       
  addq $0x48, %rsp                  #  111   0x7a6f0  4      OPC=addq_r64_imm8     
  popq %rbx                         #  112   0x7a6f4  1      OPC=popq_r64_1        
  popq %rbp                         #  113   0x7a6f5  1      OPC=popq_r64_1        
  popq %r12                         #  114   0x7a6f6  2      OPC=popq_r64_1        
  popq %r13                         #  115   0x7a6f8  2      OPC=popq_r64_1        
  popq %r14                         #  116   0x7a6fa  2      OPC=popq_r64_1        
  popq %r15                         #  117   0x7a6fc  2      OPC=popq_r64_1        
  retq                              #  118   0x7a6fe  1      OPC=retq              
  nop                               #  119   0x7a6ff  1      OPC=nop               
  nop                               #  120   0x7a700  1      OPC=nop               
  nop                               #  121   0x7a701  1      OPC=nop               
.L_7a700:                           #        0x7a702  0      OPC=<label>           
  callq .ptmalloc_init_part_7       #  122   0x7a702  5      OPC=callq_label       
  jmpq .L_7a556                     #  123   0x7a707  5      OPC=jmpq_label_1      
  nop                               #  124   0x7a70c  1      OPC=nop               
  nop                               #  125   0x7a70d  1      OPC=nop               
  nop                               #  126   0x7a70e  1      OPC=nop               
  nop                               #  127   0x7a70f  1      OPC=nop               
  nop                               #  128   0x7a710  1      OPC=nop               
  nop                               #  129   0x7a711  1      OPC=nop               
                                                                                   
.size malloc_stats, .-malloc_stats

