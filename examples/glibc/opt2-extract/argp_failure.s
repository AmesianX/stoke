  .text
  .globl argp_failure
  .type argp_failure, @function

#! file-offset 0xefca0
#! rip-offset  0xefca0
#! capacity    528 bytes

# Text                       #  Line  RIP      Bytes  Opcode               
.argp_failure:               #        0xefca0  0      OPC=<label>          
  pushq %r14                 #  1     0xefca0  2      OPC=pushq_r64_1      
  pushq %r13                 #  2     0xefca2  2      OPC=pushq_r64_1      
  movl %esi, %r14d           #  3     0xefca4  3      OPC=movl_r32_r32     
  pushq %r12                 #  4     0xefca7  2      OPC=pushq_r64_1      
  pushq %rbp                 #  5     0xefca9  1      OPC=pushq_r64_1      
  movl %edx, %r13d           #  6     0xefcaa  3      OPC=movl_r32_r32     
  pushq %rbx                 #  7     0xefcad  1      OPC=pushq_r64_1      
  movq %rdi, %rbp            #  8     0xefcae  3      OPC=movq_r64_r64     
  subq $0x190, %rsp          #  9     0xefcb1  7      OPC=subq_r64_imm32   
  testb %al, %al             #  10    0xefcb8  2      OPC=testb_r8_r8      
  movq %r8, 0x100(%rsp)      #  11    0xefcba  8      OPC=movq_m64_r64     
  movq %r9, 0x108(%rsp)      #  12    0xefcc2  8      OPC=movq_m64_r64     
  je .L_efd0c                #  13    0xefcca  2      OPC=je_label         
  movaps %xmm0, 0x110(%rsp)  #  14    0xefccc  8      OPC=movaps_m128_xmm  
  movaps %xmm1, 0x120(%rsp)  #  15    0xefcd4  8      OPC=movaps_m128_xmm  
  movaps %xmm2, 0x130(%rsp)  #  16    0xefcdc  8      OPC=movaps_m128_xmm  
  movaps %xmm3, 0x140(%rsp)  #  17    0xefce4  8      OPC=movaps_m128_xmm  
  movaps %xmm4, 0x150(%rsp)  #  18    0xefcec  8      OPC=movaps_m128_xmm  
  movaps %xmm5, 0x160(%rsp)  #  19    0xefcf4  8      OPC=movaps_m128_xmm  
  movaps %xmm6, 0x170(%rsp)  #  20    0xefcfc  8      OPC=movaps_m128_xmm  
  movaps %xmm7, 0x180(%rsp)  #  21    0xefd04  8      OPC=movaps_m128_xmm  
.L_efd0c:                    #        0xefd0c  0      OPC=<label>          
  testq %rbp, %rbp           #  22    0xefd0c  3      OPC=testq_r64_r64    
  movq %rcx, %r12            #  23    0xefd0f  3      OPC=movq_r64_r64     
  je .L_efe08                #  24    0xefd12  6      OPC=je_label_1       
  testb $0x2, 0x1c(%rbp)     #  25    0xefd18  4      OPC=testb_m8_imm8    
  jne .L_efdf5               #  26    0xefd1c  6      OPC=jne_label_1      
  movq 0x48(%rbp), %rbx      #  27    0xefd22  4      OPC=movq_r64_m64     
  testq %rbx, %rbx           #  28    0xefd26  3      OPC=testq_r64_r64    
  je .L_efdf5                #  29    0xefd29  6      OPC=je_label_1       
  movq %rbx, %rdi            #  30    0xefd2f  3      OPC=movq_r64_r64     
  callq ._IO_flockfile       #  31    0xefd32  5      OPC=callq_label      
  movq 0x40(%rbp), %rdx      #  32    0xefd37  4      OPC=movq_r64_m64     
.L_efd3b:                    #        0xefd3b  0      OPC=<label>          
  leaq 0x7638b(%rip), %rsi   #  33    0xefd3b  7      OPC=leaq_r64_m16     
  xorl %eax, %eax            #  34    0xefd42  2      OPC=xorl_r32_r32     
  movq %rbx, %rdi            #  35    0xefd44  3      OPC=movq_r64_r64     
  callq .__fxprintf          #  36    0xefd47  5      OPC=callq_label      
  testq %r12, %r12           #  37    0xefd4c  3      OPC=testq_r64_r64    
  je .L_efdb5                #  38    0xefd4f  2      OPC=je_label         
  leaq 0x1c0(%rsp), %rax     #  39    0xefd51  8      OPC=leaq_r64_m16     
  leaq 0x10(%rsp), %rdx      #  40    0xefd59  5      OPC=leaq_r64_m16     
  leaq 0x8(%rsp), %rdi       #  41    0xefd5e  5      OPC=leaq_r64_m16     
  movq %r12, %rsi            #  42    0xefd63  3      OPC=movq_r64_r64     
  movl $0x20, 0x10(%rsp)     #  43    0xefd66  8      OPC=movl_m32_imm32   
  movl $0x30, 0x14(%rsp)     #  44    0xefd6e  8      OPC=movl_m32_imm32   
  movq %rax, 0x18(%rsp)      #  45    0xefd76  5      OPC=movq_m64_r64     
  leaq 0xe0(%rsp), %rax      #  46    0xefd7b  8      OPC=leaq_r64_m16     
  movq %rax, 0x20(%rsp)      #  47    0xefd83  5      OPC=movq_m64_r64     
  callq .vasprintf           #  48    0xefd88  5      OPC=callq_label      
  testl %eax, %eax           #  49    0xefd8d  2      OPC=testl_r32_r32    
  js .L_efe80                #  50    0xefd8f  6      OPC=js_label_1       
  movq 0x8(%rsp), %rdx       #  51    0xefd95  5      OPC=movq_r64_m64     
.L_efd9a:                    #        0xefd9a  0      OPC=<label>          
  leaq 0x7632a(%rip), %rsi   #  52    0xefd9a  7      OPC=leaq_r64_m16     
  movq %rbx, %rdi            #  53    0xefda1  3      OPC=movq_r64_r64     
  xorl %eax, %eax            #  54    0xefda4  2      OPC=xorl_r32_r32     
  callq .__fxprintf          #  55    0xefda6  5      OPC=callq_label      
  movq 0x8(%rsp), %rdi       #  56    0xefdab  5      OPC=movq_r64_m64     
  callq .L_1f8c0             #  57    0xefdb0  5      OPC=callq_label      
.L_efdb5:                    #        0xefdb5  0      OPC=<label>          
  testl %r13d, %r13d         #  58    0xefdb5  3      OPC=testl_r32_r32    
  jne .L_efe50               #  59    0xefdb8  6      OPC=jne_label_1      
.L_efdbe:                    #        0xefdbe  0      OPC=<label>          
  movl 0xc0(%rbx), %eax      #  60    0xefdbe  6      OPC=movl_r32_m32     
  testl %eax, %eax           #  61    0xefdc4  2      OPC=testl_r32_r32    
  jle .L_efe30               #  62    0xefdc6  2      OPC=jle_label        
  movq %rbx, %rsi            #  63    0xefdc8  3      OPC=movq_r64_r64     
  movl $0xa, %edi            #  64    0xefdcb  5      OPC=movl_r32_imm32   
  callq .putwc_unlocked      #  65    0xefdd0  5      OPC=callq_label      
.L_efdd5:                    #        0xefdd5  0      OPC=<label>          
  movq %rbx, %rdi            #  66    0xefdd5  3      OPC=movq_r64_r64     
  callq ._IO_funlockfile     #  67    0xefdd8  5      OPC=callq_label      
  testl %r14d, %r14d         #  68    0xefddd  3      OPC=testl_r32_r32    
  je .L_efdf5                #  69    0xefde0  2      OPC=je_label         
  testq %rbp, %rbp           #  70    0xefde2  3      OPC=testq_r64_r64    
  je .L_efea2                #  71    0xefde5  6      OPC=je_label_1       
  testb $0x20, 0x1c(%rbp)    #  72    0xefdeb  4      OPC=testb_m8_imm8    
  je .L_efea2                #  73    0xefdef  6      OPC=je_label_1       
.L_efdf5:                    #        0xefdf5  0      OPC=<label>          
  addq $0x190, %rsp          #  74    0xefdf5  7      OPC=addq_r64_imm32   
  popq %rbx                  #  75    0xefdfc  1      OPC=popq_r64_1       
  popq %rbp                  #  76    0xefdfd  1      OPC=popq_r64_1       
  popq %r12                  #  77    0xefdfe  2      OPC=popq_r64_1       
  popq %r13                  #  78    0xefe00  2      OPC=popq_r64_1       
  popq %r14                  #  79    0xefe02  2      OPC=popq_r64_1       
  retq                       #  80    0xefe04  1      OPC=retq             
  nop                        #  81    0xefe05  1      OPC=nop              
  nop                        #  82    0xefe06  1      OPC=nop              
  nop                        #  83    0xefe07  1      OPC=nop              
.L_efe08:                    #        0xefe08  0      OPC=<label>          
  movq 0x2aafb1(%rip), %rax  #  84    0xefe08  7      OPC=movq_r64_m64     
  movq (%rax), %rbx          #  85    0xefe0f  3      OPC=movq_r64_m64     
  testq %rbx, %rbx           #  86    0xefe12  3      OPC=testq_r64_r64    
  je .L_efdf5                #  87    0xefe15  2      OPC=je_label         
  movq %rbx, %rdi            #  88    0xefe17  3      OPC=movq_r64_r64     
  callq ._IO_flockfile       #  89    0xefe1a  5      OPC=callq_label      
  movq 0x2ab11a(%rip), %rax  #  90    0xefe1f  7      OPC=movq_r64_m64     
  movq (%rax), %rdx          #  91    0xefe26  3      OPC=movq_r64_m64     
  jmpq .L_efd3b              #  92    0xefe29  5      OPC=jmpq_label_1     
  xchgw %ax, %ax             #  93    0xefe2e  2      OPC=xchgw_ax_r16     
.L_efe30:                    #        0xefe30  0      OPC=<label>          
  movq 0x28(%rbx), %rax      #  94    0xefe30  4      OPC=movq_r64_m64     
  cmpq 0x30(%rbx), %rax      #  95    0xefe34  4      OPC=cmpq_r64_m64     
  jae .L_efe90               #  96    0xefe38  2      OPC=jae_label        
  leaq 0x1(%rax), %rdx       #  97    0xefe3a  4      OPC=leaq_r64_m16     
  movq %rdx, 0x28(%rbx)      #  98    0xefe3e  4      OPC=movq_m64_r64     
  movb $0xa, (%rax)          #  99    0xefe42  3      OPC=movb_m8_imm8     
  jmpq .L_efdd5              #  100   0xefe45  2      OPC=jmpq_label       
  nop                        #  101   0xefe47  1      OPC=nop              
  nop                        #  102   0xefe48  1      OPC=nop              
  nop                        #  103   0xefe49  1      OPC=nop              
  nop                        #  104   0xefe4a  1      OPC=nop              
  nop                        #  105   0xefe4b  1      OPC=nop              
  nop                        #  106   0xefe4c  1      OPC=nop              
  nop                        #  107   0xefe4d  1      OPC=nop              
  nop                        #  108   0xefe4e  1      OPC=nop              
  nop                        #  109   0xefe4f  1      OPC=nop              
.L_efe50:                    #        0xefe50  0      OPC=<label>          
  leaq 0x10(%rsp), %rsi      #  110   0xefe50  5      OPC=leaq_r64_m16     
  movl %r13d, %edi           #  111   0xefe55  3      OPC=movl_r32_r32     
  movl $0xc8, %edx           #  112   0xefe58  5      OPC=movl_r32_imm32   
  callq .__strerror_r        #  113   0xefe5d  5      OPC=callq_label      
  leaq 0x76262(%rip), %rsi   #  114   0xefe62  7      OPC=leaq_r64_m16     
  movq %rax, %rdx            #  115   0xefe69  3      OPC=movq_r64_r64     
  movq %rbx, %rdi            #  116   0xefe6c  3      OPC=movq_r64_r64     
  xorl %eax, %eax            #  117   0xefe6f  2      OPC=xorl_r32_r32     
  callq .__fxprintf          #  118   0xefe71  5      OPC=callq_label      
  jmpq .L_efdbe              #  119   0xefe76  5      OPC=jmpq_label_1     
  nop                        #  120   0xefe7b  1      OPC=nop              
  nop                        #  121   0xefe7c  1      OPC=nop              
  nop                        #  122   0xefe7d  1      OPC=nop              
  nop                        #  123   0xefe7e  1      OPC=nop              
  nop                        #  124   0xefe7f  1      OPC=nop              
.L_efe80:                    #        0xefe80  0      OPC=<label>          
  movq $0x0, 0x8(%rsp)       #  125   0xefe80  9      OPC=movq_m64_imm32   
  xorl %edx, %edx            #  126   0xefe89  2      OPC=xorl_r32_r32     
  jmpq .L_efd9a              #  127   0xefe8b  5      OPC=jmpq_label_1     
.L_efe90:                    #        0xefe90  0      OPC=<label>          
  movl $0xa, %esi            #  128   0xefe90  5      OPC=movl_r32_imm32   
  movq %rbx, %rdi            #  129   0xefe95  3      OPC=movq_r64_r64     
  callq .__overflow          #  130   0xefe98  5      OPC=callq_label      
  jmpq .L_efdd5              #  131   0xefe9d  5      OPC=jmpq_label_1     
.L_efea2:                    #        0xefea2  0      OPC=<label>          
  movl %r14d, %edi           #  132   0xefea2  3      OPC=movl_r32_r32     
  callq .exit                #  133   0xefea5  5      OPC=callq_label      
  nop                        #  134   0xefeaa  1      OPC=nop              
  nop                        #  135   0xefeab  1      OPC=nop              
  nop                        #  136   0xefeac  1      OPC=nop              
  nop                        #  137   0xefead  1      OPC=nop              
  nop                        #  138   0xefeae  1      OPC=nop              
  nop                        #  139   0xefeaf  1      OPC=nop              
                                                                           
.size argp_failure, .-argp_failure

