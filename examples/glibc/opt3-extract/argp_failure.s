  .text
  .globl argp_failure
  .type argp_failure, @function

#! file-offset 0x10f3a0
#! rip-offset  0x10f3a0
#! capacity    528 bytes

# Text                       #  Line  RIP       Bytes  Opcode               
.argp_failure:               #        0x10f3a0  0      OPC=<label>          
  pushq %r14                 #  1     0x10f3a0  2      OPC=pushq_r64_1      
  pushq %r13                 #  2     0x10f3a2  2      OPC=pushq_r64_1      
  movl %esi, %r14d           #  3     0x10f3a4  3      OPC=movl_r32_r32     
  pushq %r12                 #  4     0x10f3a7  2      OPC=pushq_r64_1      
  pushq %rbp                 #  5     0x10f3a9  1      OPC=pushq_r64_1      
  movl %edx, %r13d           #  6     0x10f3aa  3      OPC=movl_r32_r32     
  pushq %rbx                 #  7     0x10f3ad  1      OPC=pushq_r64_1      
  movq %rdi, %rbp            #  8     0x10f3ae  3      OPC=movq_r64_r64     
  subq $0x190, %rsp          #  9     0x10f3b1  7      OPC=subq_r64_imm32   
  testb %al, %al             #  10    0x10f3b8  2      OPC=testb_r8_r8      
  movq %r8, 0x100(%rsp)      #  11    0x10f3ba  8      OPC=movq_m64_r64     
  movq %r9, 0x108(%rsp)      #  12    0x10f3c2  8      OPC=movq_m64_r64     
  je .L_10f40c               #  13    0x10f3ca  2      OPC=je_label         
  movaps %xmm0, 0x110(%rsp)  #  14    0x10f3cc  8      OPC=movaps_m128_xmm  
  movaps %xmm1, 0x120(%rsp)  #  15    0x10f3d4  8      OPC=movaps_m128_xmm  
  movaps %xmm2, 0x130(%rsp)  #  16    0x10f3dc  8      OPC=movaps_m128_xmm  
  movaps %xmm3, 0x140(%rsp)  #  17    0x10f3e4  8      OPC=movaps_m128_xmm  
  movaps %xmm4, 0x150(%rsp)  #  18    0x10f3ec  8      OPC=movaps_m128_xmm  
  movaps %xmm5, 0x160(%rsp)  #  19    0x10f3f4  8      OPC=movaps_m128_xmm  
  movaps %xmm6, 0x170(%rsp)  #  20    0x10f3fc  8      OPC=movaps_m128_xmm  
  movaps %xmm7, 0x180(%rsp)  #  21    0x10f404  8      OPC=movaps_m128_xmm  
.L_10f40c:                   #        0x10f40c  0      OPC=<label>          
  testq %rbp, %rbp           #  22    0x10f40c  3      OPC=testq_r64_r64    
  movq %rcx, %r12            #  23    0x10f40f  3      OPC=movq_r64_r64     
  je .L_10f508               #  24    0x10f412  6      OPC=je_label_1       
  testb $0x2, 0x1c(%rbp)     #  25    0x10f418  4      OPC=testb_m8_imm8    
  jne .L_10f4f5              #  26    0x10f41c  6      OPC=jne_label_1      
  movq 0x48(%rbp), %rbx      #  27    0x10f422  4      OPC=movq_r64_m64     
  testq %rbx, %rbx           #  28    0x10f426  3      OPC=testq_r64_r64    
  je .L_10f4f5               #  29    0x10f429  6      OPC=je_label_1       
  movq %rbx, %rdi            #  30    0x10f42f  3      OPC=movq_r64_r64     
  callq ._IO_flockfile       #  31    0x10f432  5      OPC=callq_label      
  movq 0x40(%rbp), %rdx      #  32    0x10f437  4      OPC=movq_r64_m64     
.L_10f43b:                   #        0x10f43b  0      OPC=<label>          
  leaq 0x7dad7(%rip), %rsi   #  33    0x10f43b  7      OPC=leaq_r64_m16     
  xorl %eax, %eax            #  34    0x10f442  2      OPC=xorl_r32_r32     
  movq %rbx, %rdi            #  35    0x10f444  3      OPC=movq_r64_r64     
  callq .__fxprintf          #  36    0x10f447  5      OPC=callq_label      
  testq %r12, %r12           #  37    0x10f44c  3      OPC=testq_r64_r64    
  je .L_10f4b5               #  38    0x10f44f  2      OPC=je_label         
  leaq 0x1c0(%rsp), %rax     #  39    0x10f451  8      OPC=leaq_r64_m16     
  leaq 0x10(%rsp), %rdx      #  40    0x10f459  5      OPC=leaq_r64_m16     
  leaq 0x8(%rsp), %rdi       #  41    0x10f45e  5      OPC=leaq_r64_m16     
  movq %r12, %rsi            #  42    0x10f463  3      OPC=movq_r64_r64     
  movl $0x20, 0x10(%rsp)     #  43    0x10f466  8      OPC=movl_m32_imm32   
  movl $0x30, 0x14(%rsp)     #  44    0x10f46e  8      OPC=movl_m32_imm32   
  movq %rax, 0x18(%rsp)      #  45    0x10f476  5      OPC=movq_m64_r64     
  leaq 0xe0(%rsp), %rax      #  46    0x10f47b  8      OPC=leaq_r64_m16     
  movq %rax, 0x20(%rsp)      #  47    0x10f483  5      OPC=movq_m64_r64     
  callq .vasprintf           #  48    0x10f488  5      OPC=callq_label      
  testl %eax, %eax           #  49    0x10f48d  2      OPC=testl_r32_r32    
  js .L_10f580               #  50    0x10f48f  6      OPC=js_label_1       
  movq 0x8(%rsp), %rdx       #  51    0x10f495  5      OPC=movq_r64_m64     
.L_10f49a:                   #        0x10f49a  0      OPC=<label>          
  leaq 0x7da76(%rip), %rsi   #  52    0x10f49a  7      OPC=leaq_r64_m16     
  movq %rbx, %rdi            #  53    0x10f4a1  3      OPC=movq_r64_r64     
  xorl %eax, %eax            #  54    0x10f4a4  2      OPC=xorl_r32_r32     
  callq .__fxprintf          #  55    0x10f4a6  5      OPC=callq_label      
  movq 0x8(%rsp), %rdi       #  56    0x10f4ab  5      OPC=movq_r64_m64     
  callq .L_1f8c0             #  57    0x10f4b0  5      OPC=callq_label      
.L_10f4b5:                   #        0x10f4b5  0      OPC=<label>          
  testl %r13d, %r13d         #  58    0x10f4b5  3      OPC=testl_r32_r32    
  jne .L_10f550              #  59    0x10f4b8  6      OPC=jne_label_1      
.L_10f4be:                   #        0x10f4be  0      OPC=<label>          
  movl 0xc0(%rbx), %eax      #  60    0x10f4be  6      OPC=movl_r32_m32     
  testl %eax, %eax           #  61    0x10f4c4  2      OPC=testl_r32_r32    
  jle .L_10f530              #  62    0x10f4c6  2      OPC=jle_label        
  movq %rbx, %rsi            #  63    0x10f4c8  3      OPC=movq_r64_r64     
  movl $0xa, %edi            #  64    0x10f4cb  5      OPC=movl_r32_imm32   
  callq .putwc_unlocked      #  65    0x10f4d0  5      OPC=callq_label      
.L_10f4d5:                   #        0x10f4d5  0      OPC=<label>          
  movq %rbx, %rdi            #  66    0x10f4d5  3      OPC=movq_r64_r64     
  callq ._IO_funlockfile     #  67    0x10f4d8  5      OPC=callq_label      
  testl %r14d, %r14d         #  68    0x10f4dd  3      OPC=testl_r32_r32    
  je .L_10f4f5               #  69    0x10f4e0  2      OPC=je_label         
  testq %rbp, %rbp           #  70    0x10f4e2  3      OPC=testq_r64_r64    
  je .L_10f5a2               #  71    0x10f4e5  6      OPC=je_label_1       
  testb $0x20, 0x1c(%rbp)    #  72    0x10f4eb  4      OPC=testb_m8_imm8    
  je .L_10f5a2               #  73    0x10f4ef  6      OPC=je_label_1       
.L_10f4f5:                   #        0x10f4f5  0      OPC=<label>          
  addq $0x190, %rsp          #  74    0x10f4f5  7      OPC=addq_r64_imm32   
  popq %rbx                  #  75    0x10f4fc  1      OPC=popq_r64_1       
  popq %rbp                  #  76    0x10f4fd  1      OPC=popq_r64_1       
  popq %r12                  #  77    0x10f4fe  2      OPC=popq_r64_1       
  popq %r13                  #  78    0x10f500  2      OPC=popq_r64_1       
  popq %r14                  #  79    0x10f502  2      OPC=popq_r64_1       
  retq                       #  80    0x10f504  1      OPC=retq             
  nop                        #  81    0x10f505  1      OPC=nop              
  nop                        #  82    0x10f506  1      OPC=nop              
  nop                        #  83    0x10f507  1      OPC=nop              
.L_10f508:                   #        0x10f508  0      OPC=<label>          
  movq 0x2b18b1(%rip), %rax  #  84    0x10f508  7      OPC=movq_r64_m64     
  movq (%rax), %rbx          #  85    0x10f50f  3      OPC=movq_r64_m64     
  testq %rbx, %rbx           #  86    0x10f512  3      OPC=testq_r64_r64    
  je .L_10f4f5               #  87    0x10f515  2      OPC=je_label         
  movq %rbx, %rdi            #  88    0x10f517  3      OPC=movq_r64_r64     
  callq ._IO_flockfile       #  89    0x10f51a  5      OPC=callq_label      
  movq 0x2b1a1a(%rip), %rax  #  90    0x10f51f  7      OPC=movq_r64_m64     
  movq (%rax), %rdx          #  91    0x10f526  3      OPC=movq_r64_m64     
  jmpq .L_10f43b             #  92    0x10f529  5      OPC=jmpq_label_1     
  xchgw %ax, %ax             #  93    0x10f52e  2      OPC=xchgw_ax_r16     
.L_10f530:                   #        0x10f530  0      OPC=<label>          
  movq 0x28(%rbx), %rax      #  94    0x10f530  4      OPC=movq_r64_m64     
  cmpq 0x30(%rbx), %rax      #  95    0x10f534  4      OPC=cmpq_r64_m64     
  jae .L_10f590              #  96    0x10f538  2      OPC=jae_label        
  leaq 0x1(%rax), %rdx       #  97    0x10f53a  4      OPC=leaq_r64_m16     
  movq %rdx, 0x28(%rbx)      #  98    0x10f53e  4      OPC=movq_m64_r64     
  movb $0xa, (%rax)          #  99    0x10f542  3      OPC=movb_m8_imm8     
  jmpq .L_10f4d5             #  100   0x10f545  2      OPC=jmpq_label       
  nop                        #  101   0x10f547  1      OPC=nop              
  nop                        #  102   0x10f548  1      OPC=nop              
  nop                        #  103   0x10f549  1      OPC=nop              
  nop                        #  104   0x10f54a  1      OPC=nop              
  nop                        #  105   0x10f54b  1      OPC=nop              
  nop                        #  106   0x10f54c  1      OPC=nop              
  nop                        #  107   0x10f54d  1      OPC=nop              
  nop                        #  108   0x10f54e  1      OPC=nop              
  nop                        #  109   0x10f54f  1      OPC=nop              
.L_10f550:                   #        0x10f550  0      OPC=<label>          
  leaq 0x10(%rsp), %rsi      #  110   0x10f550  5      OPC=leaq_r64_m16     
  movl %r13d, %edi           #  111   0x10f555  3      OPC=movl_r32_r32     
  movl $0xc8, %edx           #  112   0x10f558  5      OPC=movl_r32_imm32   
  callq .__strerror_r        #  113   0x10f55d  5      OPC=callq_label      
  leaq 0x7d9ae(%rip), %rsi   #  114   0x10f562  7      OPC=leaq_r64_m16     
  movq %rax, %rdx            #  115   0x10f569  3      OPC=movq_r64_r64     
  movq %rbx, %rdi            #  116   0x10f56c  3      OPC=movq_r64_r64     
  xorl %eax, %eax            #  117   0x10f56f  2      OPC=xorl_r32_r32     
  callq .__fxprintf          #  118   0x10f571  5      OPC=callq_label      
  jmpq .L_10f4be             #  119   0x10f576  5      OPC=jmpq_label_1     
  nop                        #  120   0x10f57b  1      OPC=nop              
  nop                        #  121   0x10f57c  1      OPC=nop              
  nop                        #  122   0x10f57d  1      OPC=nop              
  nop                        #  123   0x10f57e  1      OPC=nop              
  nop                        #  124   0x10f57f  1      OPC=nop              
.L_10f580:                   #        0x10f580  0      OPC=<label>          
  movq $0x0, 0x8(%rsp)       #  125   0x10f580  9      OPC=movq_m64_imm32   
  xorl %edx, %edx            #  126   0x10f589  2      OPC=xorl_r32_r32     
  jmpq .L_10f49a             #  127   0x10f58b  5      OPC=jmpq_label_1     
.L_10f590:                   #        0x10f590  0      OPC=<label>          
  movl $0xa, %esi            #  128   0x10f590  5      OPC=movl_r32_imm32   
  movq %rbx, %rdi            #  129   0x10f595  3      OPC=movq_r64_r64     
  callq .__overflow          #  130   0x10f598  5      OPC=callq_label      
  jmpq .L_10f4d5             #  131   0x10f59d  5      OPC=jmpq_label_1     
.L_10f5a2:                   #        0x10f5a2  0      OPC=<label>          
  movl %r14d, %edi           #  132   0x10f5a2  3      OPC=movl_r32_r32     
  callq .exit                #  133   0x10f5a5  5      OPC=callq_label      
  nop                        #  134   0x10f5aa  1      OPC=nop              
  nop                        #  135   0x10f5ab  1      OPC=nop              
  nop                        #  136   0x10f5ac  1      OPC=nop              
  nop                        #  137   0x10f5ad  1      OPC=nop              
  nop                        #  138   0x10f5ae  1      OPC=nop              
  nop                        #  139   0x10f5af  1      OPC=nop              
                                                                            
.size argp_failure, .-argp_failure

