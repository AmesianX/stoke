  .text
  .globl merge_state_with_log
  .type merge_state_with_log, @function

#! file-offset 0xe31a0
#! rip-offset  0xe31a0
#! capacity    480 bytes

# Text                              #  Line  RIP      Bytes  Opcode              
.merge_state_with_log:              #        0xe31a0  0      OPC=<label>         
  pushq %r15                        #  1     0xe31a0  2      OPC=pushq_r64_1     
  pushq %r14                        #  2     0xe31a2  2      OPC=pushq_r64_1     
  movq %rdi, %r14                   #  3     0xe31a4  3      OPC=movq_r64_r64    
  pushq %r13                        #  4     0xe31a7  2      OPC=pushq_r64_1     
  pushq %r12                        #  5     0xe31a9  2      OPC=pushq_r64_1     
  pushq %rbp                        #  6     0xe31ab  1      OPC=pushq_r64_1     
  pushq %rbx                        #  7     0xe31ac  1      OPC=pushq_r64_1     
  movq %rsi, %rbp                   #  8     0xe31ad  3      OPC=movq_r64_r64    
  movq %rdx, %rbx                   #  9     0xe31b0  3      OPC=movq_r64_r64    
  subq $0x28, %rsp                  #  10    0xe31b3  4      OPC=subq_r64_imm8   
  movl 0x38(%rsi), %r8d             #  11    0xe31b7  4      OPC=movl_r32_m32    
  cmpl 0x90(%rsi), %r8d             #  12    0xe31bb  7      OPC=cmpl_r32_m32    
  movq 0x70(%rsi), %r13             #  13    0xe31c2  4      OPC=movq_r64_m64    
  jle .L_e3238                      #  14    0xe31c6  2      OPC=jle_label       
  movq 0x88(%rsi), %rdx             #  15    0xe31c8  7      OPC=movq_r64_m64    
  movslq %r8d, %rax                 #  16    0xe31cf  3      OPC=movslq_r64_r32  
  leaq (,%rax,8), %r12              #  17    0xe31d2  8      OPC=leaq_r64_m16    
  movq %rbx, (%rdx,%rax,8)          #  18    0xe31da  4      OPC=movq_m64_r64    
  movl %r8d, 0x90(%rsi)             #  19    0xe31de  7      OPC=movl_m32_r32    
.L_e31e5:                           #        0xe31e5  0      OPC=<label>         
  movl 0x8c(%r13), %eax             #  20    0xe31e5  7      OPC=movl_r32_m32    
  testl %eax, %eax                  #  21    0xe31ec  2      OPC=testl_r32_r32   
  je .L_e3220                       #  22    0xe31ee  2      OPC=je_label        
  testq %rbx, %rbx                  #  23    0xe31f0  3      OPC=testq_r64_r64   
  je .L_e32f0                       #  24    0xe31f3  6      OPC=je_label_1      
  leaq 0x8(%rbx), %r13              #  25    0xe31f9  4      OPC=leaq_r64_m16    
  movl %r8d, %edx                   #  26    0xe31fd  3      OPC=movl_r32_r32    
  movq %rbp, %rdi                   #  27    0xe3200  3      OPC=movq_r64_r64    
  movq %r13, %rsi                   #  28    0xe3203  3      OPC=movq_r64_r64    
  callq .check_subexp_matching_top  #  29    0xe3206  5      OPC=callq_label     
  testl %eax, %eax                  #  30    0xe320b  2      OPC=testl_r32_r32   
  movl %eax, (%r14)                 #  31    0xe320d  3      OPC=movl_m32_r32    
  jne .L_e32f0                      #  32    0xe3210  6      OPC=jne_label_1     
  testb $0x40, 0x50(%rbx)           #  33    0xe3216  4      OPC=testb_m8_imm8   
  jne .L_e3300                      #  34    0xe321a  6      OPC=jne_label_1     
.L_e3220:                           #        0xe3220  0      OPC=<label>         
  addq $0x28, %rsp                  #  35    0xe3220  4      OPC=addq_r64_imm8   
  movq %rbx, %rax                   #  36    0xe3224  3      OPC=movq_r64_r64    
  popq %rbx                         #  37    0xe3227  1      OPC=popq_r64_1      
  popq %rbp                         #  38    0xe3228  1      OPC=popq_r64_1      
  popq %r12                         #  39    0xe3229  2      OPC=popq_r64_1      
  popq %r13                         #  40    0xe322b  2      OPC=popq_r64_1      
  popq %r14                         #  41    0xe322d  2      OPC=popq_r64_1      
  popq %r15                         #  42    0xe322f  2      OPC=popq_r64_1      
  retq                              #  43    0xe3231  1      OPC=retq            
  nop                               #  44    0xe3232  1      OPC=nop             
  nop                               #  45    0xe3233  1      OPC=nop             
  nop                               #  46    0xe3234  1      OPC=nop             
  nop                               #  47    0xe3235  1      OPC=nop             
  nop                               #  48    0xe3236  1      OPC=nop             
  nop                               #  49    0xe3237  1      OPC=nop             
.L_e3238:                           #        0xe3238  0      OPC=<label>         
  movslq %r8d, %r12                 #  50    0xe3238  3      OPC=movslq_r64_r32  
  shlq $0x3, %r12                   #  51    0xe323b  4      OPC=shlq_r64_imm8   
  movq %r12, %r15                   #  52    0xe323f  3      OPC=movq_r64_r64    
  addq 0x88(%rsi), %r15             #  53    0xe3242  7      OPC=addq_r64_m64    
  movq (%r15), %rax                 #  54    0xe3249  3      OPC=movq_r64_m64    
  testq %rax, %rax                  #  55    0xe324c  3      OPC=testq_r64_r64   
  je .L_e3328                       #  56    0xe324f  6      OPC=je_label_1      
  testq %rbx, %rbx                  #  57    0xe3255  3      OPC=testq_r64_r64   
  movq 0x38(%rax), %rdx             #  58    0xe3258  4      OPC=movq_r64_m64    
  je .L_e3330                       #  59    0xe325c  6      OPC=je_label_1      
  movq 0x38(%rbx), %r15             #  60    0xe3262  4      OPC=movq_r64_m64    
  leaq 0x10(%rsp), %rbx             #  61    0xe3266  5      OPC=leaq_r64_m16    
  movl %r8d, (%rsp)                 #  62    0xe326b  4      OPC=movl_m32_r32    
  movq %rbx, %rdi                   #  63    0xe326f  3      OPC=movq_r64_r64    
  movq %r15, %rsi                   #  64    0xe3272  3      OPC=movq_r64_r64    
  callq .re_node_set_init_union     #  65    0xe3275  5      OPC=callq_label     
  testl %eax, %eax                  #  66    0xe327a  2      OPC=testl_r32_r32   
  movl %eax, (%r14)                 #  67    0xe327c  3      OPC=movl_m32_r32    
  movl (%rsp), %r8d                 #  68    0xe327f  4      OPC=movl_r32_m32    
  jne .L_e32f0                      #  69    0xe3283  2      OPC=jne_label       
  movl 0x38(%rbp), %eax             #  70    0xe3285  3      OPC=movl_r32_m32    
  movl 0x78(%rbp), %edx             #  71    0xe3288  3      OPC=movl_r32_m32    
  movq %rbp, %rdi                   #  72    0xe328b  3      OPC=movq_r64_r64    
  movl %r8d, 0xc(%rsp)              #  73    0xe328e  5      OPC=movl_m32_r32    
  leal -0x1(%rax), %esi             #  74    0xe3293  3      OPC=leal_r32_m16    
  callq .re_string_context_at       #  75    0xe3296  5      OPC=callq_label     
  movq %r12, %r9                    #  76    0xe329b  3      OPC=movq_r64_r64    
  addq 0x88(%rbp), %r9              #  77    0xe329e  7      OPC=addq_r64_m64    
  movq %rbx, %rdx                   #  78    0xe32a5  3      OPC=movq_r64_r64    
  movl %eax, %ecx                   #  79    0xe32a8  2      OPC=movl_r32_r32    
  movq %r13, %rsi                   #  80    0xe32aa  3      OPC=movq_r64_r64    
  movq %r14, %rdi                   #  81    0xe32ad  3      OPC=movq_r64_r64    
  movq %r9, (%rsp)                  #  82    0xe32b0  4      OPC=movq_m64_r64    
  callq .re_acquire_state_context   #  83    0xe32b4  5      OPC=callq_label     
  movq (%rsp), %r9                  #  84    0xe32b9  4      OPC=movq_r64_m64    
  testq %r15, %r15                  #  85    0xe32bd  3      OPC=testq_r64_r64   
  movq %rax, %rbx                   #  86    0xe32c0  3      OPC=movq_r64_r64    
  movl 0xc(%rsp), %r8d              #  87    0xe32c3  5      OPC=movl_r32_m32    
  movq %rax, (%r9)                  #  88    0xe32c8  3      OPC=movq_m64_r64    
  je .L_e31e5                       #  89    0xe32cb  6      OPC=je_label_1      
  movq 0x18(%rsp), %rdi             #  90    0xe32d1  5      OPC=movq_r64_m64    
  movl %r8d, (%rsp)                 #  91    0xe32d6  4      OPC=movl_m32_r32    
  callq .L_1f8c0                    #  92    0xe32da  5      OPC=callq_label     
  movl (%rsp), %r8d                 #  93    0xe32df  4      OPC=movl_r32_m32    
  jmpq .L_e31e5                     #  94    0xe32e3  5      OPC=jmpq_label_1    
  nop                               #  95    0xe32e8  1      OPC=nop             
  nop                               #  96    0xe32e9  1      OPC=nop             
  nop                               #  97    0xe32ea  1      OPC=nop             
  nop                               #  98    0xe32eb  1      OPC=nop             
  nop                               #  99    0xe32ec  1      OPC=nop             
  nop                               #  100   0xe32ed  1      OPC=nop             
  nop                               #  101   0xe32ee  1      OPC=nop             
  nop                               #  102   0xe32ef  1      OPC=nop             
.L_e32f0:                           #        0xe32f0  0      OPC=<label>         
  xorl %ebx, %ebx                   #  103   0xe32f0  2      OPC=xorl_r32_r32    
  jmpq .L_e3220                     #  104   0xe32f2  5      OPC=jmpq_label_1    
  nop                               #  105   0xe32f7  1      OPC=nop             
  nop                               #  106   0xe32f8  1      OPC=nop             
  nop                               #  107   0xe32f9  1      OPC=nop             
  nop                               #  108   0xe32fa  1      OPC=nop             
  nop                               #  109   0xe32fb  1      OPC=nop             
  nop                               #  110   0xe32fc  1      OPC=nop             
  nop                               #  111   0xe32fd  1      OPC=nop             
  nop                               #  112   0xe32fe  1      OPC=nop             
  nop                               #  113   0xe32ff  1      OPC=nop             
.L_e3300:                           #        0xe3300  0      OPC=<label>         
  movq %r13, %rsi                   #  114   0xe3300  3      OPC=movq_r64_r64    
  movq %rbp, %rdi                   #  115   0xe3303  3      OPC=movq_r64_r64    
  callq .transit_state_bkref        #  116   0xe3306  5      OPC=callq_label     
  testl %eax, %eax                  #  117   0xe330b  2      OPC=testl_r32_r32   
  movl %eax, (%r14)                 #  118   0xe330d  3      OPC=movl_m32_r32    
  jne .L_e32f0                      #  119   0xe3310  2      OPC=jne_label       
  movq 0x88(%rbp), %rax             #  120   0xe3312  7      OPC=movq_r64_m64    
  movq (%rax,%r12,1), %rbx          #  121   0xe3319  4      OPC=movq_r64_m64    
  jmpq .L_e3220                     #  122   0xe331d  5      OPC=jmpq_label_1    
  nop                               #  123   0xe3322  1      OPC=nop             
  nop                               #  124   0xe3323  1      OPC=nop             
  nop                               #  125   0xe3324  1      OPC=nop             
  nop                               #  126   0xe3325  1      OPC=nop             
  nop                               #  127   0xe3326  1      OPC=nop             
  nop                               #  128   0xe3327  1      OPC=nop             
.L_e3328:                           #        0xe3328  0      OPC=<label>         
  movq %rdx, (%r15)                 #  129   0xe3328  3      OPC=movq_m64_r64    
  jmpq .L_e31e5                     #  130   0xe332b  5      OPC=jmpq_label_1    
.L_e3330:                           #        0xe3330  0      OPC=<label>         
  movq (%rdx), %rax                 #  131   0xe3330  3      OPC=movq_r64_m64    
  movq 0x8(%rdx), %rdx              #  132   0xe3333  4      OPC=movq_r64_m64    
  movq %rbp, %rdi                   #  133   0xe3337  3      OPC=movq_r64_r64    
  movl %r8d, (%rsp)                 #  134   0xe333a  4      OPC=movl_m32_r32    
  movq %rdx, 0x18(%rsp)             #  135   0xe333e  5      OPC=movq_m64_r64    
  movl 0x78(%rsi), %edx             #  136   0xe3343  3      OPC=movl_r32_m32    
  leal -0x1(%r8), %esi              #  137   0xe3346  4      OPC=leal_r32_m16    
  movq %rax, 0x10(%rsp)             #  138   0xe334a  5      OPC=movq_m64_r64    
  callq .re_string_context_at       #  139   0xe334f  5      OPC=callq_label     
  leaq 0x10(%rsp), %rdx             #  140   0xe3354  5      OPC=leaq_r64_m16    
  movl %eax, %ecx                   #  141   0xe3359  2      OPC=movl_r32_r32    
  movq %r13, %rsi                   #  142   0xe335b  3      OPC=movq_r64_r64    
  movq %r14, %rdi                   #  143   0xe335e  3      OPC=movq_r64_r64    
  callq .re_acquire_state_context   #  144   0xe3361  5      OPC=callq_label     
  movl (%rsp), %r8d                 #  145   0xe3366  4      OPC=movl_r32_m32    
  movq %rax, %rbx                   #  146   0xe336a  3      OPC=movq_r64_r64    
  movq %rax, (%r15)                 #  147   0xe336d  3      OPC=movq_m64_r64    
  jmpq .L_e31e5                     #  148   0xe3370  5      OPC=jmpq_label_1    
  nop                               #  149   0xe3375  1      OPC=nop             
  nop                               #  150   0xe3376  1      OPC=nop             
  nop                               #  151   0xe3377  1      OPC=nop             
  nop                               #  152   0xe3378  1      OPC=nop             
  nop                               #  153   0xe3379  1      OPC=nop             
  nop                               #  154   0xe337a  1      OPC=nop             
  nop                               #  155   0xe337b  1      OPC=nop             
  nop                               #  156   0xe337c  1      OPC=nop             
  nop                               #  157   0xe337d  1      OPC=nop             
  nop                               #  158   0xe337e  1      OPC=nop             
  nop                               #  159   0xe337f  1      OPC=nop             
                                                                                 
.size merge_state_with_log, .-merge_state_with_log

