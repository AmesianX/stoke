  .text
  .globl malloc_get_state
  .type malloc_get_state, @function

#! file-offset 0x82460
#! rip-offset  0x82460
#! capacity    544 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
.malloc_get_state:                  #        0x82460  0      OPC=<label>           
  pushq %rbx                        #  1     0x82460  1      OPC=pushq_r64_1       
  movl $0x8a8, %edi                 #  2     0x82461  5      OPC=movl_r32_imm32    
  callq .__libc_malloc              #  3     0x82466  5      OPC=callq_label       
  testq %rax, %rax                  #  4     0x8246b  3      OPC=testq_r64_r64     
  movq %rax, %rbx                   #  5     0x8246e  3      OPC=movq_r64_r64      
  je .L_82679                       #  6     0x82471  6      OPC=je_label_1        
  movl $0x1, %esi                   #  7     0x82477  5      OPC=movl_r32_imm32    
  xorl %eax, %eax                   #  8     0x8247c  2      OPC=xorl_r32_r32      
  cmpl $0x0, 0x34477b(%rip)         #  9     0x8247e  7      OPC=cmpl_m32_imm8     
  je .L_82493                       #  10    0x82485  2      OPC=je_label          
  lock                              #  11    0x82487  1      OPC=lock              
  cmpxchgl %esi, 0x33f7b1(%rip)     #  12    0x82488  7      OPC=cmpxchgl_m32_r32  
  nop                               #  13    0x8248f  1      OPC=nop               
  jne .L_8249c                      #  14    0x82490  2      OPC=jne_label         
  jmpq .L_824b6                     #  15    0x82492  2      OPC=jmpq_label        
.L_82493:                           #        0x82494  0      OPC=<label>           
  cmpxchgl %esi, 0x33f7a6(%rip)     #  16    0x82494  7      OPC=cmpxchgl_m32_r32  
  je .L_824b6                       #  17    0x8249b  2      OPC=je_label          
.L_8249c:                           #        0x8249d  0      OPC=<label>           
  leaq 0x33f79d(%rip), %rdi         #  18    0x8249d  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  19    0x824a4  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  20    0x824ab  5      OPC=callq_label       
  addq $0x80, %rsp                  #  21    0x824b0  7      OPC=addq_r64_imm32    
.L_824b6:                           #        0x824b7  0      OPC=<label>           
  leaq 0x33f783(%rip), %rdi         #  22    0x824b7  7      OPC=leaq_r64_m16      
  callq .malloc_consolidate         #  23    0x824be  5      OPC=callq_label       
  movq 0x33f7cf(%rip), %rax         #  24    0x824c3  7      OPC=movq_r64_m64      
  movq $0x444c4541, (%rbx)          #  25    0x824ca  7      OPC=movq_m64_imm32    
  leaq 0x33f7c1(%rip), %rdx         #  26    0x824d1  7      OPC=leaq_r64_m16      
  movq $0x4, 0x8(%rbx)              #  27    0x824d8  8      OPC=movq_m64_imm32    
  movq $0x0, 0x10(%rbx)             #  28    0x824e0  8      OPC=movq_m64_imm32    
  leaq 0x38(%rbx), %rcx             #  29    0x824e8  4      OPC=leaq_r64_m16      
  movq $0x0, 0x18(%rbx)             #  30    0x824ec  8      OPC=movq_m64_imm32    
  movq $0x0, 0x28(%rbx)             #  31    0x824f4  8      OPC=movq_m64_imm32    
  leaq 0x33ff86(%rip), %rdi         #  32    0x824fc  7      OPC=leaq_r64_m16      
  movq %rax, 0x20(%rbx)             #  33    0x82503  4      OPC=movq_m64_r64      
  jmpq .L_82529                     #  34    0x82507  2      OPC=jmpq_label        
  nop                               #  35    0x82509  1      OPC=nop               
  nop                               #  36    0x8250a  1      OPC=nop               
  nop                               #  37    0x8250b  1      OPC=nop               
  nop                               #  38    0x8250c  1      OPC=nop               
  nop                               #  39    0x8250d  1      OPC=nop               
  nop                               #  40    0x8250e  1      OPC=nop               
  nop                               #  41    0x8250f  1      OPC=nop               
  nop                               #  42    0x82510  1      OPC=nop               
.L_82510:                           #        0x82511  0      OPC=<label>           
  movq %rsi, -0x8(%rcx)             #  43    0x82511  4      OPC=movq_m64_r64      
  movq 0x18(%rdx), %rsi             #  44    0x82515  4      OPC=movq_r64_m64      
  addq $0x10, %rdx                  #  45    0x82519  4      OPC=addq_r64_imm8     
  addq $0x10, %rcx                  #  46    0x8251d  4      OPC=addq_r64_imm8     
  movq %rsi, -0x10(%rcx)            #  47    0x82521  4      OPC=movq_m64_r64      
  cmpq %rdi, %rdx                   #  48    0x82525  3      OPC=cmpq_r64_r64      
  je .L_82550                       #  49    0x82528  2      OPC=je_label          
.L_82529:                           #        0x8252a  0      OPC=<label>           
  movq 0x10(%rdx), %rsi             #  50    0x8252a  4      OPC=movq_r64_m64      
  cmpq %rdx, %rsi                   #  51    0x8252e  3      OPC=cmpq_r64_r64      
  jne .L_82510                      #  52    0x82531  2      OPC=jne_label         
  addq $0x10, %rdx                  #  53    0x82533  4      OPC=addq_r64_imm8     
  movq $0x0, (%rcx)                 #  54    0x82537  7      OPC=movq_m64_imm32    
  movq $0x0, -0x8(%rcx)             #  55    0x8253e  8      OPC=movq_m64_imm32    
  addq $0x10, %rcx                  #  56    0x82546  4      OPC=addq_r64_imm8     
  cmpq %rdi, %rdx                   #  57    0x8254a  3      OPC=cmpq_r64_r64      
  jne .L_82529                      #  58    0x8254d  2      OPC=jne_label         
  xchgw %ax, %ax                    #  59    0x8254f  2      OPC=xchgw_ax_r16      
.L_82550:                           #        0x82551  0      OPC=<label>           
  movq 0x33ecf9(%rip), %rax         #  60    0x82551  7      OPC=movq_r64_m64      
  movq %rax, 0x820(%rbx)            #  61    0x82558  7      OPC=movq_m64_r64      
  movq 0x33ff5b(%rip), %rax         #  62    0x8255f  7      OPC=movq_r64_m64      
  movl %eax, 0x828(%rbx)            #  63    0x82566  6      OPC=movl_m32_r32      
  movq 0x33ec8e(%rip), %rax         #  64    0x8256c  7      OPC=movq_r64_m64      
  movq %rax, 0x830(%rbx)            #  65    0x82573  7      OPC=movq_m64_r64      
  movq 0x33ec88(%rip), %rax         #  66    0x8257a  7      OPC=movq_r64_m64      
  movq %rax, 0x838(%rbx)            #  67    0x82581  7      OPC=movq_m64_r64      
  movl 0x33ec9f(%rip), %eax         #  68    0x82588  6      OPC=movl_r32_m32      
  movl %eax, 0x840(%rbx)            #  69    0x8258e  6      OPC=movl_m32_r32      
  movq 0x33ec76(%rip), %rax         #  70    0x82594  7      OPC=movq_r64_m64      
  movq %rax, 0x848(%rbx)            #  71    0x8259b  7      OPC=movq_m64_r64      
  movl 0x33ec29(%rip), %eax         #  72    0x825a2  6      OPC=movl_r32_m32      
  movl %eax, 0x850(%rbx)            #  73    0x825a8  6      OPC=movl_m32_r32      
  movq 0x33ff14(%rip), %rax         #  74    0x825ae  7      OPC=movq_r64_m64      
  movq $0x0, 0x860(%rbx)            #  75    0x825b5  11     OPC=movq_m64_imm32    
  movq %rax, 0x858(%rbx)            #  76    0x825c0  7      OPC=movq_m64_r64      
  movl 0x33ec5c(%rip), %eax         #  77    0x825c7  6      OPC=movl_r32_m32      
  movl %eax, 0x868(%rbx)            #  78    0x825cd  6      OPC=movl_m32_r32      
  movl 0x33ec58(%rip), %eax         #  79    0x825d3  6      OPC=movl_r32_m32      
  movl %eax, 0x86c(%rbx)            #  80    0x825d9  6      OPC=movl_m32_r32      
  movq 0x33ec53(%rip), %rax         #  81    0x825df  7      OPC=movq_r64_m64      
  movq %rax, 0x870(%rbx)            #  82    0x825e6  7      OPC=movq_m64_r64      
  movq 0x33ec4d(%rip), %rax         #  83    0x825ed  7      OPC=movq_r64_m64      
  movq %rax, 0x878(%rbx)            #  84    0x825f4  7      OPC=movq_m64_r64      
  movl 0x34140c(%rip), %eax         #  85    0x825fb  6      OPC=movl_r32_m32      
  movl %eax, 0x880(%rbx)            #  86    0x82601  6      OPC=movl_m32_r32      
  movq 0x34147b(%rip), %rax         #  87    0x82607  7      OPC=movq_r64_m64      
  movq %rax, 0x888(%rbx)            #  88    0x8260e  7      OPC=movq_m64_r64      
  movq 0x33ebfd(%rip), %rax         #  89    0x82615  7      OPC=movq_r64_m64      
  movq %rax, 0x890(%rbx)            #  90    0x8261c  7      OPC=movq_m64_r64      
  movq 0x33ebf7(%rip), %rax         #  91    0x82623  7      OPC=movq_r64_m64      
  movq %rax, 0x898(%rbx)            #  92    0x8262a  7      OPC=movq_m64_r64      
  movq 0x33eb91(%rip), %rax         #  93    0x82631  7      OPC=movq_r64_m64      
  movq %rax, 0x8a0(%rbx)            #  94    0x82638  7      OPC=movq_m64_r64      
  cmpl $0x0, 0x3445bb(%rip)         #  95    0x8263f  7      OPC=cmpl_m32_imm8     
  je .L_82652                       #  96    0x82646  2      OPC=je_label          
  lock                              #  97    0x82648  1      OPC=lock              
  decl 0x33f5f2(%rip)               #  98    0x82649  6      OPC=decl_m32          
  nop                               #  99    0x8264f  1      OPC=nop               
  jne .L_8265a                      #  100   0x82650  2      OPC=jne_label         
  jmpq .L_82674                     #  101   0x82652  2      OPC=jmpq_label        
.L_82652:                           #        0x82654  0      OPC=<label>           
  decl 0x33f5e8(%rip)               #  102   0x82654  6      OPC=decl_m32          
  je .L_82674                       #  103   0x8265a  2      OPC=je_label          
.L_8265a:                           #        0x8265c  0      OPC=<label>           
  leaq 0x33f5df(%rip), %rdi         #  104   0x8265c  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  105   0x82663  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  106   0x8266a  5      OPC=callq_label       
  addq $0x80, %rsp                  #  107   0x8266f  7      OPC=addq_r64_imm32    
.L_82674:                           #        0x82676  0      OPC=<label>           
  movq %rbx, %rax                   #  108   0x82676  3      OPC=movq_r64_r64      
  popq %rbx                         #  109   0x82679  1      OPC=popq_r64_1        
  retq                              #  110   0x8267a  1      OPC=retq              
.L_82679:                           #        0x8267b  0      OPC=<label>           
  xorl %eax, %eax                   #  111   0x8267b  2      OPC=xorl_r32_r32      
  popq %rbx                         #  112   0x8267d  1      OPC=popq_r64_1        
  retq                              #  113   0x8267e  1      OPC=retq              
  nop                               #  114   0x8267f  1      OPC=nop               
  nop                               #  115   0x82680  1      OPC=nop               
  nop                               #  116   0x82681  1      OPC=nop               
                                                                                   
.size malloc_get_state, .-malloc_get_state

