  .text
  .globl __netlink_assert_response
  .type __netlink_assert_response, @function

#! file-offset 0x123310
#! rip-offset  0x123310
#! capacity    368 bytes

# Text                       #  Line  RIP       Bytes  Opcode              
.__netlink_assert_response:  #        0x123310  0      OPC=<label>         
  pushq %r14                 #  1     0x123310  2      OPC=pushq_r64_1     
  pushq %r13                 #  2     0x123312  2      OPC=pushq_r64_1     
  pushq %r12                 #  3     0x123314  2      OPC=pushq_r64_1     
  pushq %rbp                 #  4     0x123316  1      OPC=pushq_r64_1     
  movq %rsi, %r12            #  5     0x123317  3      OPC=movq_r64_r64    
  pushq %rbx                 #  6     0x12331a  1      OPC=pushq_r64_1     
  movl %edi, %ebx            #  7     0x12331b  2      OPC=movl_r32_r32    
  subq $0xe0, %rsp           #  8     0x12331d  7      OPC=subq_r64_imm32  
  testq %rsi, %rsi           #  9     0x123324  3      OPC=testq_r64_r64   
  js .L_123348               #  10    0x123327  2      OPC=js_label        
  cmpq $0xf, %rsi            #  11    0x123329  4      OPC=cmpq_r64_imm8   
  jle .L_12340f              #  12    0x12332d  6      OPC=jle_label_1     
.L_123333:                   #        0x123333  0      OPC=<label>         
  addq $0xe0, %rsp           #  13    0x123333  7      OPC=addq_r64_imm32  
  popq %rbx                  #  14    0x12333a  1      OPC=popq_r64_1      
  popq %rbp                  #  15    0x12333b  1      OPC=popq_r64_1      
  popq %r12                  #  16    0x12333c  2      OPC=popq_r64_1      
  popq %r13                  #  17    0x12333e  2      OPC=popq_r64_1      
  popq %r14                  #  18    0x123340  2      OPC=popq_r64_1      
  retq                       #  19    0x123342  1      OPC=retq            
  nop                        #  20    0x123343  1      OPC=nop             
  nop                        #  21    0x123344  1      OPC=nop             
  nop                        #  22    0x123345  1      OPC=nop             
  nop                        #  23    0x123346  1      OPC=nop             
  nop                        #  24    0x123347  1      OPC=nop             
.L_123348:                   #        0x123348  0      OPC=<label>         
  movq 0x29db31(%rip), %r12  #  25    0x123348  7      OPC=movq_r64_m64    
  leaq 0x10(%rsp), %rbp      #  26    0x12334f  5      OPC=leaq_r64_m16    
  leaq 0xc(%rsp), %rdx       #  27    0x123354  5      OPC=leaq_r64_m16    
  movl $0x80, 0xc(%rsp)      #  28    0x123359  8      OPC=movl_m32_imm32  
  movq %rbp, %rsi            #  29    0x123361  3      OPC=movq_r64_r64    
  movl (%r12), %r13d         #  30    0x123364  4      OPC=movl_r32_m32    
  nop                        #  31    0x123368  1      OPC=nop             
  callq .getsockname         #  32    0x123369  5      OPC=callq_label     
  testl %eax, %eax           #  33    0x12336e  2      OPC=testl_r32_r32   
  js .L_1233cf               #  34    0x123370  2      OPC=js_label        
  movzwl 0x10(%rsp), %r14d   #  35    0x123372  6      OPC=movzwl_r32_m16  
  cmpl $0x10, %r14d          #  36    0x123378  4      OPC=cmpl_r32_imm8   
  je .L_1233a8               #  37    0x12337c  2      OPC=je_label        
.L_12337e:                   #        0x12337e  0      OPC=<label>         
  leaq 0x6d243(%rip), %rdx   #  38    0x12337e  7      OPC=leaq_r64_m16    
  movl %r14d, %r9d           #  39    0x123385  3      OPC=movl_r32_r32    
  movl %ebx, %r8d            #  40    0x123388  3      OPC=movl_r32_r32    
  movl %r13d, %ecx           #  41    0x12338b  3      OPC=movl_r32_r32    
  movl $0xc8, %esi           #  42    0x12338e  5      OPC=movl_r32_imm32  
  movq %rbp, %rdi            #  43    0x123393  3      OPC=movq_r64_r64    
  xorl %eax, %eax            #  44    0x123396  2      OPC=xorl_r32_r32    
  callq .snprintf            #  45    0x123398  5      OPC=callq_label     
.L_12339d:                   #        0x12339d  0      OPC=<label>         
  movq %rbp, %rdi            #  46    0x12339d  3      OPC=movq_r64_r64    
  callq .__libc_fatal        #  47    0x1233a0  5      OPC=callq_label     
  nop                        #  48    0x1233a5  1      OPC=nop             
  nop                        #  49    0x1233a6  1      OPC=nop             
  nop                        #  50    0x1233a7  1      OPC=nop             
.L_1233a8:                   #        0x1233a8  0      OPC=<label>         
  cmpl $0x9, %r13d           #  51    0x1233a8  4      OPC=cmpl_r32_imm8   
  je .L_12337e               #  52    0x1233ac  2      OPC=je_label        
  movl %r13d, %eax           #  53    0x1233ae  3      OPC=movl_r32_r32    
  andl $0xfffffffb, %eax     #  54    0x1233b1  6      OPC=andl_r32_imm32  
  nop                        #  55    0x1233b7  1      OPC=nop             
  nop                        #  56    0x1233b8  1      OPC=nop             
  nop                        #  57    0x1233b9  1      OPC=nop             
  cmpl $0x6b, %eax           #  58    0x1233ba  3      OPC=cmpl_r32_imm8   
  je .L_12337e               #  59    0x1233bd  2      OPC=je_label        
  cmpl $0x58, %r13d          #  60    0x1233bf  4      OPC=cmpl_r32_imm8   
  je .L_12337e               #  61    0x1233c3  2      OPC=je_label        
  cmpl $0xb, %r13d           #  62    0x1233c5  4      OPC=cmpl_r32_imm8   
  je .L_1233ed               #  63    0x1233c9  2      OPC=je_label        
.L_1233c5:                   #        0x1233cb  0      OPC=<label>         
  movl %r13d, (%r12)         #  64    0x1233cb  4      OPC=movl_m32_r32    
  nop                        #  65    0x1233cf  1      OPC=nop             
  jmpq .L_123333             #  66    0x1233d0  5      OPC=jmpq_label_1    
.L_1233cf:                   #        0x1233d5  0      OPC=<label>         
  leaq 0x6d28a(%rip), %rdx   #  67    0x1233d5  7      OPC=leaq_r64_m16    
  movl %ebx, %r8d            #  68    0x1233dc  3      OPC=movl_r32_r32    
  movl %r13d, %ecx           #  69    0x1233df  3      OPC=movl_r32_r32    
  movl $0xc8, %esi           #  70    0x1233e2  5      OPC=movl_r32_imm32  
  movq %rbp, %rdi            #  71    0x1233e7  3      OPC=movq_r64_r64    
  xorl %eax, %eax            #  72    0x1233ea  2      OPC=xorl_r32_r32    
  callq .snprintf            #  73    0x1233ec  5      OPC=callq_label     
  jmpq .L_12339d             #  74    0x1233f1  2      OPC=jmpq_label      
.L_1233ed:                   #        0x1233f3  0      OPC=<label>         
  xorl %edx, %edx            #  75    0x1233f3  2      OPC=xorl_r32_r32    
  xorl %eax, %eax            #  76    0x1233f5  2      OPC=xorl_r32_r32    
  movl $0x3, %esi            #  77    0x1233f7  5      OPC=movl_r32_imm32  
  movl %ebx, %edi            #  78    0x1233fc  2      OPC=movl_r32_r32    
  callq .__fcntl             #  79    0x1233fe  5      OPC=callq_label     
  testl %eax, %eax           #  80    0x123403  2      OPC=testl_r32_r32   
  js .L_12337e               #  81    0x123405  6      OPC=js_label_1      
  testb $0x8, %ah            #  82    0x12340b  3      OPC=testb_rh_imm8   
  je .L_1233c5               #  83    0x12340e  2      OPC=je_label        
  jmpq .L_12337e             #  84    0x123410  5      OPC=jmpq_label_1    
.L_12340f:                   #        0x123415  0      OPC=<label>         
  leaq 0x10(%rsp), %rbp      #  85    0x123415  5      OPC=leaq_r64_m16    
  leaq 0xc(%rsp), %rdx       #  86    0x12341a  5      OPC=leaq_r64_m16    
  movl $0x80, 0xc(%rsp)      #  87    0x12341f  8      OPC=movl_m32_imm32  
  movq %rbp, %rsi            #  88    0x123427  3      OPC=movq_r64_r64    
  callq .getsockname         #  89    0x12342a  5      OPC=callq_label     
  testl %eax, %eax           #  90    0x12342f  2      OPC=testl_r32_r32   
  js .L_123454               #  91    0x123431  2      OPC=js_label        
  movzwl 0x10(%rsp), %r9d    #  92    0x123433  6      OPC=movzwl_r32_m16  
  leaq 0x6d1d6(%rip), %rdx   #  93    0x123439  7      OPC=leaq_r64_m16    
  movl %ebx, %r8d            #  94    0x123440  3      OPC=movl_r32_r32    
  movq %r12, %rcx            #  95    0x123443  3      OPC=movq_r64_r64    
  movl $0xc8, %esi           #  96    0x123446  5      OPC=movl_r32_imm32  
  movq %rbp, %rdi            #  97    0x12344b  3      OPC=movq_r64_r64    
  xorl %eax, %eax            #  98    0x12344e  2      OPC=xorl_r32_r32    
  callq .snprintf            #  99    0x123450  5      OPC=callq_label     
  jmpq .L_12339d             #  100   0x123455  5      OPC=jmpq_label_1    
.L_123454:                   #        0x12345a  0      OPC=<label>         
  leaq 0x6d235(%rip), %rdx   #  101   0x12345a  7      OPC=leaq_r64_m16    
  movl %ebx, %r8d            #  102   0x123461  3      OPC=movl_r32_r32    
  movq %r12, %rcx            #  103   0x123464  3      OPC=movq_r64_r64    
  movl $0xc8, %esi           #  104   0x123467  5      OPC=movl_r32_imm32  
  movq %rbp, %rdi            #  105   0x12346c  3      OPC=movq_r64_r64    
  xorl %eax, %eax            #  106   0x12346f  2      OPC=xorl_r32_r32    
  callq .snprintf            #  107   0x123471  5      OPC=callq_label     
  jmpq .L_12339d             #  108   0x123476  5      OPC=jmpq_label_1    
  nop                        #  109   0x12347b  1      OPC=nop             
  nop                        #  110   0x12347c  1      OPC=nop             
  nop                        #  111   0x12347d  1      OPC=nop             
  nop                        #  112   0x12347e  1      OPC=nop             
  nop                        #  113   0x12347f  1      OPC=nop             
  nop                        #  114   0x123480  1      OPC=nop             
  nop                        #  115   0x123481  1      OPC=nop             
  nop                        #  116   0x123482  1      OPC=nop             
  nop                        #  117   0x123483  1      OPC=nop             
  nop                        #  118   0x123484  1      OPC=nop             
  nop                        #  119   0x123485  1      OPC=nop             
                                                                           
.size __netlink_assert_response, .-__netlink_assert_response

