  .text
  .globl malloc_stats
  .type malloc_stats, @function

#! file-offset 0x85160
#! rip-offset  0x85160
#! capacity    480 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
.malloc_stats:                      #        0x85160  0      OPC=<label>           
  pushq %r15                        #  1     0x85160  2      OPC=pushq_r64_1       
  pushq %r14                        #  2     0x85162  2      OPC=pushq_r64_1       
  pushq %r13                        #  3     0x85164  2      OPC=pushq_r64_1       
  pushq %r12                        #  4     0x85166  2      OPC=pushq_r64_1       
  pushq %rbp                        #  5     0x85168  1      OPC=pushq_r64_1       
  pushq %rbx                        #  6     0x85169  1      OPC=pushq_r64_1       
  subq $0x48, %rsp                  #  7     0x8516a  4      OPC=subq_r64_imm8     
  movl 0x33c050(%rip), %eax         #  8     0x8516e  6      OPC=movl_r32_m32      
  movq 0x33c0bd(%rip), %r12         #  9     0x85174  7      OPC=movq_r64_m64      
  testl %eax, %eax                  #  10    0x8517b  2      OPC=testl_r32_r32     
  movl %r12d, %r13d                 #  11    0x8517d  3      OPC=movl_r32_r32      
  js .L_85330                       #  12    0x85180  6      OPC=js_label_1        
.L_85186:                           #        0x85186  0      OPC=<label>           
  movq 0x33bc33(%rip), %rbx         #  13    0x85186  7      OPC=movq_r64_m64      
  leaq 0x33caac(%rip), %r14         #  14    0x8518d  7      OPC=leaq_r64_m16      
  xorl %ebp, %ebp                   #  15    0x85194  2      OPC=xorl_r32_r32      
  leaq 0x10(%rsp), %r15             #  16    0x85196  5      OPC=leaq_r64_m16      
  movq (%rbx), %rax                 #  17    0x8519b  3      OPC=movq_r64_m64      
  movl 0x74(%rax), %ecx             #  18    0x8519e  3      OPC=movl_r32_m32      
  movl %ecx, %edx                   #  19    0x851a1  2      OPC=movl_r32_r32      
  movl %ecx, 0xc(%rsp)              #  20    0x851a3  4      OPC=movl_m32_r32      
  orl $0x2, %edx                    #  21    0x851a7  3      OPC=orl_r32_imm8      
  movl %edx, 0x74(%rax)             #  22    0x851aa  3      OPC=movl_m32_r32      
  jmpq .L_851b3                     #  23    0x851ad  2      OPC=jmpq_label        
  nop                               #  24    0x851af  1      OPC=nop               
.L_851b0:                           #        0x851b0  0      OPC=<label>           
  addl $0x1, %ebp                   #  25    0x851b0  3      OPC=addl_r32_imm8     
.L_851b3:                           #        0x851b3  0      OPC=<label>           
  movq $0x0, (%r15)                 #  26    0x851b3  7      OPC=movq_m64_imm32    
  movq $0x0, 0x8(%r15)              #  27    0x851ba  8      OPC=movq_m64_imm32    
  movl $0x1, %esi                   #  28    0x851c2  5      OPC=movl_r32_imm32    
  movq $0x0, 0x10(%r15)             #  29    0x851c7  8      OPC=movq_m64_imm32    
  movq $0x0, 0x18(%r15)             #  30    0x851cf  8      OPC=movq_m64_imm32    
  xorl %eax, %eax                   #  31    0x851d7  2      OPC=xorl_r32_r32      
  movq $0x0, 0x20(%r15)             #  32    0x851d9  8      OPC=movq_m64_imm32    
  cmpl $0x0, 0x341a18(%rip)         #  33    0x851e1  7      OPC=cmpl_m32_imm8     
  je .L_851f3                       #  34    0x851e8  2      OPC=je_label          
  lock                              #  35    0x851ea  1      OPC=lock              
  cmpxchgl %esi, (%r14)             #  36    0x851eb  4      OPC=cmpxchgl_m32_r32  
  nop                               #  37    0x851ef  1      OPC=nop               
  jne .L_851f9                      #  38    0x851f0  2      OPC=jne_label         
  jmpq .L_8520f                     #  39    0x851f2  2      OPC=jmpq_label        
.L_851f3:                           #        0x851f4  0      OPC=<label>           
  cmpxchgl %esi, (%r14)             #  40    0x851f4  4      OPC=cmpxchgl_m32_r32  
  je .L_8520f                       #  41    0x851f8  2      OPC=je_label          
.L_851f9:                           #        0x851fa  0      OPC=<label>           
  leaq (%r14), %rdi                 #  42    0x851fa  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  43    0x851fd  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  44    0x85204  5      OPC=callq_label       
  addq $0x80, %rsp                  #  45    0x85209  7      OPC=addq_r64_imm32    
.L_8520f:                           #        0x85210  0      OPC=<label>           
  movq %r15, %rsi                   #  46    0x85210  3      OPC=movq_r64_r64      
  movq %r14, %rdi                   #  47    0x85213  3      OPC=movq_r64_r64      
  callq .int_mallinfo               #  48    0x85216  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  49    0x8521b  3      OPC=movq_r64_m64      
  leaq 0x10662e(%rip), %rsi         #  50    0x8521e  7      OPC=leaq_r64_m16      
  movl %ebp, %edx                   #  51    0x85225  2      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  52    0x85227  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  53    0x85229  5      OPC=callq_label       
  movl 0x10(%rsp), %edx             #  54    0x8522e  4      OPC=movl_r32_m32      
  movq (%rbx), %rdi                 #  55    0x85232  3      OPC=movq_r64_m64      
  leaq 0x106622(%rip), %rsi         #  56    0x85235  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  57    0x8523c  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  58    0x8523e  5      OPC=callq_label       
  movl 0x2c(%rsp), %edx             #  59    0x85243  4      OPC=movl_r32_m32      
  movq (%rbx), %rdi                 #  60    0x85247  3      OPC=movq_r64_m64      
  leaq 0x106626(%rip), %rsi         #  61    0x8524a  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  62    0x85251  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  63    0x85253  5      OPC=callq_label       
  addl 0x10(%rsp), %r12d            #  64    0x85258  5      OPC=addl_r32_m32      
  addl 0x2c(%rsp), %r13d            #  65    0x8525d  5      OPC=addl_r32_m32      
  cmpl $0x0, 0x341998(%rip)         #  66    0x85262  7      OPC=cmpl_m32_imm8     
  je .L_85272                       #  67    0x85269  2      OPC=je_label          
  lock                              #  68    0x8526b  1      OPC=lock              
  decl (%r14)                       #  69    0x8526c  3      OPC=decl_m32          
  nop                               #  70    0x8526f  1      OPC=nop               
  jne .L_85277                      #  71    0x85270  2      OPC=jne_label         
  jmpq .L_8528d                     #  72    0x85272  2      OPC=jmpq_label        
.L_85272:                           #        0x85274  0      OPC=<label>           
  decl (%r14)                       #  73    0x85274  3      OPC=decl_m32          
  je .L_8528d                       #  74    0x85277  2      OPC=je_label          
.L_85277:                           #        0x85279  0      OPC=<label>           
  leaq (%r14), %rdi                 #  75    0x85279  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  76    0x8527c  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  77    0x85283  5      OPC=callq_label       
  addq $0x80, %rsp                  #  78    0x85288  7      OPC=addq_r64_imm32    
.L_8528d:                           #        0x8528f  0      OPC=<label>           
  movq 0x868(%r14), %r14            #  79    0x8528f  7      OPC=movq_r64_m64      
  leaq 0x33c9a5(%rip), %rax         #  80    0x85296  7      OPC=leaq_r64_m16      
  cmpq %rax, %r14                   #  81    0x8529d  3      OPC=cmpq_r64_r64      
  jne .L_851b0                      #  82    0x852a0  6      OPC=jne_label_1       
  movq (%rbx), %rcx                 #  83    0x852a6  3      OPC=movq_r64_m64      
  leaq 0x1065e1(%rip), %rdi         #  84    0x852a9  7      OPC=leaq_r64_m16      
  movl $0x14, %edx                  #  85    0x852b0  5      OPC=movl_r32_imm32    
  movl $0x1, %esi                   #  86    0x852b5  5      OPC=movl_r32_imm32    
  callq ._IO_fwrite                 #  87    0x852ba  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  88    0x852bf  3      OPC=movq_r64_m64      
  leaq 0x106596(%rip), %rsi         #  89    0x852c2  7      OPC=leaq_r64_m16      
  movl %r12d, %edx                  #  90    0x852c9  3      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  91    0x852cc  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  92    0x852ce  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  93    0x852d3  3      OPC=movq_r64_m64      
  leaq 0x10659b(%rip), %rsi         #  94    0x852d6  7      OPC=leaq_r64_m16      
  movl %r13d, %edx                  #  95    0x852dd  3      OPC=movl_r32_r32      
  xorl %eax, %eax                   #  96    0x852e0  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  97    0x852e2  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  98    0x852e7  3      OPC=movq_r64_m64      
  movl 0x33bf42(%rip), %edx         #  99    0x852ea  6      OPC=movl_r32_m32      
  leaq 0x1065af(%rip), %rsi         #  100   0x852f0  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  101   0x852f7  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  102   0x852f9  5      OPC=callq_label       
  movq (%rbx), %rdi                 #  103   0x852fe  3      OPC=movq_r64_m64      
  movq 0x33bf3a(%rip), %rdx         #  104   0x85301  7      OPC=movq_r64_m64      
  leaq 0x1065b0(%rip), %rsi         #  105   0x85308  7      OPC=leaq_r64_m16      
  xorl %eax, %eax                   #  106   0x8530f  2      OPC=xorl_r32_r32      
  callq .fprintf                    #  107   0x85311  5      OPC=callq_label       
  movq (%rbx), %rax                 #  108   0x85316  3      OPC=movq_r64_m64      
  movl 0xc(%rsp), %ecx              #  109   0x85319  4      OPC=movl_r32_m32      
  orl %ecx, 0x74(%rax)              #  110   0x8531d  3      OPC=orl_m32_r32       
  addq $0x48, %rsp                  #  111   0x85320  4      OPC=addq_r64_imm8     
  popq %rbx                         #  112   0x85324  1      OPC=popq_r64_1        
  popq %rbp                         #  113   0x85325  1      OPC=popq_r64_1        
  popq %r12                         #  114   0x85326  2      OPC=popq_r64_1        
  popq %r13                         #  115   0x85328  2      OPC=popq_r64_1        
  popq %r14                         #  116   0x8532a  2      OPC=popq_r64_1        
  popq %r15                         #  117   0x8532c  2      OPC=popq_r64_1        
  retq                              #  118   0x8532e  1      OPC=retq              
  nop                               #  119   0x8532f  1      OPC=nop               
  nop                               #  120   0x85330  1      OPC=nop               
  nop                               #  121   0x85331  1      OPC=nop               
.L_85330:                           #        0x85332  0      OPC=<label>           
  callq .ptmalloc_init_part_7       #  122   0x85332  5      OPC=callq_label       
  jmpq .L_85186                     #  123   0x85337  5      OPC=jmpq_label_1      
  nop                               #  124   0x8533c  1      OPC=nop               
  nop                               #  125   0x8533d  1      OPC=nop               
  nop                               #  126   0x8533e  1      OPC=nop               
  nop                               #  127   0x8533f  1      OPC=nop               
  nop                               #  128   0x85340  1      OPC=nop               
  nop                               #  129   0x85341  1      OPC=nop               
                                                                                   
.size malloc_stats, .-malloc_stats

