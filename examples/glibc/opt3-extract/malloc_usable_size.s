  .text
  .globl malloc_usable_size
  .type malloc_usable_size, @function

#! file-offset 0x831f0
#! rip-offset  0x831f0
#! capacity    480 bytes

# Text                             #  Line  RIP      Bytes  Opcode               
.malloc_usable_size:               #        0x831f0  0      OPC=<label>          
  pushq %r13                       #  1     0x831f0  2      OPC=pushq_r64_1      
  pushq %r12                       #  2     0x831f2  2      OPC=pushq_r64_1      
  pushq %rbp                       #  3     0x831f4  1      OPC=pushq_r64_1      
  pushq %rbx                       #  4     0x831f5  1      OPC=pushq_r64_1      
  subq $0x28, %rsp                 #  5     0x831f6  4      OPC=subq_r64_imm8    
  testq %rdi, %rdi                 #  6     0x831fa  3      OPC=testq_r64_r64    
  je .L_83260                      #  7     0x831fd  2      OPC=je_label         
  cmpl $0x1, 0x340806(%rip)        #  8     0x831ff  7      OPC=cmpl_m32_imm8    
  leaq -0x10(%rdi), %rcx           #  9     0x83206  4      OPC=leaq_r64_m16     
  je .L_83270                      #  10    0x8320a  2      OPC=je_label         
  movq -0x8(%rdi), %rax            #  11    0x8320c  4      OPC=movq_r64_m64     
  testb $0x2, %al                  #  12    0x83210  2      OPC=testb_al_imm8    
  jne .L_83230                     #  13    0x83212  2      OPC=jne_label        
  andq $0xf8, %rax                 #  14    0x83214  4      OPC=andq_r64_imm8    
  testb $0x1, -0x8(%rdi,%rax,1)    #  15    0x83218  5      OPC=testb_m8_imm8    
  je .L_83260                      #  16    0x8321d  2      OPC=je_label         
  subq $0x8, %rax                  #  17    0x8321f  4      OPC=subq_r64_imm8    
.L_83223:                          #        0x83223  0      OPC=<label>          
  addq $0x28, %rsp                 #  18    0x83223  4      OPC=addq_r64_imm8    
  popq %rbx                        #  19    0x83227  1      OPC=popq_r64_1       
  popq %rbp                        #  20    0x83228  1      OPC=popq_r64_1       
  popq %r12                        #  21    0x83229  2      OPC=popq_r64_1       
  popq %r13                        #  22    0x8322b  2      OPC=popq_r64_1       
  retq                             #  23    0x8322d  1      OPC=retq             
  xchgw %ax, %ax                   #  24    0x8322e  2      OPC=xchgw_ax_r16     
.L_83230:                          #        0x83230  0      OPC=<label>          
  andq $0xf8, %rax                 #  25    0x83230  4      OPC=andq_r64_imm8    
.L_83234:                          #        0x83234  0      OPC=<label>          
  addq $0x28, %rsp                 #  26    0x83234  4      OPC=addq_r64_imm8    
  subq $0x10, %rax                 #  27    0x83238  4      OPC=subq_r64_imm8    
  popq %rbx                        #  28    0x8323c  1      OPC=popq_r64_1       
  popq %rbp                        #  29    0x8323d  1      OPC=popq_r64_1       
  popq %r12                        #  30    0x8323e  2      OPC=popq_r64_1       
  popq %r13                        #  31    0x83240  2      OPC=popq_r64_1       
  retq                             #  32    0x83242  1      OPC=retq             
.L_83243:                          #        0x83243  0      OPC=<label>          
  andl $0x2, %ebx                  #  33    0x83243  3      OPC=andl_r32_imm8    
  leaq 0x10bfe3(%rip), %rdx        #  34    0x83246  7      OPC=leaq_r64_m16     
  leaq 0x10a0fb(%rip), %rsi        #  35    0x8324d  7      OPC=leaq_r64_m16     
  movl %ebx, %edi                  #  36    0x83254  2      OPC=movl_r32_r32     
  xorl %eax, %eax                  #  37    0x83256  2      OPC=xorl_r32_r32     
  callq .__libc_message            #  38    0x83258  5      OPC=callq_label      
  nop                              #  39    0x8325d  1      OPC=nop              
  nop                              #  40    0x8325e  1      OPC=nop              
  nop                              #  41    0x8325f  1      OPC=nop              
.L_83260:                          #        0x83260  0      OPC=<label>          
  addq $0x28, %rsp                 #  42    0x83260  4      OPC=addq_r64_imm8    
  xorl %eax, %eax                  #  43    0x83264  2      OPC=xorl_r32_r32     
  popq %rbx                        #  44    0x83266  1      OPC=popq_r64_1       
  popq %rbp                        #  45    0x83267  1      OPC=popq_r64_1       
  popq %r12                        #  46    0x83268  2      OPC=popq_r64_1       
  popq %r13                        #  47    0x8326a  2      OPC=popq_r64_1       
  retq                             #  48    0x8326c  1      OPC=retq             
  nop                              #  49    0x8326d  1      OPC=nop              
  nop                              #  50    0x8326e  1      OPC=nop              
  nop                              #  51    0x8326f  1      OPC=nop              
.L_83270:                          #        0x83270  0      OPC=<label>          
  movq -0x8(%rdi), %r9             #  52    0x83270  4      OPC=movq_r64_m64     
  movq %rcx, %r8                   #  53    0x83274  3      OPC=movq_r64_r64     
  movq %rcx, %rax                  #  54    0x83277  3      OPC=movq_r64_r64     
  shrq $0x3, %rax                  #  55    0x8327a  4      OPC=shrq_r64_imm8    
  shrq $0xb, %r8                   #  56    0x8327e  4      OPC=shrq_r64_imm8    
  xorl %eax, %r8d                  #  57    0x83282  3      OPC=xorl_r32_r32     
  movl $0x2, %eax                  #  58    0x83285  5      OPC=movl_r32_imm32   
  cmpb $0x1, %r8b                  #  59    0x8328a  4      OPC=cmpb_r8_imm8     
  movq %r9, %r10                   #  60    0x8328e  3      OPC=movq_r64_r64     
  movq %r9, %rdx                   #  61    0x83291  3      OPC=movq_r64_r64     
  cmovel %eax, %r8d                #  62    0x83294  4      OPC=cmovel_r32_r32   
  andl $0x2, %r10d                 #  63    0x83298  4      OPC=andl_r32_imm8    
  andq $0xf8, %rdx                 #  64    0x8329c  4      OPC=andq_r64_imm8    
  cmpq $0x1, %r10                  #  65    0x832a0  4      OPC=cmpq_r64_imm8    
  sbbq %rax, %rax                  #  66    0x832a4  3      OPC=sbbq_r64_r64     
  andl $0x8, %eax                  #  67    0x832a7  3      OPC=andl_r32_imm8    
  leaq -0x1(%rdx,%rax,1), %rax     #  68    0x832aa  5      OPC=leaq_r64_m16     
  movzbl -0x10(%rdi,%rax,1), %edx  #  69    0x832af  5      OPC=movzbl_r32_m8    
  cmpb %r8b, %dl                   #  70    0x832b4  3      OPC=cmpb_r8_r8       
  je .L_83234                      #  71    0x832b7  6      OPC=je_label_1       
  testb %dl, %dl                   #  72    0x832bd  2      OPC=testb_r8_r8      
  je .L_832ed                      #  73    0x832bf  2      OPC=je_label         
  leaq 0x10(%rdx), %rsi            #  74    0x832c1  4      OPC=leaq_r64_m16     
  cmpq %rsi, %rax                  #  75    0x832c5  3      OPC=cmpq_r64_r64     
  jae .L_832d9                     #  76    0x832c8  2      OPC=jae_label        
  jmpq .L_832ed                    #  77    0x832ca  2      OPC=jmpq_label       
  nop                              #  78    0x832cc  1      OPC=nop              
  nop                              #  79    0x832cd  1      OPC=nop              
  nop                              #  80    0x832ce  1      OPC=nop              
  nop                              #  81    0x832cf  1      OPC=nop              
.L_832d0:                          #        0x832d0  0      OPC=<label>          
  leaq 0x10(%rdx), %rsi            #  82    0x832d0  4      OPC=leaq_r64_m16     
  cmpq %rax, %rsi                  #  83    0x832d4  3      OPC=cmpq_r64_r64     
  ja .L_832ed                      #  84    0x832d7  2      OPC=ja_label         
.L_832d9:                          #        0x832d9  0      OPC=<label>          
  subq %rdx, %rax                  #  85    0x832d9  3      OPC=subq_r64_r64     
  movzbl (%rcx,%rax,1), %edx       #  86    0x832dc  4      OPC=movzbl_r32_m8    
  cmpb %r8b, %dl                   #  87    0x832e0  3      OPC=cmpb_r8_r8       
  je .L_83234                      #  88    0x832e3  6      OPC=je_label_1       
  testb %dl, %dl                   #  89    0x832e9  2      OPC=testb_r8_r8      
  jne .L_832d0                     #  90    0x832eb  2      OPC=jne_label        
.L_832ed:                          #        0x832ed  0      OPC=<label>          
  testq %r10, %r10                 #  91    0x832ed  3      OPC=testq_r64_r64    
  jne .L_83338                     #  92    0x832f0  2      OPC=jne_label        
  andl $0x4, %r9d                  #  93    0x832f2  4      OPC=andl_r32_imm8    
  je .L_83340                      #  94    0x832f6  2      OPC=je_label         
  andq $0xfc000000, %rcx           #  95    0x832f8  7      OPC=andq_r64_imm32   
  movl 0x33decb(%rip), %ebx        #  96    0x832ff  6      OPC=movl_r32_m32     
  movq (%rcx), %rax                #  97    0x83305  3      OPC=movq_r64_m64     
  testq %rax, %rax                 #  98    0x83308  3      OPC=testq_r64_r64    
  je .L_83311                      #  99    0x8330b  2      OPC=je_label         
.L_8330d:                          #        0x8330d  0      OPC=<label>          
  orl $0x4, 0x4(%rax)              #  100   0x8330d  4      OPC=orl_m32_imm8     
.L_83311:                          #        0x83311  0      OPC=<label>          
  movl %ebx, %eax                  #  101   0x83311  2      OPC=movl_r32_r32     
  andl $0x5, %eax                  #  102   0x83313  3      OPC=andl_r32_imm8    
  cmpl $0x5, %eax                  #  103   0x83316  3      OPC=cmpl_r32_imm8    
  je .L_83243                      #  104   0x83319  6      OPC=je_label_1       
  testb $0x1, %bl                  #  105   0x8331f  3      OPC=testb_r8_imm8    
  jne .L_83350                     #  106   0x83322  2      OPC=jne_label        
  andl $0x2, %ebx                  #  107   0x83324  3      OPC=andl_r32_imm8    
  je .L_83260                      #  108   0x83327  6      OPC=je_label_1       
  callq .abort                     #  109   0x8332d  5      OPC=callq_label      
  nop                              #  110   0x83332  1      OPC=nop              
  nop                              #  111   0x83333  1      OPC=nop              
  nop                              #  112   0x83334  1      OPC=nop              
  nop                              #  113   0x83335  1      OPC=nop              
  nop                              #  114   0x83336  1      OPC=nop              
  nop                              #  115   0x83337  1      OPC=nop              
.L_83338:                          #        0x83338  0      OPC=<label>          
  movl 0x33de92(%rip), %ebx        #  116   0x83338  6      OPC=movl_r32_m32     
  jmpq .L_83311                    #  117   0x8333e  2      OPC=jmpq_label       
.L_83340:                          #        0x83340  0      OPC=<label>          
  movl 0x33de8a(%rip), %ebx        #  118   0x83340  6      OPC=movl_r32_m32     
  leaq 0x33e8f3(%rip), %rax        #  119   0x83346  7      OPC=leaq_r64_m16     
  jmpq .L_8330d                    #  120   0x8334d  2      OPC=jmpq_label       
  nop                              #  121   0x8334f  1      OPC=nop              
.L_83350:                          #        0x83350  0      OPC=<label>          
  leaq 0x10(%rsp), %rsi            #  122   0x83350  5      OPC=leaq_r64_m16     
  xorl %ecx, %ecx                  #  123   0x83355  2      OPC=xorl_r32_r32     
  movl $0x10, %edx                 #  124   0x83357  5      OPC=movl_r32_imm32   
  movb $0x0, 0x10(%rsp)            #  125   0x8335c  5      OPC=movb_m8_imm8     
  callq ._itoa_word                #  126   0x83361  5      OPC=callq_label      
  cmpq %rsp, %rax                  #  127   0x83366  3      OPC=cmpq_r64_r64     
  movq %rax, %rbp                  #  128   0x83369  3      OPC=movq_r64_r64     
  jbe .L_83393                     #  129   0x8336c  2      OPC=jbe_label        
  movq %rax, %rdx                  #  130   0x8336e  3      OPC=movq_r64_r64     
  movq %rax, %rdi                  #  131   0x83371  3      OPC=movq_r64_r64     
  movl $0x30, %esi                 #  132   0x83374  5      OPC=movl_r32_imm32   
  subq %rsp, %rdx                  #  133   0x83379  3      OPC=subq_r64_r64     
  leaq -0x1(%rax), %r13            #  134   0x8337c  4      OPC=leaq_r64_m16     
  subq %rdx, %rdi                  #  135   0x83380  3      OPC=subq_r64_r64     
  callq .__GI_memset               #  136   0x83383  5      OPC=callq_label      
  leaq -0x1(%rsp), %rax            #  137   0x83388  5      OPC=leaq_r64_m16     
  subq %r13, %rax                  #  138   0x8338d  3      OPC=subq_r64_r64     
  addq %rax, %rbp                  #  139   0x83390  3      OPC=addq_r64_r64     
.L_83393:                          #        0x83393  0      OPC=<label>          
  movq 0x3433fe(%rip), %rax        #  140   0x83393  7      OPC=movq_r64_m64     
  leaq 0x1082ba(%rip), %rdx        #  141   0x8339a  7      OPC=leaq_r64_m16     
  leaq 0x10be88(%rip), %rcx        #  142   0x833a1  7      OPC=leaq_r64_m16     
  leaq 0x10b759(%rip), %rsi        #  143   0x833a8  7      OPC=leaq_r64_m16     
  movq %rbp, %r8                   #  144   0x833af  3      OPC=movq_r64_r64     
  movq (%rax), %rax                #  145   0x833b2  3      OPC=movq_r64_m64     
  testq %rax, %rax                 #  146   0x833b5  3      OPC=testq_r64_r64    
  cmovneq %rax, %rdx               #  147   0x833b8  4      OPC=cmovneq_r64_r64  
  andl $0x2, %ebx                  #  148   0x833bc  3      OPC=andl_r32_imm8    
  xorl %eax, %eax                  #  149   0x833bf  2      OPC=xorl_r32_r32     
  movl %ebx, %edi                  #  150   0x833c1  2      OPC=movl_r32_r32     
  callq .__libc_message            #  151   0x833c3  5      OPC=callq_label      
  xorl %eax, %eax                  #  152   0x833c8  2      OPC=xorl_r32_r32     
  jmpq .L_83223                    #  153   0x833ca  5      OPC=jmpq_label_1     
  nop                              #  154   0x833cf  1      OPC=nop              
                                                                                 
.size malloc_usable_size, .-malloc_usable_size

