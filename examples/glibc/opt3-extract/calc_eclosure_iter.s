  .text
  .globl calc_eclosure_iter
  .type calc_eclosure_iter, @function

#! file-offset 0xd6d90
#! rip-offset  0xd6d90
#! capacity    592 bytes

# Text                                #  Line  RIP      Bytes  Opcode               
.calc_eclosure_iter:                  #        0xd6d90  0      OPC=<label>          
  pushq %r15                          #  1     0xd6d90  2      OPC=pushq_r64_1      
  pushq %r14                          #  2     0xd6d92  2      OPC=pushq_r64_1      
  movq %rsi, %r15                     #  3     0xd6d94  3      OPC=movq_r64_r64     
  pushq %r13                          #  4     0xd6d97  2      OPC=pushq_r64_1      
  pushq %r12                          #  5     0xd6d99  2      OPC=pushq_r64_1      
  pushq %rbp                          #  6     0xd6d9b  1      OPC=pushq_r64_1      
  pushq %rbx                          #  7     0xd6d9c  1      OPC=pushq_r64_1      
  movslq %edx, %rbx                   #  8     0xd6d9d  3      OPC=movslq_r64_r32   
  subq $0x48, %rsp                    #  9     0xd6da0  4      OPC=subq_r64_imm8    
  movl %ebx, 0x18(%rsp)               #  10    0xd6da4  4      OPC=movl_m32_r32     
  shlq $0x4, %rbx                     #  11    0xd6da8  4      OPC=shlq_r64_imm8    
  movq %rdi, 0x10(%rsp)               #  12    0xd6dac  5      OPC=movq_m64_r64     
  movq %rbx, %rbp                     #  13    0xd6db1  3      OPC=movq_r64_r64     
  addq 0x28(%rsi), %rbp               #  14    0xd6db4  4      OPC=addq_r64_m64     
  movl %ecx, 0x1c(%rsp)               #  15    0xd6db8  4      OPC=movl_m32_r32     
  movl 0x4(%rbp), %eax                #  16    0xd6dbc  3      OPC=movl_r32_m32     
  movl $0x0, 0x24(%rsp)               #  17    0xd6dbf  8      OPC=movl_m32_imm32   
  leal 0x1(%rax), %edi                #  18    0xd6dc7  3      OPC=leal_r32_m16     
  movl %edi, 0x20(%rsp)               #  19    0xd6dca  4      OPC=movl_m32_r32     
  movslq %edi, %rdi                   #  20    0xd6dce  3      OPC=movslq_r64_r32   
  shlq $0x2, %rdi                     #  21    0xd6dd1  4      OPC=shlq_r64_imm8    
  callq .memalign_plt                 #  22    0xd6dd5  5      OPC=callq_label      
  testq %rax, %rax                    #  23    0xd6dda  3      OPC=testq_r64_r64    
  movq %rax, 0x28(%rsp)               #  24    0xd6ddd  5      OPC=movq_m64_r64     
  je .L_d6f2a                         #  25    0xd6de2  6      OPC=je_label_1       
  movq 0x30(%r15), %rax               #  26    0xd6de8  4      OPC=movq_r64_m64     
  movq (%r15), %rdx                   #  27    0xd6dec  3      OPC=movq_r64_m64     
  movl $0xffffffff, 0x4(%rax,%rbx,1)  #  28    0xd6def  8      OPC=movl_m32_imm32   
  leaq (%rdx,%rbx,1), %rax            #  29    0xd6df7  4      OPC=leaq_r64_m16     
  movl 0x8(%rax), %r8d                #  30    0xd6dfb  4      OPC=movl_r32_m32     
  testl $0x3ff00, %r8d                #  31    0xd6dff  7      OPC=testl_r32_imm32  
  je .L_d6e28                         #  32    0xd6e06  2      OPC=je_label         
  movl 0x4(%rbp), %esi                #  33    0xd6e08  3      OPC=movl_r32_m32     
  testl %esi, %esi                    #  34    0xd6e0b  2      OPC=testl_r32_r32    
  je .L_d6e28                         #  35    0xd6e0d  2      OPC=je_label         
  movq 0x8(%rbp), %rcx                #  36    0xd6e0f  4      OPC=movq_r64_m64     
  movslq (%rcx), %rcx                 #  37    0xd6e13  3      OPC=movslq_r64_m32   
  shlq $0x4, %rcx                     #  38    0xd6e16  4      OPC=shlq_r64_imm8    
  testb $0x4, 0xa(%rdx,%rcx,1)        #  39    0xd6e1a  5      OPC=testb_m8_imm8    
  je .L_d6fae                         #  40    0xd6e1f  6      OPC=je_label_1       
  nop                                 #  41    0xd6e25  1      OPC=nop              
  nop                                 #  42    0xd6e26  1      OPC=nop              
  nop                                 #  43    0xd6e27  1      OPC=nop              
.L_d6e28:                             #        0xd6e28  0      OPC=<label>          
  testb $0x8, 0x8(%rax)               #  44    0xd6e28  4      OPC=testb_m8_imm8    
  je .L_d6f18                         #  45    0xd6e2c  6      OPC=je_label_1       
  movq 0x28(%r15), %rsi               #  46    0xd6e32  4      OPC=movq_r64_m64     
  leaq (%rsi,%rbx,1), %rax            #  47    0xd6e36  4      OPC=leaq_r64_m16     
  movl 0x4(%rax), %ecx                #  48    0xd6e3a  3      OPC=movl_r32_m32     
  testl %ecx, %ecx                    #  49    0xd6e3d  2      OPC=testl_r32_r32    
  jle .L_d6f18                        #  50    0xd6e3f  6      OPC=jle_label_1      
  xorl %r14d, %r14d                   #  51    0xd6e45  3      OPC=xorl_r32_r32     
  xorl %r12d, %r12d                   #  52    0xd6e48  3      OPC=xorl_r32_r32     
  leaq 0x20(%rsp), %rbp               #  53    0xd6e4b  5      OPC=leaq_r64_m16     
  jmpq .L_d6ea7                       #  54    0xd6e50  2      OPC=jmpq_label       
  nop                                 #  55    0xd6e52  1      OPC=nop              
  nop                                 #  56    0xd6e53  1      OPC=nop              
  nop                                 #  57    0xd6e54  1      OPC=nop              
  nop                                 #  58    0xd6e55  1      OPC=nop              
  nop                                 #  59    0xd6e56  1      OPC=nop              
  nop                                 #  60    0xd6e57  1      OPC=nop              
.L_d6e58:                             #        0xd6e58  0      OPC=<label>          
  testl %eax, %eax                    #  61    0xd6e58  2      OPC=testl_r32_r32    
  je .L_d6ed0                         #  62    0xd6e5a  2      OPC=je_label         
  movq (%rcx), %rax                   #  63    0xd6e5c  3      OPC=movq_r64_m64     
  movq 0x8(%rcx), %rdx                #  64    0xd6e5f  4      OPC=movq_r64_m64     
  leaq 0x30(%rsp), %r11               #  65    0xd6e63  5      OPC=leaq_r64_m16     
  movq %rax, 0x30(%rsp)               #  66    0xd6e68  5      OPC=movq_m64_r64     
  movq %rdx, 0x38(%rsp)               #  67    0xd6e6d  5      OPC=movq_m64_r64     
.L_d6e72:                             #        0xd6e72  0      OPC=<label>          
  movq %r11, %rsi                     #  68    0xd6e72  3      OPC=movq_r64_r64     
  movq %rbp, %rdi                     #  69    0xd6e75  3      OPC=movq_r64_r64     
  callq .re_node_set_merge            #  70    0xd6e78  5      OPC=callq_label      
  testl %eax, %eax                    #  71    0xd6e7d  2      OPC=testl_r32_r32    
  jne .L_d6ef0                        #  72    0xd6e7f  2      OPC=jne_label        
  movq 0x30(%r15), %rax               #  73    0xd6e81  4      OPC=movq_r64_m64     
  movl 0x4(%rax,%r13,1), %edx         #  74    0xd6e85  5      OPC=movl_r32_m32     
  testl %edx, %edx                    #  75    0xd6e8a  2      OPC=testl_r32_r32    
  je .L_d6f00                         #  76    0xd6e8c  2      OPC=je_label         
.L_d6e8e:                             #        0xd6e8e  0      OPC=<label>          
  movq 0x28(%r15), %rsi               #  77    0xd6e8e  4      OPC=movq_r64_m64     
.L_d6e92:                             #        0xd6e92  0      OPC=<label>          
  leaq (%rsi,%rbx,1), %rax            #  78    0xd6e92  4      OPC=leaq_r64_m16     
  leal 0x1(%r14), %edx                #  79    0xd6e96  4      OPC=leal_r32_m16     
  addq $0x1, %r14                     #  80    0xd6e9a  4      OPC=addq_r64_imm8    
  cmpl %edx, 0x4(%rax)                #  81    0xd6e9e  3      OPC=cmpl_m32_r32     
  jle .L_d6f40                        #  82    0xd6ea1  6      OPC=jle_label_1      
.L_d6ea7:                             #        0xd6ea7  0      OPC=<label>          
  movq 0x8(%rax), %rax                #  83    0xd6ea7  4      OPC=movq_r64_m64     
  movslq (%rax,%r14,4), %r8           #  84    0xd6eab  4      OPC=movslq_r64_m32   
  movq %r8, %rdx                      #  85    0xd6eaf  3      OPC=movq_r64_r64     
  shlq $0x4, %r8                      #  86    0xd6eb2  4      OPC=shlq_r64_imm8    
  movq %r8, %rcx                      #  87    0xd6eb6  3      OPC=movq_r64_r64     
  addq 0x30(%r15), %rcx               #  88    0xd6eb9  4      OPC=addq_r64_m64     
  movq %r8, %r13                      #  89    0xd6ebd  3      OPC=movq_r64_r64     
  movl 0x4(%rcx), %eax                #  90    0xd6ec0  3      OPC=movl_r32_m32     
  cmpl $0xffffffff, %eax              #  91    0xd6ec3  6      OPC=cmpl_r32_imm32   
  nop                                 #  92    0xd6ec9  1      OPC=nop              
  nop                                 #  93    0xd6eca  1      OPC=nop              
  nop                                 #  94    0xd6ecb  1      OPC=nop              
  jne .L_d6e58                        #  95    0xd6ecc  2      OPC=jne_label        
  movl $0x1, %r12d                    #  96    0xd6ece  6      OPC=movl_r32_imm32   
  jmpq .L_d6e92                       #  97    0xd6ed4  2      OPC=jmpq_label       
.L_d6ed0:                             #        0xd6ed6  0      OPC=<label>          
  leaq 0x30(%rsp), %r11               #  98    0xd6ed6  5      OPC=leaq_r64_m16     
  xorl %ecx, %ecx                     #  99    0xd6edb  2      OPC=xorl_r32_r32     
  movq %r15, %rsi                     #  100   0xd6edd  3      OPC=movq_r64_r64     
  movq %r11, %rdi                     #  101   0xd6ee0  3      OPC=movq_r64_r64     
  movq %r11, 0x8(%rsp)                #  102   0xd6ee3  5      OPC=movq_m64_r64     
  callq .calc_eclosure_iter           #  103   0xd6ee8  5      OPC=callq_label      
  testl %eax, %eax                    #  104   0xd6eed  2      OPC=testl_r32_r32    
  movq 0x8(%rsp), %r11                #  105   0xd6eef  5      OPC=movq_r64_m64     
  je .L_d6e72                         #  106   0xd6ef4  2      OPC=je_label         
.L_d6ef0:                             #        0xd6ef6  0      OPC=<label>          
  addq $0x48, %rsp                    #  107   0xd6ef6  4      OPC=addq_r64_imm8    
  popq %rbx                           #  108   0xd6efa  1      OPC=popq_r64_1       
  popq %rbp                           #  109   0xd6efb  1      OPC=popq_r64_1       
  popq %r12                           #  110   0xd6efc  2      OPC=popq_r64_1       
  popq %r13                           #  111   0xd6efe  2      OPC=popq_r64_1       
  popq %r14                           #  112   0xd6f00  2      OPC=popq_r64_1       
  popq %r15                           #  113   0xd6f02  2      OPC=popq_r64_1       
  retq                                #  114   0xd6f04  1      OPC=retq             
  nop                                 #  115   0xd6f05  1      OPC=nop              
.L_d6f00:                             #        0xd6f06  0      OPC=<label>          
  movq 0x38(%rsp), %rdi               #  116   0xd6f06  5      OPC=movq_r64_m64     
  movl $0x1, %r12d                    #  117   0xd6f0b  6      OPC=movl_r32_imm32   
  callq .L_1f8c0                      #  118   0xd6f11  5      OPC=callq_label      
  jmpq .L_d6e8e                       #  119   0xd6f16  5      OPC=jmpq_label_1     
  nop                                 #  120   0xd6f1b  1      OPC=nop              
  nop                                 #  121   0xd6f1c  1      OPC=nop              
  nop                                 #  122   0xd6f1d  1      OPC=nop              
.L_d6f18:                             #        0xd6f1e  0      OPC=<label>          
  movl 0x18(%rsp), %esi               #  123   0xd6f1e  4      OPC=movl_r32_m32     
  leaq 0x20(%rsp), %rdi               #  124   0xd6f22  5      OPC=leaq_r64_m16     
  callq .re_node_set_insert           #  125   0xd6f27  5      OPC=callq_label      
  testl %eax, %eax                    #  126   0xd6f2c  2      OPC=testl_r32_r32    
  jns .L_d6f70                        #  127   0xd6f2e  2      OPC=jns_label        
.L_d6f2a:                             #        0xd6f30  0      OPC=<label>          
  addq $0x48, %rsp                    #  128   0xd6f30  4      OPC=addq_r64_imm8    
  movl $0xc, %eax                     #  129   0xd6f34  5      OPC=movl_r32_imm32   
  popq %rbx                           #  130   0xd6f39  1      OPC=popq_r64_1       
  popq %rbp                           #  131   0xd6f3a  1      OPC=popq_r64_1       
  popq %r12                           #  132   0xd6f3b  2      OPC=popq_r64_1       
  popq %r13                           #  133   0xd6f3d  2      OPC=popq_r64_1       
  popq %r14                           #  134   0xd6f3f  2      OPC=popq_r64_1       
  popq %r15                           #  135   0xd6f41  2      OPC=popq_r64_1       
  retq                                #  136   0xd6f43  1      OPC=retq             
  xchgw %ax, %ax                      #  137   0xd6f44  2      OPC=xchgw_ax_r16     
.L_d6f40:                             #        0xd6f46  0      OPC=<label>          
  movl 0x18(%rsp), %esi               #  138   0xd6f46  4      OPC=movl_r32_m32     
  leaq 0x20(%rsp), %rdi               #  139   0xd6f4a  5      OPC=leaq_r64_m16     
  callq .re_node_set_insert           #  140   0xd6f4f  5      OPC=callq_label      
  testl %eax, %eax                    #  141   0xd6f54  2      OPC=testl_r32_r32    
  js .L_d6f2a                         #  142   0xd6f56  2      OPC=js_label         
  testl %r12d, %r12d                  #  143   0xd6f58  3      OPC=testl_r32_r32    
  je .L_d6f70                         #  144   0xd6f5b  2      OPC=je_label         
  movl 0x1c(%rsp), %eax               #  145   0xd6f5d  4      OPC=movl_r32_m32     
  testl %eax, %eax                    #  146   0xd6f61  2      OPC=testl_r32_r32    
  jne .L_d6f70                        #  147   0xd6f63  2      OPC=jne_label        
  movq 0x30(%r15), %rax               #  148   0xd6f65  4      OPC=movq_r64_m64     
  movl $0x0, 0x4(%rax,%rbx,1)         #  149   0xd6f69  8      OPC=movl_m32_imm32   
  jmpq .L_d6f87                       #  150   0xd6f71  2      OPC=jmpq_label       
  nop                                 #  151   0xd6f73  1      OPC=nop              
  nop                                 #  152   0xd6f74  1      OPC=nop              
  nop                                 #  153   0xd6f75  1      OPC=nop              
.L_d6f70:                             #        0xd6f76  0      OPC=<label>          
  movq 0x30(%r15), %rax               #  154   0xd6f76  4      OPC=movq_r64_m64     
  movq 0x20(%rsp), %rsi               #  155   0xd6f7a  5      OPC=movq_r64_m64     
  movq 0x28(%rsp), %rdi               #  156   0xd6f7f  5      OPC=movq_r64_m64     
  movq %rsi, (%rax,%rbx,1)            #  157   0xd6f84  4      OPC=movq_m64_r64     
  movq %rdi, 0x8(%rax,%rbx,1)         #  158   0xd6f88  5      OPC=movq_m64_r64     
.L_d6f87:                             #        0xd6f8d  0      OPC=<label>          
  movq 0x10(%rsp), %rbx               #  159   0xd6f8d  5      OPC=movq_r64_m64     
  movq 0x20(%rsp), %rax               #  160   0xd6f92  5      OPC=movq_r64_m64     
  movq 0x28(%rsp), %rdx               #  161   0xd6f97  5      OPC=movq_r64_m64     
  movq %rax, (%rbx)                   #  162   0xd6f9c  3      OPC=movq_m64_r64     
  xorl %eax, %eax                     #  163   0xd6f9f  2      OPC=xorl_r32_r32     
  movq %rdx, 0x8(%rbx)                #  164   0xd6fa1  4      OPC=movq_m64_r64     
  addq $0x48, %rsp                    #  165   0xd6fa5  4      OPC=addq_r64_imm8    
  popq %rbx                           #  166   0xd6fa9  1      OPC=popq_r64_1       
  popq %rbp                           #  167   0xd6faa  1      OPC=popq_r64_1       
  popq %r12                           #  168   0xd6fab  2      OPC=popq_r64_1       
  popq %r13                           #  169   0xd6fad  2      OPC=popq_r64_1       
  popq %r14                           #  170   0xd6faf  2      OPC=popq_r64_1       
  popq %r15                           #  171   0xd6fb1  2      OPC=popq_r64_1       
  retq                                #  172   0xd6fb3  1      OPC=retq             
.L_d6fae:                             #        0xd6fb4  0      OPC=<label>          
  movl 0x18(%rsp), %esi               #  173   0xd6fb4  4      OPC=movl_r32_m32     
  shrl $0x8, %r8d                     #  174   0xd6fb8  4      OPC=shrl_r32_imm8    
  movq %r15, %rdi                     #  175   0xd6fbc  3      OPC=movq_r64_r64     
  andl $0x3ff, %r8d                   #  176   0xd6fbf  7      OPC=andl_r32_imm32   
  movl %esi, %ecx                     #  177   0xd6fc6  2      OPC=movl_r32_r32     
  movl %esi, %edx                     #  178   0xd6fc8  2      OPC=movl_r32_r32     
  callq .duplicate_node_closure       #  179   0xd6fca  5      OPC=callq_label      
  testl %eax, %eax                    #  180   0xd6fcf  2      OPC=testl_r32_r32    
  jne .L_d6ef0                        #  181   0xd6fd1  6      OPC=jne_label_1      
  movq %rbx, %rax                     #  182   0xd6fd7  3      OPC=movq_r64_r64     
  addq (%r15), %rax                   #  183   0xd6fda  3      OPC=addq_r64_m64     
  jmpq .L_d6e28                       #  184   0xd6fdd  5      OPC=jmpq_label_1     
  nop                                 #  185   0xd6fe2  1      OPC=nop              
  nop                                 #  186   0xd6fe3  1      OPC=nop              
  nop                                 #  187   0xd6fe4  1      OPC=nop              
  nop                                 #  188   0xd6fe5  1      OPC=nop              
                                                                                    
.size calc_eclosure_iter, .-calc_eclosure_iter

