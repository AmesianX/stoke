  .text
  .globl svctcp_create_GLIBC_2_2_5
  .type svctcp_create_GLIBC_2_2_5, @function

#! file-offset 0x136d50
#! rip-offset  0x136d50
#! capacity    544 bytes

# Text                              #  Line  RIP       Bytes  Opcode              
.svctcp_create_GLIBC_2_2_5:         #        0x136d50  0      OPC=<label>         
  pushq %r14                        #  1     0x136d50  2      OPC=pushq_r64_1     
  pushq %r13                        #  2     0x136d52  2      OPC=pushq_r64_1     
  movl %esi, %r14d                  #  3     0x136d54  3      OPC=movl_r32_r32    
  pushq %r12                        #  4     0x136d57  2      OPC=pushq_r64_1     
  pushq %rbp                        #  5     0x136d59  1      OPC=pushq_r64_1     
  xorl %r12d, %r12d                 #  6     0x136d5a  3      OPC=xorl_r32_r32    
  pushq %rbx                        #  7     0x136d5d  1      OPC=pushq_r64_1     
  movl %edx, %r13d                  #  8     0x136d5e  3      OPC=movl_r32_r32    
  movl %edi, %ebx                   #  9     0x136d61  2      OPC=movl_r32_r32    
  subq $0x20, %rsp                  #  10    0x136d63  4      OPC=subq_r64_imm8   
  cmpl $0xffffffff, %edi            #  11    0x136d67  6      OPC=cmpl_r32_imm32  
  nop                               #  12    0x136d6d  1      OPC=nop             
  nop                               #  13    0x136d6e  1      OPC=nop             
  nop                               #  14    0x136d6f  1      OPC=nop             
  movl $0x10, 0xc(%rsp)             #  15    0x136d70  8      OPC=movl_m32_imm32  
  je .L_136ed8                      #  16    0x136d78  6      OPC=je_label_1      
.L_136d78:                          #        0x136d7e  0      OPC=<label>         
  leaq 0x10(%rsp), %rbp             #  17    0x136d7e  5      OPC=leaq_r64_m16    
  movl $0x2, %edx                   #  18    0x136d83  5      OPC=movl_r32_imm32  
  movl %ebx, %edi                   #  19    0x136d88  2      OPC=movl_r32_r32    
  movq $0x0, 0x10(%rsp)             #  20    0x136d8a  9      OPC=movq_m64_imm32  
  movq $0x0, 0x18(%rsp)             #  21    0x136d93  9      OPC=movq_m64_imm32  
  movq %rbp, %rsi                   #  22    0x136d9c  3      OPC=movq_r64_r64    
  movw %dx, 0x10(%rsp)              #  23    0x136d9f  5      OPC=movw_m16_r16    
  callq .bindresvport               #  24    0x136da4  5      OPC=callq_label     
  testl %eax, %eax                  #  25    0x136da9  2      OPC=testl_r32_r32   
  jne .L_136eb8                     #  26    0x136dab  6      OPC=jne_label_1     
.L_136dab:                          #        0x136db1  0      OPC=<label>         
  leaq 0xc(%rsp), %rdx              #  27    0x136db1  5      OPC=leaq_r64_m16    
  movq %rbp, %rsi                   #  28    0x136db6  3      OPC=movq_r64_r64    
  movl %ebx, %edi                   #  29    0x136db9  2      OPC=movl_r32_r32    
  callq .getsockname                #  30    0x136dbb  5      OPC=callq_label     
  testl %eax, %eax                  #  31    0x136dc0  2      OPC=testl_r32_r32   
  je .L_136e00                      #  32    0x136dc2  2      OPC=je_label        
.L_136dbe:                          #        0x136dc4  0      OPC=<label>         
  leaq 0x59c73(%rip), %rsi          #  33    0x136dc4  7      OPC=leaq_r64_m16    
  leaq 0x537d0(%rip), %rdi          #  34    0x136dcb  7      OPC=leaq_r64_m16    
  movl $0x5, %edx                   #  35    0x136dd2  5      OPC=movl_r32_imm32  
  callq .__dcgettext                #  36    0x136dd7  5      OPC=callq_label     
  movq %rax, %rdi                   #  37    0x136ddc  3      OPC=movq_r64_r64    
  callq .perror                     #  38    0x136ddf  5      OPC=callq_label     
  testl %r12d, %r12d                #  39    0x136de4  3      OPC=testl_r32_r32   
  jne .L_136ea8                     #  40    0x136de7  6      OPC=jne_label_1     
.L_136de7:                          #        0x136ded  0      OPC=<label>         
  xorl %eax, %eax                   #  41    0x136ded  2      OPC=xorl_r32_r32    
.L_136de9:                          #        0x136def  0      OPC=<label>         
  addq $0x20, %rsp                  #  42    0x136def  4      OPC=addq_r64_imm8   
  popq %rbx                         #  43    0x136df3  1      OPC=popq_r64_1      
  popq %rbp                         #  44    0x136df4  1      OPC=popq_r64_1      
  popq %r12                         #  45    0x136df5  2      OPC=popq_r64_1      
  popq %r13                         #  46    0x136df7  2      OPC=popq_r64_1      
  popq %r14                         #  47    0x136df9  2      OPC=popq_r64_1      
  retq                              #  48    0x136dfb  1      OPC=retq            
  nop                               #  49    0x136dfc  1      OPC=nop             
  nop                               #  50    0x136dfd  1      OPC=nop             
  nop                               #  51    0x136dfe  1      OPC=nop             
  nop                               #  52    0x136dff  1      OPC=nop             
  nop                               #  53    0x136e00  1      OPC=nop             
  nop                               #  54    0x136e01  1      OPC=nop             
  nop                               #  55    0x136e02  1      OPC=nop             
  nop                               #  56    0x136e03  1      OPC=nop             
  nop                               #  57    0x136e04  1      OPC=nop             
  nop                               #  58    0x136e05  1      OPC=nop             
.L_136e00:                          #        0x136e06  0      OPC=<label>         
  movl $0x80, %esi                  #  59    0x136e06  5      OPC=movl_r32_imm32  
  movl %ebx, %edi                   #  60    0x136e0b  2      OPC=movl_r32_r32    
  callq .listen                     #  61    0x136e0d  5      OPC=callq_label     
  testl %eax, %eax                  #  62    0x136e12  2      OPC=testl_r32_r32   
  jne .L_136dbe                     #  63    0x136e14  2      OPC=jne_label       
  movl $0x8, %edi                   #  64    0x136e16  5      OPC=movl_r32_imm32  
  callq .memalign_plt               #  65    0x136e1b  5      OPC=callq_label     
  movl $0x150, %edi                 #  66    0x136e20  5      OPC=movl_r32_imm32  
  movq %rax, %r12                   #  67    0x136e25  3      OPC=movq_r64_r64    
  callq .memalign_plt               #  68    0x136e28  5      OPC=callq_label     
  testq %rax, %rax                  #  69    0x136e2d  3      OPC=testq_r64_r64   
  movq %rax, %rbp                   #  70    0x136e30  3      OPC=movq_r64_r64    
  je .L_136efd                      #  71    0x136e33  6      OPC=je_label_1      
  testq %r12, %r12                  #  72    0x136e39  3      OPC=testq_r64_r64   
  je .L_136efd                      #  73    0x136e3c  6      OPC=je_label_1      
  movq %r12, 0x40(%rax)             #  74    0x136e42  4      OPC=movq_m64_r64    
  movq $0x0, 0x48(%rax)             #  75    0x136e46  8      OPC=movq_m64_imm32  
  movq %rbp, %rdi                   #  76    0x136e4e  3      OPC=movq_r64_r64    
  movq 0x28f3de(%rip), %rax         #  77    0x136e51  7      OPC=movq_r64_m64    
  movl %r14d, (%r12)                #  78    0x136e58  4      OPC=movl_m32_r32    
  movl %r13d, 0x4(%r12)             #  79    0x136e5c  5      OPC=movl_m32_r32    
  movl %ebx, (%rbp)                 #  80    0x136e61  3      OPC=movl_m32_r32    
  movq %rax, 0x28(%rbp)             #  81    0x136e64  4      OPC=movq_m64_r64    
  movq 0x28f3cf(%rip), %rax         #  82    0x136e68  7      OPC=movq_r64_m64    
  movq %rax, 0x30(%rbp)             #  83    0x136e6f  4      OPC=movq_m64_r64    
  movq 0x28f3cc(%rip), %rax         #  84    0x136e73  7      OPC=movq_r64_m64    
  movq %rax, 0x38(%rbp)             #  85    0x136e7a  4      OPC=movq_m64_r64    
  leaq 0x2889e1(%rip), %rax         #  86    0x136e7e  7      OPC=leaq_r64_m16    
  movq %rax, 0x8(%rbp)              #  87    0x136e85  4      OPC=movq_m64_r64    
  movzwl 0x12(%rsp), %eax           #  88    0x136e89  5      OPC=movzwl_r32_m16  
  rorw $0x8, %ax                    #  89    0x136e8e  4      OPC=rorw_r16_imm8   
  movw %ax, 0x4(%rbp)               #  90    0x136e92  4      OPC=movw_m16_r16    
  callq .xprt_register_GLIBC_2_2_5  #  91    0x136e96  5      OPC=callq_label     
  addq $0x20, %rsp                  #  92    0x136e9b  4      OPC=addq_r64_imm8   
  movq %rbp, %rax                   #  93    0x136e9f  3      OPC=movq_r64_r64    
  popq %rbx                         #  94    0x136ea2  1      OPC=popq_r64_1      
  popq %rbp                         #  95    0x136ea3  1      OPC=popq_r64_1      
  popq %r12                         #  96    0x136ea4  2      OPC=popq_r64_1      
  popq %r13                         #  97    0x136ea6  2      OPC=popq_r64_1      
  popq %r14                         #  98    0x136ea8  2      OPC=popq_r64_1      
  retq                              #  99    0x136eaa  1      OPC=retq            
  nop                               #  100   0x136eab  1      OPC=nop             
  nop                               #  101   0x136eac  1      OPC=nop             
  nop                               #  102   0x136ead  1      OPC=nop             
.L_136ea8:                          #        0x136eae  0      OPC=<label>         
  movl %ebx, %edi                   #  103   0x136eae  2      OPC=movl_r32_r32    
  callq .__close                    #  104   0x136eb0  5      OPC=callq_label     
  jmpq .L_136de7                    #  105   0x136eb5  5      OPC=jmpq_label_1    
  nop                               #  106   0x136eba  1      OPC=nop             
  nop                               #  107   0x136ebb  1      OPC=nop             
  nop                               #  108   0x136ebc  1      OPC=nop             
  nop                               #  109   0x136ebd  1      OPC=nop             
.L_136eb8:                          #        0x136ebe  0      OPC=<label>         
  movl 0xc(%rsp), %edx              #  110   0x136ebe  4      OPC=movl_r32_m32    
  xorl %eax, %eax                   #  111   0x136ec2  2      OPC=xorl_r32_r32    
  movq %rbp, %rsi                   #  112   0x136ec4  3      OPC=movq_r64_r64    
  movl %ebx, %edi                   #  113   0x136ec7  2      OPC=movl_r32_r32    
  movw %ax, 0x12(%rsp)              #  114   0x136ec9  5      OPC=movw_m16_r16    
  callq .bind                       #  115   0x136ece  5      OPC=callq_label     
  jmpq .L_136dab                    #  116   0x136ed3  5      OPC=jmpq_label_1    
  nop                               #  117   0x136ed8  1      OPC=nop             
  nop                               #  118   0x136ed9  1      OPC=nop             
  nop                               #  119   0x136eda  1      OPC=nop             
  nop                               #  120   0x136edb  1      OPC=nop             
  nop                               #  121   0x136edc  1      OPC=nop             
  nop                               #  122   0x136edd  1      OPC=nop             
.L_136ed8:                          #        0x136ede  0      OPC=<label>         
  movl $0x6, %edx                   #  123   0x136ede  5      OPC=movl_r32_imm32  
  movl $0x1, %esi                   #  124   0x136ee3  5      OPC=movl_r32_imm32  
  movl $0x2, %edi                   #  125   0x136ee8  5      OPC=movl_r32_imm32  
  callq .__socket                   #  126   0x136eed  5      OPC=callq_label     
  testl %eax, %eax                  #  127   0x136ef2  2      OPC=testl_r32_r32   
  movl %eax, %ebx                   #  128   0x136ef4  2      OPC=movl_r32_r32    
  js .L_136f46                      #  129   0x136ef6  2      OPC=js_label        
  movl $0x1, %r12d                  #  130   0x136ef8  6      OPC=movl_r32_imm32  
  jmpq .L_136d78                    #  131   0x136efe  5      OPC=jmpq_label_1    
.L_136efd:                          #        0x136f03  0      OPC=<label>         
  leaq 0x5696f(%rip), %rsi          #  132   0x136f03  7      OPC=leaq_r64_m16    
  leaq 0x53691(%rip), %rdi          #  133   0x136f0a  7      OPC=leaq_r64_m16    
  movl $0x5, %edx                   #  134   0x136f11  5      OPC=movl_r32_imm32  
  callq .__dcgettext                #  135   0x136f16  5      OPC=callq_label     
  leaq 0x56aca(%rip), %rdx          #  136   0x136f1b  7      OPC=leaq_r64_m16    
  leaq 0x5606a(%rip), %rsi          #  137   0x136f22  7      OPC=leaq_r64_m16    
  movq %rax, %rcx                   #  138   0x136f29  3      OPC=movq_r64_r64    
  xorl %edi, %edi                   #  139   0x136f2c  2      OPC=xorl_r32_r32    
  xorl %eax, %eax                   #  140   0x136f2e  2      OPC=xorl_r32_r32    
  callq .__fxprintf                 #  141   0x136f30  5      OPC=callq_label     
  movq %r12, %rdi                   #  142   0x136f35  3      OPC=movq_r64_r64    
  callq .L_1f8c0                    #  143   0x136f38  5      OPC=callq_label     
  movq %rbp, %rdi                   #  144   0x136f3d  3      OPC=movq_r64_r64    
  callq .L_1f8c0                    #  145   0x136f40  5      OPC=callq_label     
  xorl %eax, %eax                   #  146   0x136f45  2      OPC=xorl_r32_r32    
  jmpq .L_136de9                    #  147   0x136f47  5      OPC=jmpq_label_1    
.L_136f46:                          #        0x136f4c  0      OPC=<label>         
  leaq 0x59ac3(%rip), %rsi          #  148   0x136f4c  7      OPC=leaq_r64_m16    
  leaq 0x53648(%rip), %rdi          #  149   0x136f53  7      OPC=leaq_r64_m16    
  movl $0x5, %edx                   #  150   0x136f5a  5      OPC=movl_r32_imm32  
  callq .__dcgettext                #  151   0x136f5f  5      OPC=callq_label     
  movq %rax, %rdi                   #  152   0x136f64  3      OPC=movq_r64_r64    
  callq .perror                     #  153   0x136f67  5      OPC=callq_label     
  xorl %eax, %eax                   #  154   0x136f6c  2      OPC=xorl_r32_r32    
  jmpq .L_136de9                    #  155   0x136f6e  5      OPC=jmpq_label_1    
  nop                               #  156   0x136f73  1      OPC=nop             
  nop                               #  157   0x136f74  1      OPC=nop             
  nop                               #  158   0x136f75  1      OPC=nop             
                                                                                  
.size svctcp_create_GLIBC_2_2_5, .-svctcp_create_GLIBC_2_2_5

