  .text
  .globl calc_eclosure_iter
  .type calc_eclosure_iter, @function

#! file-offset 0xbcd60
#! rip-offset  0xbcd60
#! capacity    547 bytes

# Text                                #  Line  RIP      Bytes  Opcode               
.calc_eclosure_iter:                  #        0xbcd60  0      OPC=<label>          
  pushq %r15                          #  1     0xbcd60  2      OPC=pushq_r64_1      
  pushq %r14                          #  2     0xbcd62  2      OPC=pushq_r64_1      
  pushq %r13                          #  3     0xbcd64  2      OPC=pushq_r64_1      
  pushq %r12                          #  4     0xbcd66  2      OPC=pushq_r64_1      
  pushq %rbp                          #  5     0xbcd68  1      OPC=pushq_r64_1      
  pushq %rbx                          #  6     0xbcd69  1      OPC=pushq_r64_1      
  subq $0x48, %rsp                    #  7     0xbcd6a  4      OPC=subq_r64_imm8    
  movq %rdi, 0x10(%rsp)               #  8     0xbcd6e  5      OPC=movq_m64_r64     
  movq %rsi, %r12                     #  9     0xbcd73  3      OPC=movq_r64_r64     
  movl %edx, 0x18(%rsp)               #  10    0xbcd76  4      OPC=movl_m32_r32     
  movl %ecx, 0x1c(%rsp)               #  11    0xbcd7a  4      OPC=movl_m32_r32     
  movslq %edx, %r13                   #  12    0xbcd7e  3      OPC=movslq_r64_r32   
  shlq $0x4, %r13                     #  13    0xbcd81  4      OPC=shlq_r64_imm8    
  movq 0x28(%rsi), %rax               #  14    0xbcd85  4      OPC=movq_r64_m64     
  movl 0x4(%rax,%r13,1), %esi         #  15    0xbcd89  5      OPC=movl_r32_m32     
  addl $0x1, %esi                     #  16    0xbcd8e  3      OPC=addl_r32_imm8    
  leaq 0x30(%rsp), %rdi               #  17    0xbcd91  5      OPC=leaq_r64_m16     
  callq .re_node_set_alloc            #  18    0xbcd96  5      OPC=callq_label      
  movl %eax, %edx                     #  19    0xbcd9b  2      OPC=movl_r32_r32     
  testl %eax, %eax                    #  20    0xbcd9d  2      OPC=testl_r32_r32    
  jne .L_bcf72                        #  21    0xbcd9f  6      OPC=jne_label_1      
  movq 0x30(%r12), %rax               #  22    0xbcda5  5      OPC=movq_r64_m64     
  movl $0xffffffff, 0x4(%rax,%r13,1)  #  23    0xbcdaa  9      OPC=movl_m32_imm32   
  movq (%r12), %rax                   #  24    0xbcdb3  4      OPC=movq_r64_m64     
  leaq (%rax,%r13,1), %rdx            #  25    0xbcdb7  4      OPC=leaq_r64_m16     
  testl $0x3ff00, 0x8(%rdx)           #  26    0xbcdbb  7      OPC=testl_m32_imm32  
  je .L_bce11                         #  27    0xbcdc2  2      OPC=je_label         
  movq %r13, %rcx                     #  28    0xbcdc4  3      OPC=movq_r64_r64     
  addq 0x28(%r12), %rcx               #  29    0xbcdc7  5      OPC=addq_r64_m64     
  cmpl $0x0, 0x4(%rcx)                #  30    0xbcdcc  4      OPC=cmpl_m32_imm8    
  je .L_bcf5b                         #  31    0xbcdd0  6      OPC=je_label_1       
  movq 0x8(%rcx), %rcx                #  32    0xbcdd6  4      OPC=movq_r64_m64     
  movslq (%rcx), %rcx                 #  33    0xbcdda  3      OPC=movslq_r64_m32   
  shlq $0x4, %rcx                     #  34    0xbcddd  4      OPC=shlq_r64_imm8    
  testb $0x4, 0xa(%rax,%rcx,1)        #  35    0xbcde1  5      OPC=testb_m8_imm8    
  jne .L_bce11                        #  36    0xbcde6  2      OPC=jne_label        
  movl 0x8(%rdx), %r8d                #  37    0xbcde8  4      OPC=movl_r32_m32     
  shrl $0x8, %r8d                     #  38    0xbcdec  4      OPC=shrl_r32_imm8    
  andl $0x3ff, %r8d                   #  39    0xbcdf0  7      OPC=andl_r32_imm32   
  movl 0x18(%rsp), %esi               #  40    0xbcdf7  4      OPC=movl_r32_m32     
  movl %esi, %ecx                     #  41    0xbcdfb  2      OPC=movl_r32_r32     
  movl %esi, %edx                     #  42    0xbcdfd  2      OPC=movl_r32_r32     
  movq %r12, %rdi                     #  43    0xbcdff  3      OPC=movq_r64_r64     
  callq .duplicate_node_closure       #  44    0xbce02  5      OPC=callq_label      
  movl %eax, %edx                     #  45    0xbce07  2      OPC=movl_r32_r32     
  testl %eax, %eax                    #  46    0xbce09  2      OPC=testl_r32_r32    
  jne .L_bcf72                        #  47    0xbce0b  6      OPC=jne_label_1      
.L_bce11:                             #        0xbce11  0      OPC=<label>          
  movq (%r12), %rax                   #  48    0xbce11  4      OPC=movq_r64_m64     
  testb $0x8, 0x8(%rax,%r13,1)        #  49    0xbce15  6      OPC=testb_m8_imm8    
  je .L_bcf5b                         #  50    0xbce1b  6      OPC=je_label_1       
  movq %r13, %rdx                     #  51    0xbce21  3      OPC=movq_r64_r64     
  addq 0x28(%r12), %rdx               #  52    0xbce24  5      OPC=addq_r64_m64     
  cmpl $0x0, 0x4(%rdx)                #  53    0xbce29  4      OPC=cmpl_m32_imm8    
  jle .L_bcf5b                        #  54    0xbce2d  6      OPC=jle_label_1      
  movl $0x0, 0xc(%rsp)                #  55    0xbce33  8      OPC=movl_m32_imm32   
  movl $0x0, %ebp                     #  56    0xbce3b  5      OPC=movl_r32_imm32   
  leaq 0x20(%rsp), %r14               #  57    0xbce40  5      OPC=leaq_r64_m16     
  leaq 0x30(%rsp), %r15               #  58    0xbce45  5      OPC=leaq_r64_m16     
.L_bce4a:                             #        0xbce4a  0      OPC=<label>          
  movslq %ebp, %rax                   #  59    0xbce4a  3      OPC=movslq_r64_r32   
  movq 0x8(%rdx), %rdx                #  60    0xbce4d  4      OPC=movq_r64_m64     
  movl (%rdx,%rax,4), %edx            #  61    0xbce51  3      OPC=movl_r32_m32     
  movslq %edx, %rbx                   #  62    0xbce54  3      OPC=movslq_r64_r32   
  shlq $0x4, %rbx                     #  63    0xbce57  4      OPC=shlq_r64_imm8    
  movq %rbx, %rcx                     #  64    0xbce5b  3      OPC=movq_r64_r64     
  addq 0x30(%r12), %rcx               #  65    0xbce5e  5      OPC=addq_r64_m64     
  movl 0x4(%rcx), %eax                #  66    0xbce63  3      OPC=movl_r32_m32     
  cmpl $0xffffffff, %eax              #  67    0xbce66  6      OPC=cmpl_r32_imm32   
  nop                                 #  68    0xbce6c  1      OPC=nop              
  nop                                 #  69    0xbce6d  1      OPC=nop              
  nop                                 #  70    0xbce6e  1      OPC=nop              
  jne .L_bce75                        #  71    0xbce6f  2      OPC=jne_label        
  movl $0x1, 0xc(%rsp)                #  72    0xbce71  8      OPC=movl_m32_imm32   
  jmpq .L_bcedd                       #  73    0xbce79  2      OPC=jmpq_label       
.L_bce75:                             #        0xbce7b  0      OPC=<label>          
  testl %eax, %eax                    #  74    0xbce7b  2      OPC=testl_r32_r32    
  jne .L_bce8f                        #  75    0xbce7d  2      OPC=jne_label        
  movl $0x0, %ecx                     #  76    0xbce7f  5      OPC=movl_r32_imm32   
  movq %r12, %rsi                     #  77    0xbce84  3      OPC=movq_r64_r64     
  movq %r14, %rdi                     #  78    0xbce87  3      OPC=movq_r64_r64     
  callq .calc_eclosure_iter           #  79    0xbce8a  5      OPC=callq_label      
  testl %eax, %eax                    #  80    0xbce8f  2      OPC=testl_r32_r32    
  je .L_bcea0                         #  81    0xbce91  2      OPC=je_label         
  jmpq .L_bcecf                       #  82    0xbce93  2      OPC=jmpq_label       
.L_bce8f:                             #        0xbce95  0      OPC=<label>          
  movq (%rcx), %rax                   #  83    0xbce95  3      OPC=movq_r64_m64     
  movq 0x8(%rcx), %rdx                #  84    0xbce98  4      OPC=movq_r64_m64     
  movq %rax, 0x20(%rsp)               #  85    0xbce9c  5      OPC=movq_m64_r64     
  movq %rdx, 0x28(%rsp)               #  86    0xbcea1  5      OPC=movq_m64_r64     
.L_bcea0:                             #        0xbcea6  0      OPC=<label>          
  movq %r14, %rsi                     #  87    0xbcea6  3      OPC=movq_r64_r64     
  movq %r15, %rdi                     #  88    0xbcea9  3      OPC=movq_r64_r64     
  callq .re_node_set_merge            #  89    0xbceac  5      OPC=callq_label      
  testl %eax, %eax                    #  90    0xbceb1  2      OPC=testl_r32_r32    
  jne .L_bced6                        #  91    0xbceb3  2      OPC=jne_label        
  movq 0x30(%r12), %rax               #  92    0xbceb5  5      OPC=movq_r64_m64     
  cmpl $0x0, 0x4(%rax,%rbx,1)         #  93    0xbceba  5      OPC=cmpl_m32_imm8    
  jne .L_bcedd                        #  94    0xbcebf  2      OPC=jne_label        
  movq 0x28(%rsp), %rdi               #  95    0xbcec1  5      OPC=movq_r64_m64     
  callq .L_1f8d0                      #  96    0xbcec6  5      OPC=callq_label      
  movl $0x1, 0xc(%rsp)                #  97    0xbcecb  8      OPC=movl_m32_imm32   
  jmpq .L_bcedd                       #  98    0xbced3  2      OPC=jmpq_label       
.L_bcecf:                             #        0xbced5  0      OPC=<label>          
  movl %eax, %edx                     #  99    0xbced5  2      OPC=movl_r32_r32     
  jmpq .L_bcf72                       #  100   0xbced7  5      OPC=jmpq_label_1     
.L_bced6:                             #        0xbcedc  0      OPC=<label>          
  movl %eax, %edx                     #  101   0xbcedc  2      OPC=movl_r32_r32     
  jmpq .L_bcf72                       #  102   0xbcede  5      OPC=jmpq_label_1     
.L_bcedd:                             #        0xbcee3  0      OPC=<label>          
  addl $0x1, %ebp                     #  103   0xbcee3  3      OPC=addl_r32_imm8    
  movq %r13, %rdx                     #  104   0xbcee6  3      OPC=movq_r64_r64     
  addq 0x28(%r12), %rdx               #  105   0xbcee9  5      OPC=addq_r64_m64     
  cmpl %ebp, 0x4(%rdx)                #  106   0xbceee  3      OPC=cmpl_m32_r32     
  jg .L_bce4a                         #  107   0xbcef1  6      OPC=jg_label_1       
  leaq 0x30(%rsp), %rdi               #  108   0xbcef7  5      OPC=leaq_r64_m16     
  movl 0x18(%rsp), %esi               #  109   0xbcefc  4      OPC=movl_r32_m32     
  callq .re_node_set_insert           #  110   0xbcf00  5      OPC=callq_label      
  movl $0xc, %edx                     #  111   0xbcf05  5      OPC=movl_r32_imm32   
  testl %eax, %eax                    #  112   0xbcf0a  2      OPC=testl_r32_r32    
  js .L_bcf72                         #  113   0xbcf0c  2      OPC=js_label         
  cmpl $0x0, 0xc(%rsp)                #  114   0xbcf0e  5      OPC=cmpl_m32_imm8    
  je .L_bcf26                         #  115   0xbcf13  2      OPC=je_label         
  cmpl $0x0, 0x1c(%rsp)               #  116   0xbcf15  5      OPC=cmpl_m32_imm8    
  jne .L_bcf26                        #  117   0xbcf1a  2      OPC=jne_label        
  movq 0x30(%r12), %rax               #  118   0xbcf1c  5      OPC=movq_r64_m64     
  movl $0x0, 0x4(%rax,%r13,1)         #  119   0xbcf21  9      OPC=movl_m32_imm32   
  jmpq .L_bcf3e                       #  120   0xbcf2a  2      OPC=jmpq_label       
.L_bcf26:                             #        0xbcf2c  0      OPC=<label>          
  movq 0x30(%r12), %rax               #  121   0xbcf2c  5      OPC=movq_r64_m64     
  movq 0x30(%rsp), %rcx               #  122   0xbcf31  5      OPC=movq_r64_m64     
  movq 0x38(%rsp), %rbx               #  123   0xbcf36  5      OPC=movq_r64_m64     
  movq %rcx, (%rax,%r13,1)            #  124   0xbcf3b  4      OPC=movq_m64_r64     
  movq %rbx, 0x8(%rax,%r13,1)         #  125   0xbcf3f  5      OPC=movq_m64_r64     
.L_bcf3e:                             #        0xbcf44  0      OPC=<label>          
  movq 0x30(%rsp), %rax               #  126   0xbcf44  5      OPC=movq_r64_m64     
  movq 0x38(%rsp), %rdx               #  127   0xbcf49  5      OPC=movq_r64_m64     
  movq 0x10(%rsp), %rsi               #  128   0xbcf4e  5      OPC=movq_r64_m64     
  movq %rax, (%rsi)                   #  129   0xbcf53  3      OPC=movq_m64_r64     
  movq %rdx, 0x8(%rsi)                #  130   0xbcf56  4      OPC=movq_m64_r64     
  movl $0x0, %edx                     #  131   0xbcf5a  5      OPC=movl_r32_imm32   
  jmpq .L_bcf72                       #  132   0xbcf5f  2      OPC=jmpq_label       
.L_bcf5b:                             #        0xbcf61  0      OPC=<label>          
  leaq 0x30(%rsp), %rdi               #  133   0xbcf61  5      OPC=leaq_r64_m16     
  movl 0x18(%rsp), %esi               #  134   0xbcf66  4      OPC=movl_r32_m32     
  callq .re_node_set_insert           #  135   0xbcf6a  5      OPC=callq_label      
  movl $0xc, %edx                     #  136   0xbcf6f  5      OPC=movl_r32_imm32   
  testl %eax, %eax                    #  137   0xbcf74  2      OPC=testl_r32_r32    
  jns .L_bcf26                        #  138   0xbcf76  2      OPC=jns_label        
.L_bcf72:                             #        0xbcf78  0      OPC=<label>          
  movl %edx, %eax                     #  139   0xbcf78  2      OPC=movl_r32_r32     
  addq $0x48, %rsp                    #  140   0xbcf7a  4      OPC=addq_r64_imm8    
  popq %rbx                           #  141   0xbcf7e  1      OPC=popq_r64_1       
  popq %rbp                           #  142   0xbcf7f  1      OPC=popq_r64_1       
  popq %r12                           #  143   0xbcf80  2      OPC=popq_r64_1       
  popq %r13                           #  144   0xbcf82  2      OPC=popq_r64_1       
  popq %r14                           #  145   0xbcf84  2      OPC=popq_r64_1       
  popq %r15                           #  146   0xbcf86  2      OPC=popq_r64_1       
  retq                                #  147   0xbcf88  1      OPC=retq             
                                                                                    
.size calc_eclosure_iter, .-calc_eclosure_iter

