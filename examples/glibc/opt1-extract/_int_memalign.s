  .text
  .globl _int_memalign
  .type _int_memalign, @function

#! file-offset 0x73ddd
#! rip-offset  0x73ddd
#! capacity    489 bytes

# Text                          #  Line  RIP      Bytes  Opcode               
._int_memalign:                 #        0x73ddd  0      OPC=<label>          
  cmpq $0xbf, %rdx              #  1     0x73ddd  4      OPC=cmpq_r64_imm8    
  jbe .L_73df7                  #  2     0x73de1  2      OPC=jbe_label        
  movq 0x317096(%rip), %rax     #  3     0x73de3  7      OPC=movq_r64_m64     
  movl $0xc, (%rax)             #  4     0x73dea  6      OPC=movl_m32_imm32   
  nop                           #  5     0x73df0  1      OPC=nop              
  movl $0x0, %eax               #  6     0x73df1  5      OPC=movl_r32_imm32   
  retq                          #  7     0x73df6  1      OPC=retq             
.L_73df7:                       #        0x73df7  0      OPC=<label>          
  pushq %r15                    #  8     0x73df7  2      OPC=pushq_r64_1      
  pushq %r14                    #  9     0x73df9  2      OPC=pushq_r64_1      
  pushq %r13                    #  10    0x73dfb  2      OPC=pushq_r64_1      
  pushq %r12                    #  11    0x73dfd  2      OPC=pushq_r64_1      
  pushq %rbp                    #  12    0x73dff  1      OPC=pushq_r64_1      
  pushq %rbx                    #  13    0x73e00  1      OPC=pushq_r64_1      
  subq $0x8, %rsp               #  14    0x73e01  4      OPC=subq_r64_imm8    
  movq %rsi, %rbx               #  15    0x73e05  3      OPC=movq_r64_r64     
  movq %rdi, %r13               #  16    0x73e08  3      OPC=movq_r64_r64     
  addq $0x17, %rdx              #  17    0x73e0b  4      OPC=addq_r64_imm8    
  movq %rdx, %r14               #  18    0x73e0f  3      OPC=movq_r64_r64     
  andq $0xf0, %r14              #  19    0x73e12  4      OPC=andq_r64_imm8    
  cmpq $0x20, %rdx              #  20    0x73e16  4      OPC=cmpq_r64_imm8    
  movl $0x20, %eax              #  21    0x73e1a  5      OPC=movl_r32_imm32   
  cmovbq %rax, %r14             #  22    0x73e1f  4      OPC=cmovbq_r64_r64   
  leaq 0x20(%r14,%rsi,1), %rsi  #  23    0x73e23  5      OPC=leaq_r64_m16     
  callq ._int_malloc            #  24    0x73e28  5      OPC=callq_label      
  movq %rax, %rcx               #  25    0x73e2d  3      OPC=movq_r64_r64     
  testq %rax, %rax              #  26    0x73e30  3      OPC=testq_r64_r64    
  je .L_73f71                   #  27    0x73e33  6      OPC=je_label_1       
  leaq -0x10(%rax), %r12        #  28    0x73e39  4      OPC=leaq_r64_m16     
  movl $0x0, %edx               #  29    0x73e3d  5      OPC=movl_r32_imm32   
  divq %rbx                     #  30    0x73e42  3      OPC=divq_r64         
  testq %rdx, %rdx              #  31    0x73e45  3      OPC=testq_r64_r64    
  je .L_73f0e                   #  32    0x73e48  6      OPC=je_label_1       
  leaq -0x1(%rcx,%rbx,1), %rbp  #  33    0x73e4e  5      OPC=leaq_r64_m16     
  movq %rbx, %rdx               #  34    0x73e53  3      OPC=movq_r64_r64     
  negq %rdx                     #  35    0x73e56  3      OPC=negq_r64         
  andq %rdx, %rbp               #  36    0x73e59  3      OPC=andq_r64_r64     
  leaq -0x10(%rbp), %rax        #  37    0x73e5c  4      OPC=leaq_r64_m16     
  movq %rax, %rdx               #  38    0x73e60  3      OPC=movq_r64_r64     
  subq %r12, %rdx               #  39    0x73e63  3      OPC=subq_r64_r64     
  leaq (%rax,%rbx,1), %rbp      #  40    0x73e66  4      OPC=leaq_r64_m16     
  cmpq $0x1f, %rdx              #  41    0x73e6a  4      OPC=cmpq_r64_imm8    
  cmovaq %rax, %rbp             #  42    0x73e6e  4      OPC=cmovaq_r64_r64   
  movq %rbp, %rsi               #  43    0x73e72  3      OPC=movq_r64_r64     
  subq %r12, %rsi               #  44    0x73e75  3      OPC=subq_r64_r64     
  movq -0x8(%rcx), %rax         #  45    0x73e78  4      OPC=movq_r64_m64     
  movq %rax, %r15               #  46    0x73e7c  3      OPC=movq_r64_r64     
  andq $0xf8, %r15              #  47    0x73e7f  4      OPC=andq_r64_imm8    
  subq %rsi, %r15               #  48    0x73e83  3      OPC=subq_r64_r64     
  andl $0x2, %eax               #  49    0x73e86  3      OPC=andl_r32_imm8    
  je .L_73ea7                   #  50    0x73e89  2      OPC=je_label         
  movq %rsi, %rax               #  51    0x73e8b  3      OPC=movq_r64_r64     
  addq -0x10(%rcx), %rax        #  52    0x73e8e  4      OPC=addq_r64_m64     
  movq %rax, (%rbp)             #  53    0x73e92  4      OPC=movq_m64_r64     
  orq $0x2, %r15                #  54    0x73e96  4      OPC=orq_r64_imm8     
  movq %r15, 0x8(%rbp)          #  55    0x73e9a  4      OPC=movq_m64_r64     
  leaq 0x10(%rbp), %rax         #  56    0x73e9e  4      OPC=leaq_r64_m16     
  jmpq .L_73fb7                 #  57    0x73ea2  5      OPC=jmpq_label_1     
.L_73ea7:                       #        0x73ea7  0      OPC=<label>          
  leaq 0x317d92(%rip), %rdx     #  58    0x73ea7  7      OPC=leaq_r64_m16     
  cmpq %rdx, %r13               #  59    0x73eae  3      OPC=cmpq_r64_r64     
  jne .L_73f78                  #  60    0x73eb1  6      OPC=jne_label_1      
  jmpq .L_73f9a                 #  61    0x73eb7  5      OPC=jmpq_label_1     
.L_73ebc:                       #        0x73ebc  0      OPC=<label>          
  orq %rdx, %rax                #  62    0x73ebc  3      OPC=orq_r64_r64      
  orq %rsi, %rax                #  63    0x73ebf  3      OPC=orq_r64_r64      
  movq %rax, -0x8(%rcx)         #  64    0x73ec2  4      OPC=movq_m64_r64     
  movl $0x1, %edx               #  65    0x73ec6  5      OPC=movl_r32_imm32   
  movq %r12, %rsi               #  66    0x73ecb  3      OPC=movq_r64_r64     
  movq %r13, %rdi               #  67    0x73ece  3      OPC=movq_r64_r64     
  callq ._int_free              #  68    0x73ed1  5      OPC=callq_label      
  cmpq %r15, %r14               #  69    0x73ed6  3      OPC=cmpq_r64_r64     
  ja .L_73eec                   #  70    0x73ed9  2      OPC=ja_label         
  leaq 0x10(%rbp), %rax         #  71    0x73edb  4      OPC=leaq_r64_m16     
  movl $0x0, %edx               #  72    0x73edf  5      OPC=movl_r32_imm32   
  divq %rbx                     #  73    0x73ee4  3      OPC=divq_r64         
  testq %rdx, %rdx              #  74    0x73ee7  3      OPC=testq_r64_r64    
  je .L_73f0b                   #  75    0x73eea  2      OPC=je_label         
.L_73eec:                       #        0x73eec  0      OPC=<label>          
  leaq 0xe4d8d(%rip), %rcx      #  76    0x73eec  7      OPC=leaq_r64_m16     
  movl $0x1170, %edx            #  77    0x73ef3  5      OPC=movl_r32_imm32   
  leaq 0xe4a20(%rip), %rsi      #  78    0x73ef8  7      OPC=leaq_r64_m16     
  leaq 0xe848a(%rip), %rdi      #  79    0x73eff  7      OPC=leaq_r64_m16     
  callq .__malloc_assert        #  80    0x73f06  5      OPC=callq_label      
.L_73f0b:                       #        0x73f0b  0      OPC=<label>          
  movq %rbp, %r12               #  81    0x73f0b  3      OPC=movq_r64_r64     
.L_73f0e:                       #        0x73f0e  0      OPC=<label>          
  movq 0x8(%r12), %rax          #  82    0x73f0e  5      OPC=movq_r64_m64     
  movq %rax, %rdx               #  83    0x73f13  3      OPC=movq_r64_r64     
  andl $0x2, %edx               #  84    0x73f16  3      OPC=andl_r32_imm8    
  jne .L_73f6a                  #  85    0x73f19  2      OPC=jne_label        
  andq $0xf8, %rax              #  86    0x73f1b  4      OPC=andq_r64_imm8    
  leaq 0x20(%r14), %rcx         #  87    0x73f1f  4      OPC=leaq_r64_m16     
  cmpq %rcx, %rax               #  88    0x73f23  3      OPC=cmpq_r64_r64     
  jbe .L_73f6a                  #  89    0x73f26  2      OPC=jbe_label        
  subq %r14, %rax               #  90    0x73f28  3      OPC=subq_r64_r64     
  leaq (%r12,%r14,1), %rsi      #  91    0x73f2b  4      OPC=leaq_r64_m16     
  leaq 0x317d0a(%rip), %rcx     #  92    0x73f2f  7      OPC=leaq_r64_m16     
  cmpq %rcx, %r13               #  93    0x73f36  3      OPC=cmpq_r64_r64     
  movl $0x4, %ecx               #  94    0x73f39  5      OPC=movl_r32_imm32   
  cmovneq %rcx, %rdx            #  95    0x73f3e  4      OPC=cmovneq_r64_r64  
  orq $0x1, %rax                #  96    0x73f42  4      OPC=orq_r64_imm8     
  orq %rdx, %rax                #  97    0x73f46  3      OPC=orq_r64_r64      
  movq %rax, 0x8(%rsi)          #  98    0x73f49  4      OPC=movq_m64_r64     
  movq 0x8(%r12), %rax          #  99    0x73f4d  5      OPC=movq_r64_m64     
  andl $0x7, %eax               #  100   0x73f52  3      OPC=andl_r32_imm8    
  orq %rax, %r14                #  101   0x73f55  3      OPC=orq_r64_r64      
  movq %r14, 0x8(%r12)          #  102   0x73f58  5      OPC=movq_m64_r64     
  movl $0x1, %edx               #  103   0x73f5d  5      OPC=movl_r32_imm32   
  movq %r13, %rdi               #  104   0x73f62  3      OPC=movq_r64_r64     
  callq ._int_free              #  105   0x73f65  5      OPC=callq_label      
.L_73f6a:                       #        0x73f6a  0      OPC=<label>          
  leaq 0x10(%r12), %rax         #  106   0x73f6a  5      OPC=leaq_r64_m16     
  jmpq .L_73fb7                 #  107   0x73f6f  2      OPC=jmpq_label       
.L_73f71:                       #        0x73f71  0      OPC=<label>          
  movl $0x0, %eax               #  108   0x73f71  5      OPC=movl_r32_imm32   
  jmpq .L_73fb7                 #  109   0x73f76  2      OPC=jmpq_label       
.L_73f78:                       #        0x73f78  0      OPC=<label>          
  movq %r15, %rax               #  110   0x73f78  3      OPC=movq_r64_r64     
  orq $0x5, %rax                #  111   0x73f7b  4      OPC=orq_r64_imm8     
  movq %rax, 0x8(%rbp)          #  112   0x73f7f  4      OPC=movq_m64_r64     
  orq $0x1, 0x8(%rbp,%r15,1)    #  113   0x73f83  6      OPC=orq_m64_imm8     
  movq -0x8(%rcx), %rdx         #  114   0x73f89  4      OPC=movq_r64_m64     
  andl $0x7, %edx               #  115   0x73f8d  3      OPC=andl_r32_imm8    
  movl $0x4, %eax               #  116   0x73f90  5      OPC=movl_r32_imm32   
  jmpq .L_73ebc                 #  117   0x73f95  5      OPC=jmpq_label_1     
.L_73f9a:                       #        0x73f9a  0      OPC=<label>          
  movq %r15, %rdx               #  118   0x73f9a  3      OPC=movq_r64_r64     
  orq $0x1, %rdx                #  119   0x73f9d  4      OPC=orq_r64_imm8     
  movq %rdx, 0x8(%rbp)          #  120   0x73fa1  4      OPC=movq_m64_r64     
  orq $0x1, 0x8(%rbp,%r15,1)    #  121   0x73fa5  6      OPC=orq_m64_imm8     
  movq -0x8(%rcx), %rdx         #  122   0x73fab  4      OPC=movq_r64_m64     
  andl $0x7, %edx               #  123   0x73faf  3      OPC=andl_r32_imm8    
  jmpq .L_73ebc                 #  124   0x73fb2  5      OPC=jmpq_label_1     
.L_73fb7:                       #        0x73fb7  0      OPC=<label>          
  addq $0x8, %rsp               #  125   0x73fb7  4      OPC=addq_r64_imm8    
  popq %rbx                     #  126   0x73fbb  1      OPC=popq_r64_1       
  popq %rbp                     #  127   0x73fbc  1      OPC=popq_r64_1       
  popq %r12                     #  128   0x73fbd  2      OPC=popq_r64_1       
  popq %r13                     #  129   0x73fbf  2      OPC=popq_r64_1       
  popq %r14                     #  130   0x73fc1  2      OPC=popq_r64_1       
  popq %r15                     #  131   0x73fc3  2      OPC=popq_r64_1       
  retq                          #  132   0x73fc5  1      OPC=retq             
                                                                              
.size _int_memalign, .-_int_memalign

