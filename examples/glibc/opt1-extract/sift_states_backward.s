  .text
  .globl sift_states_backward
  .type sift_states_backward, @function

#! file-offset 0xc26cc
#! rip-offset  0xc26cc
#! capacity    688 bytes

# Text                            #  Line  RIP      Bytes  Opcode               
.sift_states_backward:            #        0xc26cc  0      OPC=<label>          
  pushq %r15                      #  1     0xc26cc  2      OPC=pushq_r64_1      
  pushq %r14                      #  2     0xc26ce  2      OPC=pushq_r64_1      
  pushq %r13                      #  3     0xc26d0  2      OPC=pushq_r64_1      
  pushq %r12                      #  4     0xc26d2  2      OPC=pushq_r64_1      
  pushq %rbp                      #  5     0xc26d4  1      OPC=pushq_r64_1      
  pushq %rbx                      #  6     0xc26d5  1      OPC=pushq_r64_1      
  subq $0x58, %rsp                #  7     0xc26d6  4      OPC=subq_r64_imm8    
  movq %rdi, (%rsp)               #  8     0xc26da  4      OPC=movq_m64_r64     
  movq %rsi, %rax                 #  9     0xc26de  3      OPC=movq_r64_r64     
  movq %rsi, 0x8(%rsp)            #  10    0xc26e1  5      OPC=movq_m64_r64     
  movl 0x14(%rsi), %esi           #  11    0xc26e6  3      OPC=movl_r32_m32     
  movl %esi, 0x10(%rsp)           #  12    0xc26e9  4      OPC=movl_m32_r32     
  movl 0x10(%rax), %esi           #  13    0xc26ed  3      OPC=movl_r32_m32     
  leaq 0x40(%rsp), %rdi           #  14    0xc26f0  5      OPC=leaq_r64_m16     
  callq .re_node_set_init_1       #  15    0xc26f5  5      OPC=callq_label      
  movl %eax, %ebx                 #  16    0xc26fa  2      OPC=movl_r32_r32     
  testl %eax, %eax                #  17    0xc26fc  2      OPC=testl_r32_r32    
  jne .L_c296b                    #  18    0xc26fe  6      OPC=jne_label_1      
  leaq 0x40(%rsp), %rcx           #  19    0xc2704  5      OPC=leaq_r64_m16     
  movl 0x10(%rsp), %edx           #  20    0xc2709  4      OPC=movl_r32_m32     
  movq 0x8(%rsp), %rsi            #  21    0xc270d  5      OPC=movq_r64_m64     
  movq (%rsp), %rdi               #  22    0xc2712  4      OPC=movq_r64_m64     
  callq .update_cur_sifted_state  #  23    0xc2716  5      OPC=callq_label      
  movl %eax, %ebx                 #  24    0xc271b  2      OPC=movl_r32_r32     
  testl %eax, %eax                #  25    0xc271d  2      OPC=testl_r32_r32    
  je .L_c291a                     #  26    0xc271f  6      OPC=je_label_1       
  jmpq .L_c2943                   #  27    0xc2725  5      OPC=jmpq_label_1     
.L_c272a:                         #        0xc272a  0      OPC=<label>          
  leaq 0x40(%rsp), %rax           #  28    0xc272a  5      OPC=leaq_r64_m16     
  movq %rax, 0x18(%rsp)           #  29    0xc272f  5      OPC=movq_m64_r64     
  movq 0x8(%rsp), %rax            #  30    0xc2734  5      OPC=movq_r64_m64     
  addq $0x18, %rax                #  31    0xc2739  4      OPC=addq_r64_imm8    
  movq %rax, 0x30(%rsp)           #  32    0xc273d  5      OPC=movq_m64_r64     
.L_c2742:                         #        0xc2742  0      OPC=<label>          
  movq 0x8(%rsp), %rax            #  33    0xc2742  5      OPC=movq_r64_m64     
  movq (%rax), %rdi               #  34    0xc2747  3      OPC=movq_r64_m64     
  movslq 0x10(%rsp), %rax         #  35    0xc274a  5      OPC=movslq_r64_m32   
  leaq (,%rax,8), %rdx            #  36    0xc274f  8      OPC=leaq_r64_m16     
  movl 0x3c(%rsp), %ecx           #  37    0xc2757  4      OPC=movl_r32_m32     
  addl $0x1, %ecx                 #  38    0xc275b  3      OPC=addl_r32_imm8    
  cmpq $0x0, (%rdi,%rax,8)        #  39    0xc275e  5      OPC=cmpq_m64_imm8    
  movl $0x0, %eax                 #  40    0xc2763  5      OPC=movl_r32_imm32   
  cmovnel %eax, %ecx              #  41    0xc2768  3      OPC=cmovnel_r32_r32  
  movl %ecx, 0x3c(%rsp)           #  42    0xc276b  4      OPC=movl_m32_r32     
  movq (%rsp), %rax               #  43    0xc276f  4      OPC=movq_r64_m64     
  cmpl 0xa8(%rax), %ecx           #  44    0xc2773  6      OPC=cmpl_r32_m32     
  jle .L_c2799                    #  45    0xc2779  2      OPC=jle_label        
  movl $0x0, %esi                 #  46    0xc277b  5      OPC=movl_r32_imm32   
  callq .__GI_memset              #  47    0xc2780  5      OPC=callq_label      
  movq 0x48(%rsp), %rdi           #  48    0xc2785  5      OPC=movq_r64_m64     
  callq .L_1f8d0                  #  49    0xc278a  5      OPC=callq_label      
  movl $0x0, %ebx                 #  50    0xc278f  5      OPC=movl_r32_imm32   
  jmpq .L_c296b                   #  51    0xc2794  5      OPC=jmpq_label_1     
.L_c2799:                         #        0xc2799  0      OPC=<label>          
  movl $0x0, 0x44(%rsp)           #  52    0xc2799  8      OPC=movl_m32_imm32   
  subl $0x1, 0x10(%rsp)           #  53    0xc27a1  5      OPC=subl_m32_imm8    
  movq (%rsp), %rcx               #  54    0xc27a6  4      OPC=movq_r64_m64     
  movq 0x88(%rcx), %rax           #  55    0xc27aa  7      OPC=movq_r64_m64     
  movq -0x8(%rax,%rdx,1), %r15    #  56    0xc27b1  5      OPC=movq_r64_m64     
  testq %r15, %r15                #  57    0xc27b6  3      OPC=testq_r64_r64    
  je .L_c28fb                     #  58    0xc27b9  6      OPC=je_label_1       
  movq 0x70(%rcx), %r13           #  59    0xc27bf  4      OPC=movq_r64_m64     
  cmpl $0x0, 0x1c(%r15)           #  60    0xc27c3  5      OPC=cmpl_m32_imm8    
  jle .L_c28fb                    #  61    0xc27c8  6      OPC=jle_label_1      
  movq %rdx, 0x28(%rsp)           #  62    0xc27ce  5      OPC=movq_m64_r64     
  movl $0x0, %r14d                #  63    0xc27d3  6      OPC=movl_r32_imm32   
.L_c27d9:                         #        0xc27d9  0      OPC=<label>          
  movslq %r14d, %rax              #  64    0xc27d9  3      OPC=movslq_r64_r32   
  movq 0x20(%r15), %rdx           #  65    0xc27dc  4      OPC=movq_r64_m64     
  movl (%rdx,%rax,4), %ebp        #  66    0xc27e0  3      OPC=movl_r32_m32     
  movslq %ebp, %r12               #  67    0xc27e3  3      OPC=movslq_r64_r32   
  movq %r12, %rbx                 #  68    0xc27e6  3      OPC=movq_r64_r64     
  shlq $0x4, %rbx                 #  69    0xc27e9  4      OPC=shlq_r64_imm8    
  movq (%r13), %rax               #  70    0xc27ed  4      OPC=movq_r64_m64     
  testb $0x10, 0xa(%rax,%rbx,1)   #  71    0xc27f1  5      OPC=testb_m8_imm8    
  je .L_c286a                     #  72    0xc27f6  2      OPC=je_label         
  movq 0x8(%rsp), %rax            #  73    0xc27f8  5      OPC=movq_r64_m64     
  movl 0x14(%rax), %edx           #  74    0xc27fd  3      OPC=movl_r32_m32     
  movl %edx, 0x38(%rsp)           #  75    0xc2800  4      OPC=movl_m32_r32     
  movq (%rsp), %rdx               #  76    0xc2804  4      OPC=movq_r64_m64     
  movq 0x70(%rdx), %rdi           #  77    0xc2808  4      OPC=movq_r64_m64     
  movl 0x10(%rsp), %ecx           #  78    0xc280c  4      OPC=movl_r32_m32     
  movl %ebp, %esi                 #  79    0xc2810  2      OPC=movl_r32_r32     
  movq %rdi, 0x20(%rsp)           #  80    0xc2812  5      OPC=movq_m64_r64     
  callq .check_node_accept_bytes  #  81    0xc2817  5      OPC=callq_label      
  movl %eax, %ecx                 #  82    0xc281c  2      OPC=movl_r32_r32     
  movl %eax, 0x14(%rsp)           #  83    0xc281e  4      OPC=movl_m32_r32     
  testl %eax, %eax                #  84    0xc2822  2      OPC=testl_r32_r32    
  jle .L_c285f                    #  85    0xc2824  2      OPC=jle_label        
  movl 0x10(%rsp), %eax           #  86    0xc2826  4      OPC=movl_r32_m32     
  addl %ecx, %eax                 #  87    0xc282a  2      OPC=addl_r32_r32     
  cmpl %eax, 0x38(%rsp)           #  88    0xc282c  4      OPC=cmpl_m32_r32     
  jl .L_c285f                     #  89    0xc2830  2      OPC=jl_label         
  cltq                            #  90    0xc2832  2      OPC=cltq             
  movq 0x8(%rsp), %rcx            #  91    0xc2834  5      OPC=movq_r64_m64     
  movq (%rcx), %rdx               #  92    0xc2839  3      OPC=movq_r64_m64     
  movq (%rdx,%rax,8), %rdi        #  93    0xc283c  4      OPC=movq_r64_m64     
  testq %rdi, %rdi                #  94    0xc2840  3      OPC=testq_r64_r64    
  je .L_c286a                     #  95    0xc2843  2      OPC=je_label         
  movq 0x20(%rsp), %rax           #  96    0xc2845  5      OPC=movq_r64_m64     
  movq 0x18(%rax), %rax           #  97    0xc284a  4      OPC=movq_r64_m64     
  movl (%rax,%r12,4), %esi        #  98    0xc284e  4      OPC=movl_r32_m32     
  addq $0x8, %rdi                 #  99    0xc2852  4      OPC=addq_r64_imm8    
  callq .re_node_set_contains     #  100   0xc2856  5      OPC=callq_label      
  testl %eax, %eax                #  101   0xc285b  2      OPC=testl_r32_r32    
  je .L_c286a                     #  102   0xc285d  2      OPC=je_label         
.L_c285f:                         #        0xc285f  0      OPC=<label>          
  cmpl $0x0, 0x14(%rsp)           #  103   0xc285f  5      OPC=cmpl_m32_imm8    
  jne .L_c2957                    #  104   0xc2864  6      OPC=jne_label_1      
.L_c286a:                         #        0xc286a  0      OPC=<label>          
  movq %rbx, %rsi                 #  105   0xc286a  3      OPC=movq_r64_r64     
  addq (%r13), %rsi               #  106   0xc286d  4      OPC=addq_r64_m64     
  movl 0x10(%rsp), %edx           #  107   0xc2871  4      OPC=movl_r32_m32     
  movq (%rsp), %rdi               #  108   0xc2875  4      OPC=movq_r64_m64     
  callq .check_node_accept        #  109   0xc2879  5      OPC=callq_label      
  testl %eax, %eax                #  110   0xc287e  2      OPC=testl_r32_r32    
  je .L_c28ed                     #  111   0xc2880  2      OPC=je_label         
  movq 0x8(%rsp), %rax            #  112   0xc2882  5      OPC=movq_r64_m64     
  movq (%rax), %rax               #  113   0xc2887  3      OPC=movq_r64_m64     
  movq 0x28(%rsp), %rcx           #  114   0xc288a  5      OPC=movq_r64_m64     
  movq (%rax,%rcx,1), %rdi        #  115   0xc288f  4      OPC=movq_r64_m64     
  testq %rdi, %rdi                #  116   0xc2893  3      OPC=testq_r64_r64    
  je .L_c28ed                     #  117   0xc2896  2      OPC=je_label         
  movq 0x18(%r13), %rax           #  118   0xc2898  4      OPC=movq_r64_m64     
  movl (%rax,%r12,4), %esi        #  119   0xc289c  4      OPC=movl_r32_m32     
  addq $0x8, %rdi                 #  120   0xc28a0  4      OPC=addq_r64_imm8    
  callq .re_node_set_contains     #  121   0xc28a4  5      OPC=callq_label      
  testl %eax, %eax                #  122   0xc28a9  2      OPC=testl_r32_r32    
  jne .L_c294f                    #  123   0xc28ab  6      OPC=jne_label_1      
  jmpq .L_c28ed                   #  124   0xc28b1  2      OPC=jmpq_label       
.L_c28b3:                         #        0xc28b3  0      OPC=<label>          
  movl 0x14(%rsp), %ecx           #  125   0xc28b3  4      OPC=movl_r32_m32     
  movl 0x10(%rsp), %r9d           #  126   0xc28b7  5      OPC=movl_r32_m32     
  addl %r9d, %ecx                 #  127   0xc28bc  3      OPC=addl_r32_r32     
  movq 0x18(%r13), %rax           #  128   0xc28bf  4      OPC=movq_r64_m64     
  movl (%rax,%r12,4), %edx        #  129   0xc28c3  4      OPC=movl_r32_m32     
  movl %ebp, %r8d                 #  130   0xc28c7  3      OPC=movl_r32_r32     
  movq 0x30(%rsp), %rsi           #  131   0xc28ca  5      OPC=movq_r64_m64     
  movq (%rsp), %rdi               #  132   0xc28cf  4      OPC=movq_r64_m64     
  callq .check_dst_limits         #  133   0xc28d3  5      OPC=callq_label      
  testl %eax, %eax                #  134   0xc28d8  2      OPC=testl_r32_r32    
  jne .L_c28ed                    #  135   0xc28da  2      OPC=jne_label        
.L_c28dc:                         #        0xc28dc  0      OPC=<label>          
  movl %ebp, %esi                 #  136   0xc28dc  2      OPC=movl_r32_r32     
  movq 0x18(%rsp), %rdi           #  137   0xc28de  5      OPC=movq_r64_m64     
  callq .re_node_set_insert       #  138   0xc28e3  5      OPC=callq_label      
  cmpl $0xffffffff, %eax          #  139   0xc28e8  6      OPC=cmpl_r32_imm32   
  nop                             #  140   0xc28ee  1      OPC=nop              
  nop                             #  141   0xc28ef  1      OPC=nop              
  nop                             #  142   0xc28f0  1      OPC=nop              
  je .L_c293e                     #  143   0xc28f1  2      OPC=je_label         
.L_c28ed:                         #        0xc28f3  0      OPC=<label>          
  addl $0x1, %r14d                #  144   0xc28f3  4      OPC=addl_r32_imm8    
  cmpl 0x1c(%r15), %r14d          #  145   0xc28f7  4      OPC=cmpl_r32_m32     
  jl .L_c27d9                     #  146   0xc28fb  6      OPC=jl_label_1       
.L_c28fb:                         #        0xc2901  0      OPC=<label>          
  movq 0x18(%rsp), %rcx           #  147   0xc2901  5      OPC=movq_r64_m64     
  movl 0x10(%rsp), %edx           #  148   0xc2906  4      OPC=movl_r32_m32     
  movq 0x8(%rsp), %rsi            #  149   0xc290a  5      OPC=movq_r64_m64     
  movq (%rsp), %rdi               #  150   0xc290f  4      OPC=movq_r64_m64     
  callq .update_cur_sifted_state  #  151   0xc2913  5      OPC=callq_label      
  testl %eax, %eax                #  152   0xc2918  2      OPC=testl_r32_r32    
  je .L_c292f                     #  153   0xc291a  2      OPC=je_label         
  movl %eax, %ebx                 #  154   0xc291c  2      OPC=movl_r32_r32     
  jmpq .L_c2943                   #  155   0xc291e  2      OPC=jmpq_label       
.L_c291a:                         #        0xc2920  0      OPC=<label>          
  movl $0x0, 0x3c(%rsp)           #  156   0xc2920  8      OPC=movl_m32_imm32   
  cmpl $0x0, 0x10(%rsp)           #  157   0xc2928  5      OPC=cmpl_m32_imm8    
  jg .L_c272a                     #  158   0xc292d  6      OPC=jg_label_1       
  jmpq .L_c2943                   #  159   0xc2933  2      OPC=jmpq_label       
.L_c292f:                         #        0xc2935  0      OPC=<label>          
  cmpl $0x0, 0x10(%rsp)           #  160   0xc2935  5      OPC=cmpl_m32_imm8    
  jne .L_c2742                    #  161   0xc293a  6      OPC=jne_label_1      
  movl %eax, %ebx                 #  162   0xc2940  2      OPC=movl_r32_r32     
  jmpq .L_c2943                   #  163   0xc2942  2      OPC=jmpq_label       
.L_c293e:                         #        0xc2944  0      OPC=<label>          
  movl $0xc, %ebx                 #  164   0xc2944  5      OPC=movl_r32_imm32   
.L_c2943:                         #        0xc2949  0      OPC=<label>          
  movq 0x48(%rsp), %rdi           #  165   0xc2949  5      OPC=movq_r64_m64     
  callq .L_1f8d0                  #  166   0xc294e  5      OPC=callq_label      
  jmpq .L_c296b                   #  167   0xc2953  2      OPC=jmpq_label       
.L_c294f:                         #        0xc2955  0      OPC=<label>          
  movl $0x1, 0x14(%rsp)           #  168   0xc2955  8      OPC=movl_m32_imm32   
.L_c2957:                         #        0xc295d  0      OPC=<label>          
  movq 0x8(%rsp), %rax            #  169   0xc295d  5      OPC=movq_r64_m64     
  cmpl $0x0, 0x1c(%rax)           #  170   0xc2962  4      OPC=cmpl_m32_imm8    
  jne .L_c28b3                    #  171   0xc2966  6      OPC=jne_label_1      
  jmpq .L_c28dc                   #  172   0xc296c  5      OPC=jmpq_label_1     
.L_c296b:                         #        0xc2971  0      OPC=<label>          
  movl %ebx, %eax                 #  173   0xc2971  2      OPC=movl_r32_r32     
  addq $0x58, %rsp                #  174   0xc2973  4      OPC=addq_r64_imm8    
  popq %rbx                       #  175   0xc2977  1      OPC=popq_r64_1       
  popq %rbp                       #  176   0xc2978  1      OPC=popq_r64_1       
  popq %r12                       #  177   0xc2979  2      OPC=popq_r64_1       
  popq %r13                       #  178   0xc297b  2      OPC=popq_r64_1       
  popq %r14                       #  179   0xc297d  2      OPC=popq_r64_1       
  popq %r15                       #  180   0xc297f  2      OPC=popq_r64_1       
  retq                            #  181   0xc2981  1      OPC=retq             
                                                                                
.size sift_states_backward, .-sift_states_backward

