  .text
  .globl _res_hconf_reorder_addrs
  .type _res_hconf_reorder_addrs, @function

#! file-offset 0xfac24
#! rip-offset  0xfac24
#! capacity    702 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
._res_hconf_reorder_addrs:          #        0xfac24  0      OPC=<label>           
  movq 0x29021d(%rip), %rax         #  1     0xfac24  7      OPC=movq_r64_m64      
  testb $0x8, 0x40(%rax)            #  2     0xfac2b  4      OPC=testb_m8_imm8     
  je .L_faee0                       #  3     0xfac2f  6      OPC=je_label_1        
  cmpl $0x2, 0x10(%rdi)             #  4     0xfac35  4      OPC=cmpl_m32_imm8     
  jne .L_faee0                      #  5     0xfac39  6      OPC=jne_label_1       
  pushq %r15                        #  6     0xfac3f  2      OPC=pushq_r64_1       
  pushq %r14                        #  7     0xfac41  2      OPC=pushq_r64_1       
  pushq %r13                        #  8     0xfac43  2      OPC=pushq_r64_1       
  pushq %r12                        #  9     0xfac45  2      OPC=pushq_r64_1       
  pushq %rbp                        #  10    0xfac47  1      OPC=pushq_r64_1       
  pushq %rbx                        #  11    0xfac48  1      OPC=pushq_r64_1       
  subq $0x28, %rsp                  #  12    0xfac49  4      OPC=subq_r64_imm8     
  movq %rdi, %rbx                   #  13    0xfac4d  3      OPC=movq_r64_r64      
  movl 0x290772(%rip), %ebp         #  14    0xfac50  6      OPC=movl_r32_m32      
  testl %ebp, %ebp                  #  15    0xfac56  2      OPC=testl_r32_r32     
  jg .L_fae48                       #  16    0xfac58  6      OPC=jg_label_1        
  movq 0x29021b(%rip), %rax         #  17    0xfac5e  7      OPC=movq_r64_m64      
  movl (%rax), %r15d                #  18    0xfac65  3      OPC=movl_r32_m32      
  nop                               #  19    0xfac68  1      OPC=nop               
  movl $0x0, %edx                   #  20    0xfac69  5      OPC=movl_r32_imm32    
  movl $0x2, %esi                   #  21    0xfac6e  5      OPC=movl_r32_imm32    
  movl $0x2, %edi                   #  22    0xfac73  5      OPC=movl_r32_imm32    
  callq .__socket                   #  23    0xfac78  5      OPC=callq_label       
  movl %eax, %r14d                  #  24    0xfac7d  3      OPC=movl_r32_r32      
  testl %eax, %eax                  #  25    0xfac80  2      OPC=testl_r32_r32     
  js .L_faed2                       #  26    0xfac82  6      OPC=js_label_1        
  movl $0x1, %esi                   #  27    0xfac88  5      OPC=movl_r32_imm32    
  movl $0x0, %eax                   #  28    0xfac8d  5      OPC=movl_r32_imm32    
  cmpl $0x0, 0x295f67(%rip)         #  29    0xfac92  7      OPC=cmpl_m32_imm8     
  je .L_faca7                       #  30    0xfac99  2      OPC=je_label          
  lock                              #  31    0xfac9b  1      OPC=lock              
  cmpxchgl %esi, 0x29521d(%rip)     #  32    0xfac9c  7      OPC=cmpxchgl_m32_r32  
  nop                               #  33    0xfaca3  1      OPC=nop               
  jne .L_facb0                      #  34    0xfaca4  2      OPC=jne_label         
  jmpq .L_facca                     #  35    0xfaca6  2      OPC=jmpq_label        
.L_faca7:                           #        0xfaca8  0      OPC=<label>           
  cmpxchgl %esi, 0x295212(%rip)     #  36    0xfaca8  7      OPC=cmpxchgl_m32_r32  
  je .L_facca                       #  37    0xfacaf  2      OPC=je_label          
.L_facb0:                           #        0xfacb1  0      OPC=<label>           
  leaq 0x295209(%rip), %rdi         #  38    0xfacb1  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  39    0xfacb8  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  40    0xfacbf  5      OPC=callq_label       
  addq $0x80, %rsp                  #  41    0xfacc4  7      OPC=addq_r64_imm32    
.L_facca:                           #        0xfaccb  0      OPC=<label>           
  movl 0x2906f8(%rip), %ebp         #  42    0xfaccb  6      OPC=movl_r32_m32      
  testl %ebp, %ebp                  #  43    0xfacd1  2      OPC=testl_r32_r32     
  jg .L_fae0a                       #  44    0xfacd3  6      OPC=jg_label_1        
  leaq 0x14(%rsp), %rsi             #  45    0xfacd9  5      OPC=leaq_r64_m16      
  leaq 0x18(%rsp), %rdi             #  46    0xfacde  5      OPC=leaq_r64_m16      
  movl %r14d, %edx                  #  47    0xface3  3      OPC=movl_r32_r32      
  callq .__ifreq                    #  48    0xface6  5      OPC=callq_label       
  movq 0x18(%rsp), %r12             #  49    0xfaceb  5      OPC=movq_r64_m64      
  testq %r12, %r12                  #  50    0xfacf0  3      OPC=testq_r64_r64     
  je .L_fadf4                       #  51    0xfacf3  6      OPC=je_label_1        
  movslq 0x14(%rsp), %rax           #  52    0xfacf9  5      OPC=movslq_r64_m32    
  leaq (%rax,%rax,2), %rdi          #  53    0xfacfe  4      OPC=leaq_r64_m16      
  shlq $0x2, %rdi                   #  54    0xfad02  4      OPC=shlq_r64_imm8     
  callq .memalign_plt               #  55    0xfad06  5      OPC=callq_label       
  movq %rax, 0x291ccf(%rip)         #  56    0xfad0b  7      OPC=movq_m64_r64      
  testq %rax, %rax                  #  57    0xfad12  3      OPC=testq_r64_r64     
  je .L_fade3                       #  58    0xfad15  6      OPC=je_label_1        
  cmpl $0x0, 0x14(%rsp)             #  59    0xfad1b  5      OPC=cmpl_m32_imm8     
  jle .L_fad9c                      #  60    0xfad20  2      OPC=jle_label         
  movl $0x0, %ebp                   #  61    0xfad22  5      OPC=movl_r32_imm32    
  movl $0x0, %r13d                  #  62    0xfad27  6      OPC=movl_r32_imm32    
.L_fad2c:                           #        0xfad2d  0      OPC=<label>           
  cmpw $0x2, 0x10(%r12)             #  63    0xfad2d  7      OPC=cmpw_m16_imm8     
  jne .L_fad8b                      #  64    0xfad34  2      OPC=jne_label         
  movslq %ebp, %rax                 #  65    0xfad36  3      OPC=movslq_r64_r32    
  leaq (%rax,%rax,2), %rax          #  66    0xfad39  4      OPC=leaq_r64_m16      
  shlq $0x2, %rax                   #  67    0xfad3d  4      OPC=shlq_r64_imm8     
  movq %rax, 0x8(%rsp)              #  68    0xfad41  5      OPC=movq_m64_r64      
  addq 0x291c94(%rip), %rax         #  69    0xfad46  7      OPC=addq_r64_m64      
  movl $0x2, (%rax)                 #  70    0xfad4d  6      OPC=movl_m32_imm32    
  movl 0x14(%r12), %edx             #  71    0xfad53  5      OPC=movl_r32_m32      
  movl %edx, 0x4(%rax)              #  72    0xfad58  3      OPC=movl_m32_r32      
  movq %r12, %rdx                   #  73    0xfad5b  3      OPC=movq_r64_r64      
  movl $0x891b, %esi                #  74    0xfad5e  5      OPC=movl_r32_imm32    
  movl %r14d, %edi                  #  75    0xfad63  3      OPC=movl_r32_r32      
  movl $0x0, %eax                   #  76    0xfad66  5      OPC=movl_r32_imm32    
  callq .ioctl                      #  77    0xfad6b  5      OPC=callq_label       
  testl %eax, %eax                  #  78    0xfad70  2      OPC=testl_r32_r32     
  js .L_fad8b                       #  79    0xfad72  2      OPC=js_label          
  movl 0x14(%r12), %edx             #  80    0xfad74  5      OPC=movl_r32_m32      
  movq 0x291c61(%rip), %rax         #  81    0xfad79  7      OPC=movq_r64_m64      
  movq 0x8(%rsp), %rsi              #  82    0xfad80  5      OPC=movq_r64_m64      
  movl %edx, 0x8(%rax,%rsi,1)       #  83    0xfad85  4      OPC=movl_m32_r32      
  addl $0x1, %ebp                   #  84    0xfad89  3      OPC=addl_r32_imm8     
.L_fad8b:                           #        0xfad8c  0      OPC=<label>           
  addq $0x28, %r12                  #  85    0xfad8c  4      OPC=addq_r64_imm8     
  addl $0x1, %r13d                  #  86    0xfad90  4      OPC=addl_r32_imm8     
  cmpl %r13d, 0x14(%rsp)            #  87    0xfad94  5      OPC=cmpl_m32_r32      
  jg .L_fad2c                       #  88    0xfad99  2      OPC=jg_label          
  jmpq .L_fada1                     #  89    0xfad9b  2      OPC=jmpq_label        
.L_fad9c:                           #        0xfad9d  0      OPC=<label>           
  movl $0x0, %ebp                   #  90    0xfad9d  5      OPC=movl_r32_imm32    
.L_fada1:                           #        0xfada2  0      OPC=<label>           
  movslq %ebp, %rax                 #  91    0xfada2  3      OPC=movslq_r64_r32    
  leaq (%rax,%rax,2), %rsi          #  92    0xfada5  4      OPC=leaq_r64_m16      
  shlq $0x2, %rsi                   #  93    0xfada9  4      OPC=shlq_r64_imm8     
  movq 0x291c2d(%rip), %rdi         #  94    0xfadad  7      OPC=movq_r64_m64      
  callq .__tls_get_addr_plt         #  95    0xfadb4  5      OPC=callq_label       
  movq %rax, 0x291c21(%rip)         #  96    0xfadb9  7      OPC=movq_m64_r64      
  testq %rax, %rax                  #  97    0xfadc0  3      OPC=testq_r64_r64     
  jne .L_fade8                      #  98    0xfadc3  2      OPC=jne_label         
  leaq 0x63885(%rip), %rcx          #  99    0xfadc5  7      OPC=leaq_r64_m16      
  movl $0x1e5, %edx                 #  100   0xfadcc  5      OPC=movl_r32_imm32    
  leaq 0x5fbde(%rip), %rsi          #  101   0xfadd1  7      OPC=leaq_r64_m16      
  leaq 0x5fbe3(%rip), %rdi          #  102   0xfadd8  7      OPC=leaq_r64_m16      
  callq .__assert_fail              #  103   0xfaddf  5      OPC=callq_label       
.L_fade3:                           #        0xfade4  0      OPC=<label>           
  movl $0x0, %ebp                   #  104   0xfade4  5      OPC=movl_r32_imm32    
.L_fade8:                           #        0xfade9  0      OPC=<label>           
  movq 0x18(%rsp), %rdi             #  105   0xfade9  5      OPC=movq_r64_m64      
  callq .L_1f8d0                    #  106   0xfadee  5      OPC=callq_label       
  jmpq .L_fadf9                     #  107   0xfadf3  2      OPC=jmpq_label        
.L_fadf4:                           #        0xfadf5  0      OPC=<label>           
  movl $0x0, %ebp                   #  108   0xfadf5  5      OPC=movl_r32_imm32    
.L_fadf9:                           #        0xfadfa  0      OPC=<label>           
  movq 0x290080(%rip), %rax         #  109   0xfadfa  7      OPC=movq_r64_m64      
  movl %r15d, (%rax)                #  110   0xfae01  3      OPC=movl_m32_r32      
  nop                               #  111   0xfae04  1      OPC=nop               
  movl %ebp, 0x2905be(%rip)         #  112   0xfae05  6      OPC=movl_m32_r32      
.L_fae0a:                           #        0xfae0b  0      OPC=<label>           
  cmpl $0x0, 0x295def(%rip)         #  113   0xfae0b  7      OPC=cmpl_m32_imm8     
  je .L_fae1e                       #  114   0xfae12  2      OPC=je_label          
  lock                              #  115   0xfae14  1      OPC=lock              
  decl 0x2950a6(%rip)               #  116   0xfae15  6      OPC=decl_m32          
  nop                               #  117   0xfae1b  1      OPC=nop               
  jne .L_fae26                      #  118   0xfae1c  2      OPC=jne_label         
  jmpq .L_fae40                     #  119   0xfae1e  2      OPC=jmpq_label        
.L_fae1e:                           #        0xfae20  0      OPC=<label>           
  decl 0x29509c(%rip)               #  120   0xfae20  6      OPC=decl_m32          
  je .L_fae40                       #  121   0xfae26  2      OPC=je_label          
.L_fae26:                           #        0xfae28  0      OPC=<label>           
  leaq 0x295093(%rip), %rdi         #  122   0xfae28  7      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  123   0xfae2f  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  124   0xfae36  5      OPC=callq_label       
  addq $0x80, %rsp                  #  125   0xfae3b  7      OPC=addq_r64_imm32    
.L_fae40:                           #        0xfae42  0      OPC=<label>           
  movl %r14d, %edi                  #  126   0xfae42  3      OPC=movl_r32_r32      
  callq .__close                    #  127   0xfae45  5      OPC=callq_label       
.L_fae48:                           #        0xfae4a  0      OPC=<label>           
  testl %ebp, %ebp                  #  128   0xfae4a  2      OPC=testl_r32_r32     
  je .L_faed2                       #  129   0xfae4c  6      OPC=je_label_1        
  movq 0x18(%rbx), %r10             #  130   0xfae52  4      OPC=movq_r64_m64      
  movq (%r10), %r11                 #  131   0xfae56  3      OPC=movq_r64_m64      
  testq %r11, %r11                  #  132   0xfae59  3      OPC=testq_r64_r64     
  je .L_faed2                       #  133   0xfae5c  2      OPC=je_label          
  movq 0x291b7d(%rip), %r8          #  134   0xfae5e  7      OPC=movq_r64_m64      
  leal -0x1(%rbp), %eax             #  135   0xfae65  3      OPC=leal_r32_m16      
  leaq (%rax,%rax,2), %rax          #  136   0xfae68  4      OPC=leaq_r64_m16      
  leaq 0x10(,%rax,4), %rsi          #  137   0xfae6c  8      OPC=leaq_r64_m16      
  addq %r8, %rsi                    #  138   0xfae74  3      OPC=addq_r64_r64      
  movq %r11, %r9                    #  139   0xfae77  3      OPC=movq_r64_r64      
  movq %r10, %r13                   #  140   0xfae7a  3      OPC=movq_r64_r64      
  movl $0x0, %r12d                  #  141   0xfae7d  6      OPC=movl_r32_imm32    
  jmpq .L_faeb9                     #  142   0xfae83  2      OPC=jmpq_label        
.L_fae83:                           #        0xfae85  0      OPC=<label>           
  movq %rax, %rdx                   #  143   0xfae85  3      OPC=movq_r64_r64      
  addq $0xc, %rax                   #  144   0xfae88  4      OPC=addq_r64_imm8     
  movl %edi, %ecx                   #  145   0xfae8c  2      OPC=movl_r32_r32      
  xorl (%rdx), %ecx                 #  146   0xfae8e  2      OPC=xorl_r32_m32      
  testl %ecx, 0x4(%rdx)             #  147   0xfae90  3      OPC=testl_m32_r32     
  jne .L_faea0                      #  148   0xfae93  2      OPC=jne_label         
.L_fae93:                           #        0xfae95  0      OPC=<label>           
  movq %r11, (%r13)                 #  149   0xfae95  4      OPC=movq_m64_r64      
  movq 0x18(%rbx), %rax             #  150   0xfae99  4      OPC=movq_r64_m64      
  movq %r9, (%rax)                  #  151   0xfae9d  3      OPC=movq_m64_r64      
  jmpq .L_faed2                     #  152   0xfaea0  2      OPC=jmpq_label        
.L_faea0:                           #        0xfaea2  0      OPC=<label>           
  cmpq %rsi, %rax                   #  153   0xfaea2  3      OPC=cmpq_r64_r64      
  jne .L_fae83                      #  154   0xfaea5  2      OPC=jne_label         
.L_faea5:                           #        0xfaea7  0      OPC=<label>           
  addl $0x1, %r12d                  #  155   0xfaea7  4      OPC=addl_r32_imm8     
  movslq %r12d, %rax                #  156   0xfaeab  3      OPC=movslq_r64_r32    
  leaq (%r10,%rax,8), %r13          #  157   0xfaeae  4      OPC=leaq_r64_m16      
  movq (%r13), %r9                  #  158   0xfaeb2  4      OPC=movq_r64_m64      
  testq %r9, %r9                    #  159   0xfaeb6  3      OPC=testq_r64_r64     
  je .L_faed2                       #  160   0xfaeb9  2      OPC=je_label          
.L_faeb9:                           #        0xfaebb  0      OPC=<label>           
  testl %ebp, %ebp                  #  161   0xfaebb  2      OPC=testl_r32_r32     
  jle .L_faea5                      #  162   0xfaebd  2      OPC=jle_label         
  movl (%r9), %edi                  #  163   0xfaebf  3      OPC=movl_r32_m32      
  movl %edi, %eax                   #  164   0xfaec2  2      OPC=movl_r32_r32      
  xorl 0x4(%r8), %eax               #  165   0xfaec4  4      OPC=xorl_r32_m32      
  testl %eax, 0x8(%r8)              #  166   0xfaec8  4      OPC=testl_m32_r32     
  je .L_fae93                       #  167   0xfaecc  2      OPC=je_label          
  leaq 0x10(%r8), %rax              #  168   0xfaece  4      OPC=leaq_r64_m16      
  jmpq .L_faea0                     #  169   0xfaed2  2      OPC=jmpq_label        
.L_faed2:                           #        0xfaed4  0      OPC=<label>           
  addq $0x28, %rsp                  #  170   0xfaed4  4      OPC=addq_r64_imm8     
  popq %rbx                         #  171   0xfaed8  1      OPC=popq_r64_1        
  popq %rbp                         #  172   0xfaed9  1      OPC=popq_r64_1        
  popq %r12                         #  173   0xfaeda  2      OPC=popq_r64_1        
  popq %r13                         #  174   0xfaedc  2      OPC=popq_r64_1        
  popq %r14                         #  175   0xfaede  2      OPC=popq_r64_1        
  popq %r15                         #  176   0xfaee0  2      OPC=popq_r64_1        
.L_faee0:                           #        0xfaee2  0      OPC=<label>           
  retq                              #  177   0xfaee2  1      OPC=retq              
  nop                               #  178   0xfaee3  1      OPC=nop               
                                                                                   
.size _res_hconf_reorder_addrs, .-_res_hconf_reorder_addrs

