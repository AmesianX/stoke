  .text
  .globl build_charclass_op
  .type build_charclass_op, @function

#! file-offset 0xbe74e
#! rip-offset  0xbe74e
#! capacity    453 bytes

# Text                      #  Line  RIP      Bytes  Opcode              
.build_charclass_op:        #        0xbe74e  0      OPC=<label>         
  pushq %r15                #  1     0xbe74e  2      OPC=pushq_r64_1     
  pushq %r14                #  2     0xbe750  2      OPC=pushq_r64_1     
  pushq %r13                #  3     0xbe752  2      OPC=pushq_r64_1     
  pushq %r12                #  4     0xbe754  2      OPC=pushq_r64_1     
  pushq %rbp                #  5     0xbe756  1      OPC=pushq_r64_1     
  pushq %rbx                #  6     0xbe757  1      OPC=pushq_r64_1     
  subq $0x38, %rsp          #  7     0xbe758  4      OPC=subq_r64_imm8   
  movq %rdi, %r12           #  8     0xbe75c  3      OPC=movq_r64_r64    
  movq %rsi, (%rsp)         #  9     0xbe75f  4      OPC=movq_m64_r64    
  movq %rdx, %r15           #  10    0xbe763  3      OPC=movq_r64_r64    
  movq %rcx, %rbx           #  11    0xbe766  3      OPC=movq_r64_r64    
  movl %r8d, %r14d          #  12    0xbe769  3      OPC=movl_r32_r32    
  movq %r9, 0x8(%rsp)       #  13    0xbe76c  5      OPC=movq_m64_r64    
  movl $0x0, 0x2c(%rsp)     #  14    0xbe771  8      OPC=movl_m32_imm32  
  movl $0x1, %esi           #  15    0xbe779  5      OPC=movl_r32_imm32  
  movl $0x20, %edi          #  16    0xbe77e  5      OPC=movl_r32_imm32  
  callq .L_1f8c0            #  17    0xbe783  5      OPC=callq_label     
  movq %rax, %rbp           #  18    0xbe788  3      OPC=movq_r64_r64    
  movl $0x1, %esi           #  19    0xbe78b  5      OPC=movl_r32_imm32  
  movl $0x48, %edi          #  20    0xbe790  5      OPC=movl_r32_imm32  
  callq .L_1f8c0            #  21    0xbe795  5      OPC=callq_label     
  movq %rax, %r13           #  22    0xbe79a  3      OPC=movq_r64_r64    
  testq %rax, %rax          #  23    0xbe79d  3      OPC=testq_r64_r64   
  je .L_be7a7               #  24    0xbe7a0  2      OPC=je_label        
  testq %rbp, %rbp          #  25    0xbe7a2  3      OPC=testq_r64_r64   
  jne .L_be7bc              #  26    0xbe7a5  2      OPC=jne_label       
.L_be7a7:                   #        0xbe7a7  0      OPC=<label>         
  movq 0x8(%rsp), %rax      #  27    0xbe7a7  5      OPC=movq_r64_m64    
  movl $0xc, (%rax)         #  28    0xbe7ac  6      OPC=movl_m32_imm32  
  movl $0x0, %eax           #  29    0xbe7b2  5      OPC=movl_r32_imm32  
  jmpq .L_be904             #  30    0xbe7b7  5      OPC=jmpq_label_1    
.L_be7bc:                   #        0xbe7bc  0      OPC=<label>         
  testl %r14d, %r14d        #  31    0xbe7bc  3      OPC=testl_r32_r32   
  je .L_be7c5               #  32    0xbe7bf  2      OPC=je_label        
  orb $0x1, 0x30(%rax)      #  33    0xbe7c1  4      OPC=orb_m8_imm8     
.L_be7c5:                   #        0xbe7c5  0      OPC=<label>         
  leaq 0x2c(%rsp), %rcx     #  34    0xbe7c5  5      OPC=leaq_r64_m16    
  movl $0x0, %r9d           #  35    0xbe7ca  6      OPC=movl_r32_imm32  
  movq %r15, %r8            #  36    0xbe7d0  3      OPC=movq_r64_r64    
  movq %r13, %rdx           #  37    0xbe7d3  3      OPC=movq_r64_r64    
  movq %rbp, %rsi           #  38    0xbe7d6  3      OPC=movq_r64_r64    
  movq (%rsp), %rdi         #  39    0xbe7d9  4      OPC=movq_r64_m64    
  callq .build_charclass    #  40    0xbe7dd  5      OPC=callq_label     
  movl %eax, %r15d          #  41    0xbe7e2  3      OPC=movl_r32_r32    
  testl %eax, %eax          #  42    0xbe7e5  2      OPC=testl_r32_r32   
  jne .L_be7f7              #  43    0xbe7e7  2      OPC=jne_label       
  movzbl (%rbx), %ecx       #  44    0xbe7e9  3      OPC=movzbl_r32_m8   
  movl $0x1, %esi           #  45    0xbe7ec  5      OPC=movl_r32_imm32  
  testb %cl, %cl            #  46    0xbe7f1  2      OPC=testb_r8_r8     
  jne .L_be819              #  47    0xbe7f3  2      OPC=jne_label       
  jmpq .L_be83a             #  48    0xbe7f5  2      OPC=jmpq_label      
.L_be7f7:                   #        0xbe7f7  0      OPC=<label>         
  movq %rbp, %rdi           #  49    0xbe7f7  3      OPC=movq_r64_r64    
  callq .L_1f8d0            #  50    0xbe7fa  5      OPC=callq_label     
  movq %r13, %rdi           #  51    0xbe7ff  3      OPC=movq_r64_r64    
  callq .free_charset       #  52    0xbe802  5      OPC=callq_label     
  movq 0x8(%rsp), %rax      #  53    0xbe807  5      OPC=movq_r64_m64    
  movl %r15d, (%rax)        #  54    0xbe80c  3      OPC=movl_m32_r32    
  movl $0x0, %eax           #  55    0xbe80f  5      OPC=movl_r32_imm32  
  jmpq .L_be904             #  56    0xbe814  5      OPC=jmpq_label_1    
.L_be819:                   #        0xbe819  0      OPC=<label>         
  movl %ecx, %eax           #  57    0xbe819  2      OPC=movl_r32_r32    
  shrb $0x6, %al            #  58    0xbe81b  3      OPC=shrb_r8_imm8    
  movzbl %al, %eax          #  59    0xbe81e  3      OPC=movzbl_r32_r8   
  andl $0x3f, %ecx          #  60    0xbe821  3      OPC=andl_r32_imm8   
  movq %rsi, %rdx           #  61    0xbe824  3      OPC=movq_r64_r64    
  shlq %cl, %rdx            #  62    0xbe827  3      OPC=shlq_r64_cl     
  orq %rdx, (%rbp,%rax,8)   #  63    0xbe82a  5      OPC=orq_m64_r64     
  addq $0x1, %rbx           #  64    0xbe82f  4      OPC=addq_r64_imm8   
  movzbl (%rbx), %ecx       #  65    0xbe833  3      OPC=movzbl_r32_m8   
  testb %cl, %cl            #  66    0xbe836  2      OPC=testb_r8_r8     
  jne .L_be819              #  67    0xbe838  2      OPC=jne_label       
.L_be83a:                   #        0xbe83a  0      OPC=<label>         
  testl %r14d, %r14d        #  68    0xbe83a  3      OPC=testl_r32_r32   
  je .L_be847               #  69    0xbe83d  2      OPC=je_label        
  movq %rbp, %rdi           #  70    0xbe83f  3      OPC=movq_r64_r64    
  callq .bitset_not         #  71    0xbe842  5      OPC=callq_label     
.L_be847:                   #        0xbe847  0      OPC=<label>         
  cmpl $0x1, 0xa4(%r12)     #  72    0xbe847  9      OPC=cmpl_m32_imm8   
  jle .L_be85f              #  73    0xbe850  2      OPC=jle_label       
  movq 0x78(%r12), %rsi     #  74    0xbe852  5      OPC=movq_r64_m64    
  movq %rbp, %rdi           #  75    0xbe857  3      OPC=movq_r64_r64    
  callq .bitset_mask        #  76    0xbe85a  5      OPC=callq_label     
.L_be85f:                   #        0xbe85f  0      OPC=<label>         
  movb $0x3, 0x18(%rsp)     #  77    0xbe85f  5      OPC=movb_m8_imm8    
  movq %rbp, 0x10(%rsp)     #  78    0xbe864  5      OPC=movq_m64_r64    
  leaq 0x10(%rsp), %rcx     #  79    0xbe869  5      OPC=leaq_r64_m16    
  movl $0x0, %edx           #  80    0xbe86e  5      OPC=movl_r32_imm32  
  movl $0x0, %esi           #  81    0xbe873  5      OPC=movl_r32_imm32  
  movq %r12, %rdi           #  82    0xbe878  3      OPC=movq_r64_r64    
  callq .create_token_tree  #  83    0xbe87b  5      OPC=callq_label     
  movq %rax, %rbx           #  84    0xbe880  3      OPC=movq_r64_r64    
  testq %rax, %rax          #  85    0xbe883  3      OPC=testq_r64_r64   
  je .L_be8e4               #  86    0xbe886  2      OPC=je_label        
  cmpl $0x1, 0xa4(%r12)     #  87    0xbe888  9      OPC=cmpl_m32_imm8   
  jle .L_be8d7              #  88    0xbe891  2      OPC=jle_label       
  movb $0x6, 0x18(%rsp)     #  89    0xbe893  5      OPC=movb_m8_imm8    
  movq %r13, 0x10(%rsp)     #  90    0xbe898  5      OPC=movq_m64_r64    
  orb $0x2, 0xa0(%r12)      #  91    0xbe89d  9      OPC=orb_m8_imm8     
  leaq 0x10(%rsp), %rcx     #  92    0xbe8a6  5      OPC=leaq_r64_m16    
  movl $0x0, %edx           #  93    0xbe8ab  5      OPC=movl_r32_imm32  
  movl $0x0, %esi           #  94    0xbe8b0  5      OPC=movl_r32_imm32  
  movq %r12, %rdi           #  95    0xbe8b5  3      OPC=movq_r64_r64    
  callq .create_token_tree  #  96    0xbe8b8  5      OPC=callq_label     
  testq %rax, %rax          #  97    0xbe8bd  3      OPC=testq_r64_r64   
  je .L_be8e4               #  98    0xbe8c0  2      OPC=je_label        
  movl $0xa, %ecx           #  99    0xbe8c2  5      OPC=movl_r32_imm32  
  movq %rax, %rdx           #  100   0xbe8c7  3      OPC=movq_r64_r64    
  movq %rbx, %rsi           #  101   0xbe8ca  3      OPC=movq_r64_r64    
  movq %r12, %rdi           #  102   0xbe8cd  3      OPC=movq_r64_r64    
  callq .create_tree        #  103   0xbe8d0  5      OPC=callq_label     
  jmpq .L_be904             #  104   0xbe8d5  2      OPC=jmpq_label      
.L_be8d7:                   #        0xbe8d7  0      OPC=<label>         
  movq %r13, %rdi           #  105   0xbe8d7  3      OPC=movq_r64_r64    
  callq .free_charset       #  106   0xbe8da  5      OPC=callq_label     
  movq %rbx, %rax           #  107   0xbe8df  3      OPC=movq_r64_r64    
  jmpq .L_be904             #  108   0xbe8e2  2      OPC=jmpq_label      
.L_be8e4:                   #        0xbe8e4  0      OPC=<label>         
  movq %rbp, %rdi           #  109   0xbe8e4  3      OPC=movq_r64_r64    
  callq .L_1f8d0            #  110   0xbe8e7  5      OPC=callq_label     
  movq %r13, %rdi           #  111   0xbe8ec  3      OPC=movq_r64_r64    
  callq .free_charset       #  112   0xbe8ef  5      OPC=callq_label     
  movq 0x8(%rsp), %rax      #  113   0xbe8f4  5      OPC=movq_r64_m64    
  movl $0xc, (%rax)         #  114   0xbe8f9  6      OPC=movl_m32_imm32  
  movl $0x0, %eax           #  115   0xbe8ff  5      OPC=movl_r32_imm32  
.L_be904:                   #        0xbe904  0      OPC=<label>         
  addq $0x38, %rsp          #  116   0xbe904  4      OPC=addq_r64_imm8   
  popq %rbx                 #  117   0xbe908  1      OPC=popq_r64_1      
  popq %rbp                 #  118   0xbe909  1      OPC=popq_r64_1      
  popq %r12                 #  119   0xbe90a  2      OPC=popq_r64_1      
  popq %r13                 #  120   0xbe90c  2      OPC=popq_r64_1      
  popq %r14                 #  121   0xbe90e  2      OPC=popq_r64_1      
  popq %r15                 #  122   0xbe910  2      OPC=popq_r64_1      
  retq                      #  123   0xbe912  1      OPC=retq            
                                                                         
.size build_charclass_op, .-build_charclass_op

