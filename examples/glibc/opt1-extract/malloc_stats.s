  .text
  .globl malloc_stats
  .type malloc_stats, @function

#! file-offset 0x76532
#! rip-offset  0x76532
#! capacity    503 bytes

# Text                              #  Line  RIP      Bytes  Opcode                
.malloc_stats:                      #        0x76532  0      OPC=<label>           
  pushq %r15                        #  1     0x76532  2      OPC=pushq_r64_1       
  pushq %r14                        #  2     0x76534  2      OPC=pushq_r64_1       
  pushq %r13                        #  3     0x76536  2      OPC=pushq_r64_1       
  pushq %r12                        #  4     0x76538  2      OPC=pushq_r64_1       
  pushq %rbp                        #  5     0x7653a  1      OPC=pushq_r64_1       
  pushq %rbx                        #  6     0x7653b  1      OPC=pushq_r64_1       
  subq $0x48, %rsp                  #  7     0x7653c  4      OPC=subq_r64_imm8     
  movq 0x314cf1(%rip), %r14         #  8     0x76540  7      OPC=movq_r64_m64      
  movl %r14d, %r15d                 #  9     0x76547  3      OPC=movl_r32_r32      
  cmpl $0x0, 0x314c73(%rip)         #  10    0x7654a  7      OPC=cmpl_m32_imm8     
  jns .L_76558                      #  11    0x76551  2      OPC=jns_label         
  callq .ptmalloc_init              #  12    0x76553  5      OPC=callq_label       
.L_76558:                           #        0x76558  0      OPC=<label>           
  movq 0x314861(%rip), %rax         #  13    0x76558  7      OPC=movq_r64_m64      
  movq (%rax), %rax                 #  14    0x7655f  3      OPC=movq_r64_m64      
  movl 0x74(%rax), %ecx             #  15    0x76562  3      OPC=movl_r32_m32      
  movl %ecx, 0xc(%rsp)              #  16    0x76565  4      OPC=movl_m32_r32      
  movl %ecx, %edx                   #  17    0x76569  2      OPC=movl_r32_r32      
  orl $0x2, %edx                    #  18    0x7656b  3      OPC=orl_r32_imm8      
  movl %edx, 0x74(%rax)             #  19    0x7656e  3      OPC=movl_m32_r32      
  leaq 0x3156c8(%rip), %rbx         #  20    0x76571  7      OPC=leaq_r64_m16      
  movl $0x0, %r13d                  #  21    0x76578  6      OPC=movl_r32_imm32    
  leaq 0x10(%rsp), %rbp             #  22    0x7657e  5      OPC=leaq_r64_m16      
.L_76583:                           #        0x76583  0      OPC=<label>           
  movq $0x0, (%rbp)                 #  23    0x76583  8      OPC=movq_m64_imm32    
  movq $0x0, 0x8(%rbp)              #  24    0x7658b  8      OPC=movq_m64_imm32    
  movq $0x0, 0x10(%rbp)             #  25    0x76593  8      OPC=movq_m64_imm32    
  movq $0x0, 0x18(%rbp)             #  26    0x7659b  8      OPC=movq_m64_imm32    
  movq $0x0, 0x20(%rbp)             #  27    0x765a3  8      OPC=movq_m64_imm32    
  movl $0x1, %esi                   #  28    0x765ab  5      OPC=movl_r32_imm32    
  movl $0x0, %eax                   #  29    0x765b0  5      OPC=movl_r32_imm32    
  cmpl $0x0, 0x31a644(%rip)         #  30    0x765b5  7      OPC=cmpl_m32_imm8     
  je .L_765c6                       #  31    0x765bc  2      OPC=je_label          
  lock                              #  32    0x765be  1      OPC=lock              
  cmpxchgl %esi, (%rbx)             #  33    0x765bf  3      OPC=cmpxchgl_m32_r32  
  nop                               #  34    0x765c2  1      OPC=nop               
  jne .L_765cb                      #  35    0x765c3  2      OPC=jne_label         
  jmpq .L_765e1                     #  36    0x765c5  2      OPC=jmpq_label        
.L_765c6:                           #        0x765c7  0      OPC=<label>           
  cmpxchgl %esi, (%rbx)             #  37    0x765c7  3      OPC=cmpxchgl_m32_r32  
  je .L_765e1                       #  38    0x765ca  2      OPC=je_label          
.L_765cb:                           #        0x765cc  0      OPC=<label>           
  leaq (%rbx), %rdi                 #  39    0x765cc  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  40    0x765cf  7      OPC=subq_r64_imm32    
  callq .__lll_lock_wait_private    #  41    0x765d6  5      OPC=callq_label       
  addq $0x80, %rsp                  #  42    0x765db  7      OPC=addq_r64_imm32    
.L_765e1:                           #        0x765e2  0      OPC=<label>           
  movq %rbp, %rsi                   #  43    0x765e2  3      OPC=movq_r64_r64      
  movq %rbx, %rdi                   #  44    0x765e5  3      OPC=movq_r64_r64      
  callq .int_mallinfo               #  45    0x765e8  5      OPC=callq_label       
  movq 0x3147cd(%rip), %r12         #  46    0x765ed  7      OPC=movq_r64_m64      
  movl %r13d, %edx                  #  47    0x765f4  3      OPC=movl_r32_r32      
  leaq 0xe2561(%rip), %rsi          #  48    0x765f7  7      OPC=leaq_r64_m16      
  movq (%r12), %rdi                 #  49    0x765fe  4      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  50    0x76602  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  51    0x76607  5      OPC=callq_label       
  movl 0x10(%rsp), %edx             #  52    0x7660c  4      OPC=movl_r32_m32      
  leaq 0xe2553(%rip), %rsi          #  53    0x76610  7      OPC=leaq_r64_m16      
  movq (%r12), %rdi                 #  54    0x76617  4      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  55    0x7661b  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  56    0x76620  5      OPC=callq_label       
  movl 0x2c(%rsp), %edx             #  57    0x76625  4      OPC=movl_r32_m32      
  leaq 0xe2553(%rip), %rsi          #  58    0x76629  7      OPC=leaq_r64_m16      
  movq (%r12), %rdi                 #  59    0x76630  4      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  60    0x76634  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  61    0x76639  5      OPC=callq_label       
  addl 0x10(%rsp), %r14d            #  62    0x7663e  5      OPC=addl_r32_m32      
  addl 0x2c(%rsp), %r15d            #  63    0x76643  5      OPC=addl_r32_m32      
  cmpl $0x0, 0x31a5b2(%rip)         #  64    0x76648  7      OPC=cmpl_m32_imm8     
  je .L_76657                       #  65    0x7664f  2      OPC=je_label          
  lock                              #  66    0x76651  1      OPC=lock              
  decl (%rbx)                       #  67    0x76652  2      OPC=decl_m32          
  nop                               #  68    0x76654  1      OPC=nop               
  jne .L_7665b                      #  69    0x76655  2      OPC=jne_label         
  jmpq .L_76671                     #  70    0x76657  2      OPC=jmpq_label        
.L_76657:                           #        0x76659  0      OPC=<label>           
  decl (%rbx)                       #  71    0x76659  2      OPC=decl_m32          
  je .L_76671                       #  72    0x7665b  2      OPC=je_label          
.L_7665b:                           #        0x7665d  0      OPC=<label>           
  leaq (%rbx), %rdi                 #  73    0x7665d  3      OPC=leaq_r64_m16      
  subq $0x80, %rsp                  #  74    0x76660  7      OPC=subq_r64_imm32    
  callq .__lll_unlock_wake_private  #  75    0x76667  5      OPC=callq_label       
  addq $0x80, %rsp                  #  76    0x7666c  7      OPC=addq_r64_imm32    
.L_76671:                           #        0x76673  0      OPC=<label>           
  movq 0x868(%rbx), %rbx            #  77    0x76673  7      OPC=movq_r64_m64      
  leaq 0x3155c1(%rip), %rax         #  78    0x7667a  7      OPC=leaq_r64_m16      
  cmpq %rax, %rbx                   #  79    0x76681  3      OPC=cmpq_r64_r64      
  je .L_7668d                       #  80    0x76684  2      OPC=je_label          
  addl $0x1, %r13d                  #  81    0x76686  4      OPC=addl_r32_imm8     
  jmpq .L_76583                     #  82    0x7668a  5      OPC=jmpq_label_1      
.L_7668d:                           #        0x7668f  0      OPC=<label>           
  movq 0x31472c(%rip), %rbx         #  83    0x7668f  7      OPC=movq_r64_m64      
  movq (%rbx), %rcx                 #  84    0x76696  3      OPC=movq_r64_m64      
  movl $0x14, %edx                  #  85    0x76699  5      OPC=movl_r32_imm32    
  movl $0x1, %esi                   #  86    0x7669e  5      OPC=movl_r32_imm32    
  leaq 0xe24f3(%rip), %rdi          #  87    0x766a3  7      OPC=leaq_r64_m16      
  callq ._IO_fwrite                 #  88    0x766aa  5      OPC=callq_label       
  movl %r14d, %edx                  #  89    0x766af  3      OPC=movl_r32_r32      
  leaq 0xe24b2(%rip), %rsi          #  90    0x766b2  7      OPC=leaq_r64_m16      
  movq (%rbx), %rdi                 #  91    0x766b9  3      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  92    0x766bc  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  93    0x766c1  5      OPC=callq_label       
  movl %r15d, %edx                  #  94    0x766c6  3      OPC=movl_r32_r32      
  leaq 0xe24b4(%rip), %rsi          #  95    0x766c9  7      OPC=leaq_r64_m16      
  movq (%rbx), %rdi                 #  96    0x766d0  3      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  97    0x766d3  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  98    0x766d8  5      OPC=callq_label       
  movl 0x314b4f(%rip), %edx         #  99    0x766dd  6      OPC=movl_r32_m32      
  leaq 0xe24c8(%rip), %rsi          #  100   0x766e3  7      OPC=leaq_r64_m16      
  movq (%rbx), %rdi                 #  101   0x766ea  3      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  102   0x766ed  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  103   0x766f2  5      OPC=callq_label       
  movq 0x314b44(%rip), %rdx         #  104   0x766f7  7      OPC=movq_r64_m64      
  leaq 0xe24c6(%rip), %rsi          #  105   0x766fe  7      OPC=leaq_r64_m16      
  movq (%rbx), %rdi                 #  106   0x76705  3      OPC=movq_r64_m64      
  movl $0x0, %eax                   #  107   0x76708  5      OPC=movl_r32_imm32    
  callq .fprintf                    #  108   0x7670d  5      OPC=callq_label       
  movq (%rbx), %rax                 #  109   0x76712  3      OPC=movq_r64_m64      
  movl 0xc(%rsp), %ecx              #  110   0x76715  4      OPC=movl_r32_m32      
  orl %ecx, 0x74(%rax)              #  111   0x76719  3      OPC=orl_m32_r32       
  addq $0x48, %rsp                  #  112   0x7671c  4      OPC=addq_r64_imm8     
  popq %rbx                         #  113   0x76720  1      OPC=popq_r64_1        
  popq %rbp                         #  114   0x76721  1      OPC=popq_r64_1        
  popq %r12                         #  115   0x76722  2      OPC=popq_r64_1        
  popq %r13                         #  116   0x76724  2      OPC=popq_r64_1        
  popq %r14                         #  117   0x76726  2      OPC=popq_r64_1        
  popq %r15                         #  118   0x76728  2      OPC=popq_r64_1        
  retq                              #  119   0x7672a  1      OPC=retq              
                                                                                   
.size malloc_stats, .-malloc_stats

