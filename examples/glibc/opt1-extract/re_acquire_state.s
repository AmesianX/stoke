  .text
  .globl re_acquire_state
  .type re_acquire_state, @function

#! file-offset 0xbd497
#! rip-offset  0xbd497
#! capacity    463 bytes

# Text                          #  Line  RIP      Bytes  Opcode               
.re_acquire_state:              #        0xbd497  0      OPC=<label>          
  pushq %r15                    #  1     0xbd497  2      OPC=pushq_r64_1      
  pushq %r14                    #  2     0xbd499  2      OPC=pushq_r64_1      
  pushq %r13                    #  3     0xbd49b  2      OPC=pushq_r64_1      
  pushq %r12                    #  4     0xbd49d  2      OPC=pushq_r64_1      
  pushq %rbp                    #  5     0xbd49f  1      OPC=pushq_r64_1      
  pushq %rbx                    #  6     0xbd4a0  1      OPC=pushq_r64_1      
  subq $0x18, %rsp              #  7     0xbd4a1  4      OPC=subq_r64_imm8    
  movl 0x4(%rdx), %ecx          #  8     0xbd4a5  3      OPC=movl_r32_m32     
  testl %ecx, %ecx              #  9     0xbd4a8  2      OPC=testl_r32_r32    
  jne .L_bd4bc                  #  10    0xbd4aa  2      OPC=jne_label        
  movl $0x0, (%rdi)             #  11    0xbd4ac  6      OPC=movl_m32_imm32   
  movl $0x0, %ebp               #  12    0xbd4b2  5      OPC=movl_r32_imm32   
  jmpq .L_bd654                 #  13    0xbd4b7  5      OPC=jmpq_label_1     
.L_bd4bc:                       #        0xbd4bc  0      OPC=<label>          
  movl %ecx, %r12d              #  14    0xbd4bc  3      OPC=movl_r32_r32     
  testl %ecx, %ecx              #  15    0xbd4bf  2      OPC=testl_r32_r32    
  jle .L_bd4e1                  #  16    0xbd4c1  2      OPC=jle_label        
  movq 0x8(%rdx), %rax          #  17    0xbd4c3  4      OPC=movq_r64_m64     
  leal -0x1(%rcx), %ecx         #  18    0xbd4c7  3      OPC=leal_r32_m16     
  leaq 0x4(,%rcx,4), %rcx       #  19    0xbd4ca  8      OPC=leaq_r64_m16     
  addq %rax, %rcx               #  20    0xbd4d2  3      OPC=addq_r64_r64     
.L_bd4d5:                       #        0xbd4d5  0      OPC=<label>          
  addl (%rax), %r12d            #  21    0xbd4d5  3      OPC=addl_r32_m32     
  addq $0x4, %rax               #  22    0xbd4d8  4      OPC=addq_r64_imm8    
  cmpq %rcx, %rax               #  23    0xbd4dc  3      OPC=cmpq_r64_r64     
  jne .L_bd4d5                  #  24    0xbd4df  2      OPC=jne_label        
.L_bd4e1:                       #        0xbd4e1  0      OPC=<label>          
  movq %rdx, %r14               #  25    0xbd4e1  3      OPC=movq_r64_r64     
  movq %rsi, %r15               #  26    0xbd4e4  3      OPC=movq_r64_r64     
  movq %rdi, 0x8(%rsp)          #  27    0xbd4e7  5      OPC=movq_m64_r64     
  movl %r12d, %eax              #  28    0xbd4ec  3      OPC=movl_r32_r32     
  andl 0x84(%rsi), %eax         #  29    0xbd4ef  6      OPC=andl_r32_m32     
  shlq $0x4, %rax               #  30    0xbd4f5  4      OPC=shlq_r64_imm8    
  addq 0x40(%rsi), %rax         #  31    0xbd4f9  4      OPC=addq_r64_m64     
  movl (%rax), %edx             #  32    0xbd4fd  2      OPC=movl_r32_m32     
  testl %edx, %edx              #  33    0xbd4ff  2      OPC=testl_r32_r32    
  jle .L_bd53b                  #  34    0xbd501  2      OPC=jle_label        
  movq 0x8(%rax), %rbx          #  35    0xbd503  4      OPC=movq_r64_m64     
  leal -0x1(%rdx), %eax         #  36    0xbd507  3      OPC=leal_r32_m16     
  leaq 0x8(,%rax,8), %r13       #  37    0xbd50a  8      OPC=leaq_r64_m16     
  addq %rbx, %r13               #  38    0xbd512  3      OPC=addq_r64_r64     
.L_bd515:                       #        0xbd515  0      OPC=<label>          
  movq (%rbx), %rbp             #  39    0xbd515  3      OPC=movq_r64_m64     
  cmpl %r12d, (%rbp)            #  40    0xbd518  4      OPC=cmpl_m32_r32     
  jne .L_bd532                  #  41    0xbd51c  2      OPC=jne_label        
  leaq 0x8(%rbp), %rdi          #  42    0xbd51e  4      OPC=leaq_r64_m16     
  movq %r14, %rsi               #  43    0xbd522  3      OPC=movq_r64_r64     
  callq .re_node_set_compare    #  44    0xbd525  5      OPC=callq_label      
  testl %eax, %eax              #  45    0xbd52a  2      OPC=testl_r32_r32    
  jne .L_bd654                  #  46    0xbd52c  6      OPC=jne_label_1      
.L_bd532:                       #        0xbd532  0      OPC=<label>          
  addq $0x8, %rbx               #  47    0xbd532  4      OPC=addq_r64_imm8    
  cmpq %r13, %rbx               #  48    0xbd536  3      OPC=cmpq_r64_r64     
  jne .L_bd515                  #  49    0xbd539  2      OPC=jne_label        
.L_bd53b:                       #        0xbd53b  0      OPC=<label>          
  movl $0x1, %esi               #  50    0xbd53b  5      OPC=movl_r32_imm32   
  movl $0x58, %edi              #  51    0xbd540  5      OPC=movl_r32_imm32   
  callq .L_1f8c0                #  52    0xbd545  5      OPC=callq_label      
  movq %rax, %rbx               #  53    0xbd54a  3      OPC=movq_r64_r64     
  testq %rax, %rax              #  54    0xbd54d  3      OPC=testq_r64_r64    
  je .L_bd644                   #  55    0xbd550  6      OPC=je_label_1       
  leaq 0x8(%rax), %rbp          #  56    0xbd556  4      OPC=leaq_r64_m16     
  movq %r14, %rsi               #  57    0xbd55a  3      OPC=movq_r64_r64     
  movq %rbp, %rdi               #  58    0xbd55d  3      OPC=movq_r64_r64     
  callq .re_node_set_init_copy  #  59    0xbd560  5      OPC=callq_label      
  testl %eax, %eax              #  60    0xbd565  2      OPC=testl_r32_r32    
  je .L_bd576                   #  61    0xbd567  2      OPC=je_label         
  movq %rbx, %rdi               #  62    0xbd569  3      OPC=movq_r64_r64     
  callq .L_1f8d0                #  63    0xbd56c  5      OPC=callq_label      
  jmpq .L_bd644                 #  64    0xbd571  5      OPC=jmpq_label_1     
.L_bd576:                       #        0xbd576  0      OPC=<label>          
  movq %rbp, 0x38(%rbx)         #  65    0xbd576  4      OPC=movq_m64_r64     
  movl 0x4(%r14), %r8d          #  66    0xbd57a  4      OPC=movl_r32_m32     
  testl %r8d, %r8d              #  67    0xbd57e  3      OPC=testl_r32_r32    
  jle .L_bd602                  #  68    0xbd581  2      OPC=jle_label        
  movq (%r15), %r9              #  69    0xbd583  3      OPC=movq_r64_m64     
  movq 0x8(%r14), %r10          #  70    0xbd586  4      OPC=movq_r64_m64     
  movl $0x0, %esi               #  71    0xbd58a  5      OPC=movl_r32_imm32   
.L_bd58f:                       #        0xbd58f  0      OPC=<label>          
  movslq (%r10,%rsi,4), %rcx    #  72    0xbd58f  4      OPC=movslq_r64_m32   
  shlq $0x4, %rcx               #  73    0xbd593  4      OPC=shlq_r64_imm8    
  addq %r9, %rcx                #  74    0xbd597  3      OPC=addq_r64_r64     
  movzbl 0x8(%rcx), %edi        #  75    0xbd59a  4      OPC=movzbl_r32_m8    
  cmpl $0x1, %edi               #  76    0xbd59e  3      OPC=cmpl_r32_imm8    
  jne .L_bd5ae                  #  77    0xbd5a1  2      OPC=jne_label        
  testl $0x3ff00, 0x8(%rcx)     #  78    0xbd5a3  7      OPC=testl_m32_imm32  
  je .L_bd5f9                   #  79    0xbd5aa  2      OPC=je_label         
  jmpq .L_bd621                 #  80    0xbd5ac  2      OPC=jmpq_label       
.L_bd5ae:                       #        0xbd5ae  0      OPC=<label>          
  movzbl 0xa(%rcx), %eax        #  81    0xbd5ae  4      OPC=movzbl_r32_m8    
  shrb $0x4, %al                #  82    0xbd5b2  3      OPC=shrb_r8_imm8     
  movzbl 0x50(%rbx), %edx       #  83    0xbd5b5  4      OPC=movzbl_r32_m8    
  movl %edx, %r11d              #  84    0xbd5b9  3      OPC=movl_r32_r32     
  shrb $0x5, %r11b              #  85    0xbd5bc  4      OPC=shrb_r8_imm8     
  orl %r11d, %eax               #  86    0xbd5c0  3      OPC=orl_r32_r32      
  andl $0x1, %eax               #  87    0xbd5c3  3      OPC=andl_r32_imm8    
  shll $0x5, %eax               #  88    0xbd5c6  3      OPC=shll_r32_imm8    
  andl $0xffffffdf, %edx        #  89    0xbd5c9  6      OPC=andl_r32_imm32   
  nop                           #  90    0xbd5cf  1      OPC=nop              
  nop                           #  91    0xbd5d0  1      OPC=nop              
  nop                           #  92    0xbd5d1  1      OPC=nop              
  orl %eax, %edx                #  93    0xbd5d2  2      OPC=orl_r32_r32      
  movb %dl, 0x50(%rbx)          #  94    0xbd5d4  3      OPC=movb_m8_r8       
  cmpl $0x2, %edi               #  95    0xbd5d7  3      OPC=cmpl_r32_imm8    
  jne .L_bd5dc                  #  96    0xbd5da  2      OPC=jne_label        
  orb $0x10, 0x50(%rbx)         #  97    0xbd5dc  4      OPC=orb_m8_imm8      
  jmpq .L_bd5f9                 #  98    0xbd5e0  2      OPC=jmpq_label       
.L_bd5dc:                       #        0xbd5e2  0      OPC=<label>          
  cmpl $0x4, %edi               #  99    0xbd5e2  3      OPC=cmpl_r32_imm8    
  jne .L_bd5e7                  #  100   0xbd5e5  2      OPC=jne_label        
  orb $0x40, 0x50(%rbx)         #  101   0xbd5e7  4      OPC=orb_m8_imm8      
  jmpq .L_bd5f9                 #  102   0xbd5eb  2      OPC=jmpq_label       
.L_bd5e7:                       #        0xbd5ed  0      OPC=<label>          
  cmpl $0xc, %edi               #  103   0xbd5ed  3      OPC=cmpl_r32_imm8    
  je .L_bd5f5                   #  104   0xbd5f0  2      OPC=je_label         
.L_bd5ec:                       #        0xbd5f2  0      OPC=<label>          
  testl $0x3ff00, 0x8(%rcx)     #  105   0xbd5f2  7      OPC=testl_m32_imm32  
  je .L_bd5f9                   #  106   0xbd5f9  2      OPC=je_label         
.L_bd5f5:                       #        0xbd5fb  0      OPC=<label>          
  orb $0x80, 0x50(%rbx)         #  107   0xbd5fb  4      OPC=orb_m8_imm8      
.L_bd5f9:                       #        0xbd5ff  0      OPC=<label>          
  addq $0x1, %rsi               #  108   0xbd5ff  4      OPC=addq_r64_imm8    
  cmpl %esi, %r8d               #  109   0xbd603  3      OPC=cmpl_r32_r32     
  jg .L_bd58f                   #  110   0xbd606  2      OPC=jg_label         
.L_bd602:                       #        0xbd608  0      OPC=<label>          
  movl %r12d, %edx              #  111   0xbd608  3      OPC=movl_r32_r32     
  movq %rbx, %rsi               #  112   0xbd60b  3      OPC=movq_r64_r64     
  movq %r15, %rdi               #  113   0xbd60e  3      OPC=movq_r64_r64     
  callq .register_state         #  114   0xbd611  5      OPC=callq_label      
  movq %rbx, %rbp               #  115   0xbd616  3      OPC=movq_r64_r64     
  testl %eax, %eax              #  116   0xbd619  2      OPC=testl_r32_r32    
  je .L_bd654                   #  117   0xbd61b  2      OPC=je_label         
  movq %rbx, %rdi               #  118   0xbd61d  3      OPC=movq_r64_r64     
  callq .free_state             #  119   0xbd620  5      OPC=callq_label      
  jmpq .L_bd644                 #  120   0xbd625  2      OPC=jmpq_label       
.L_bd621:                       #        0xbd627  0      OPC=<label>          
  movzbl 0xa(%rcx), %edx        #  121   0xbd627  4      OPC=movzbl_r32_m8    
  shrb $0x4, %dl                #  122   0xbd62b  3      OPC=shrb_r8_imm8     
  movzbl 0x50(%rbx), %eax       #  123   0xbd62e  4      OPC=movzbl_r32_m8    
  movl %eax, %edi               #  124   0xbd632  2      OPC=movl_r32_r32     
  shrb $0x5, %dil               #  125   0xbd634  4      OPC=shrb_r8_imm8     
  orl %edi, %edx                #  126   0xbd638  2      OPC=orl_r32_r32      
  andl $0x1, %edx               #  127   0xbd63a  3      OPC=andl_r32_imm8    
  shll $0x5, %edx               #  128   0xbd63d  3      OPC=shll_r32_imm8    
  andl $0xffffffdf, %eax        #  129   0xbd640  6      OPC=andl_r32_imm32   
  nop                           #  130   0xbd646  1      OPC=nop              
  nop                           #  131   0xbd647  1      OPC=nop              
  nop                           #  132   0xbd648  1      OPC=nop              
  orl %edx, %eax                #  133   0xbd649  2      OPC=orl_r32_r32      
  movb %al, 0x50(%rbx)          #  134   0xbd64b  3      OPC=movb_m8_r8       
  jmpq .L_bd5ec                 #  135   0xbd64e  2      OPC=jmpq_label       
.L_bd644:                       #        0xbd650  0      OPC=<label>          
  movq 0x8(%rsp), %rax          #  136   0xbd650  5      OPC=movq_r64_m64     
  movl $0xc, (%rax)             #  137   0xbd655  6      OPC=movl_m32_imm32   
  movl $0x0, %ebp               #  138   0xbd65b  5      OPC=movl_r32_imm32   
.L_bd654:                       #        0xbd660  0      OPC=<label>          
  movq %rbp, %rax               #  139   0xbd660  3      OPC=movq_r64_r64     
  addq $0x18, %rsp              #  140   0xbd663  4      OPC=addq_r64_imm8    
  popq %rbx                     #  141   0xbd667  1      OPC=popq_r64_1       
  popq %rbp                     #  142   0xbd668  1      OPC=popq_r64_1       
  popq %r12                     #  143   0xbd669  2      OPC=popq_r64_1       
  popq %r13                     #  144   0xbd66b  2      OPC=popq_r64_1       
  popq %r14                     #  145   0xbd66d  2      OPC=popq_r64_1       
  popq %r15                     #  146   0xbd66f  2      OPC=popq_r64_1       
  retq                          #  147   0xbd671  1      OPC=retq             
                                                                              
.size re_acquire_state, .-re_acquire_state

